<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Xhong的博客</title>
  <subtitle>热爱文学与编程的小胖子</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://lxh5431.github.io/"/>
  <updated>2016-07-25T09:47:29.686Z</updated>
  <id>http://lxh5431.github.io/</id>
  
  <author>
    <name>Xhong</name>
    <email>543158432@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>模板模式</title>
    <link href="http://lxh5431.github.io/2016/07/25/%E6%A8%A1%E6%9D%BF%E6%A8%A1%E5%BC%8F/"/>
    <id>http://lxh5431.github.io/2016/07/25/模板模式/</id>
    <published>2016-07-25T09:46:26.000Z</published>
    <updated>2016-07-25T09:47:29.686Z</updated>
    
    <content type="html">&lt;p&gt;###定义&lt;br&gt;模板方法模式定义了一个算法的步骤，并允许子类别为一个或多个步骤提供其实践方式。让子类别在不改变算法架构的情况下，重新定义算法中的某些步骤。在软件工程中，它是一种软件设计模式，和C++模板没有关连。&lt;/p&gt;
&lt;h2 id=&quot;结构图&quot;&gt;&lt;a href=&quot;#结构图&quot; class=&quot;headerlink&quot; title=&quot;结构图&quot;&gt;&lt;/a&gt;结构图&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://oa7hsarrh.bkt.clouddn.com/600px-Template_Method_UML.svg.png&quot; alt=&quot;模板模式结构图&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;抽象模板-Abstract-Template-角色有如下责任：&quot;&gt;&lt;a href=&quot;#抽象模板-Abstract-Template-角色有如下责任：&quot; class=&quot;headerlink&quot; title=&quot;抽象模板(Abstract Template)角色有如下责任：&quot;&gt;&lt;/a&gt;抽象模板(Abstract Template)角色有如下责任：&lt;/h4&gt;&lt;p&gt;　　　定义了一个或多个&lt;strong&gt;抽象操作&lt;/strong&gt;，以便让子类实现。这些抽象操作叫做基本操作，它们是一个顶级逻辑的组成步骤。&lt;/p&gt;
&lt;p&gt;　　定义并实现了一个模板方法。这个模板方法一般是一个具体方法，它给出了一个顶级逻辑的骨架，而逻辑的组成步骤在相应的抽象操作中，推迟到子类实现。顶级逻辑也有可能调用一些具体方法。&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;具体模板&lt;/strong&gt;(Concrete Template)角色又如下责任：&lt;br&gt;　　实现父类所定义的一个或多个抽象方法，它们是一个顶级逻辑的组成步骤。&lt;br&gt;每一个抽象模板角色都可以有任意多个具体模板角色与之对应，而每一个具体模板角色都可以给出这些抽象方法（也就是顶级逻辑的组成步骤）的不同实现，从而使得顶级逻辑的实现各不相同。&lt;/p&gt;
&lt;h3 id=&quot;模板模式在生活中的应用&quot;&gt;&lt;a href=&quot;#模板模式在生活中的应用&quot; class=&quot;headerlink&quot; title=&quot;模板模式在生活中的应用&quot;&gt;&lt;/a&gt;模板模式在生活中的应用&lt;/h3&gt;&lt;p&gt;在生活中随处可以看到模板模式的实现，遥控器的设计，只给了一个按键就是一种实现的算法，可是把他封装起来，在模板上会有所有的方法，比如调节音量和频道，模板就是封装算法的一种规范，在生活中，我们也需要把我们的一些秘密封装起来，比如登陆页面，只要你输入密码就可以触发验证的方法，比对正确才能够登录进去。&lt;br&gt;再设计模式中，herberate的设计也是运用了模板模式，在连接的时候，把繁琐的连接和断开，验证等操作封装起来，形成了基本的文件配置就可以连接数据库并提供不同的事务管理配置，降低了耦合度，提高了开发效率。&lt;/p&gt;
&lt;h2 id=&quot;模板模式和策略模式的比较&quot;&gt;&lt;a href=&quot;#模板模式和策略模式的比较&quot; class=&quot;headerlink&quot; title=&quot;模板模式和策略模式的比较&quot;&gt;&lt;/a&gt;模板模式和策略模式的比较&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;模板定义个一个算法的大纲，而由子类定义其中某些步骤的内容，算法的结构不改变，而策略通过对象组合让客户选择算法实现，放弃了对算法的控制&lt;/li&gt;
&lt;li&gt;模板由于使用了继承，实现了代码的复用，实现了所有子类之间的共享，而策略采用委托模板，使用了组合对象，更加有弹性和可扩展性，客户可以在运行的时候选择不同的策略对象去实现不同的算法&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;代码实现&quot;&gt;&lt;a href=&quot;#代码实现&quot; class=&quot;headerlink&quot; title=&quot;代码实现&quot;&gt;&lt;/a&gt;代码实现&lt;/h3&gt;定义抽象模板&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; templatemethodtest1;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;CaffeineBeverageWithHook&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;prepareRecipe&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		boilWater();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		brew();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		pourInCup();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(customerWantsCondiments())&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			addCondiments();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;customerWantsCondiments&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// TODO Auto-generated method stub&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;pourInCup&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// TODO Auto-generated method stub&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;Pouring into cup&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;brew&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;addCondiments&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;boilWater&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;Boiling water&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;实现具体的模板&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;44&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;45&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;46&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;47&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;48&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;49&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; templatemethodtest1;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.io.BufferedReader;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.io.IOException;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.io.InputStreamReader;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;CoffeeWithHook&lt;/span&gt;  &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;CaffeineBeverageWithHook&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;brew&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// TODO Auto-generated method stub&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;Dripping Coffee through filter&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;addCondiments&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// TODO Auto-generated method stub&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;Adding Suger and Mink&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;customerWantsCondiments&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// TODO Auto-generated method stub&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		String answer=getUserInput();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(answer.toLowerCase().startsWith(&lt;span class=&quot;string&quot;&gt;&quot;y&quot;&lt;/span&gt;))&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;getUserInput&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// TODO Auto-generated method stub&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	String answer=&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;Would you like milk and sugar with your xoffee(y/n)?&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	BufferedReader in=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; BufferedReader(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; InputStreamReader(System.in));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		answer=in.readLine();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt;(IOException e)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;IO err trying to read your answer&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(answer==&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;no&quot;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; answer;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;测试&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; templatemethodtest1;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BeverageTestDrive&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		CoffeeWithHook coffeeHook=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; CoffeeWithHook();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;Makeing coffee...&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		coffeeHook.prepareRecipe();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;结果：&lt;br&gt;Makeing coffee…&lt;br&gt;Boiling water&lt;br&gt;Dripping Coffee through filter&lt;br&gt;Pouring into cup&lt;br&gt;Adding Suger and Mink&lt;/p&gt;
&lt;h4 id=&quot;模板测试算法排列&quot;&gt;&lt;a href=&quot;#模板测试算法排列&quot; class=&quot;headerlink&quot; title=&quot;模板测试算法排列&quot;&gt;&lt;/a&gt;模板测试算法排列&lt;/h4&gt;&lt;p&gt;通过封装算法的排列，实现了简洁的代码和实现，对面向对像的封装有进一步的接触，&lt;/p&gt;
&lt;h4 id=&quot;代码实现-1&quot;&gt;&lt;a href=&quot;#代码实现-1&quot; class=&quot;headerlink&quot; title=&quot;代码实现&quot;&gt;&lt;/a&gt;代码实现&lt;/h4&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; templatemethodtest;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Duck&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Comparable&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	String name;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; weight;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Duck&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String name, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; weight)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name = name;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.weight = weight;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; name+&lt;span class=&quot;string&quot;&gt;&quot;weight&quot;&lt;/span&gt;+&lt;span class=&quot;string&quot;&gt;&quot; &quot;&lt;/span&gt;+weight;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;compareTo&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Object object)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// TODO Auto-generated method stub&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		Duck otherDuck=(Duck) object;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.weight&amp;lt;otherDuck.weight)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; -&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.weight==otherDuck.weight)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;测试&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; templatemethodtest;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.util.Arrays;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;DuckSortTestDrive&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		 Duck [] ducks=&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;				         &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Duck(&lt;span class=&quot;string&quot;&gt;&quot;Daffy&quot;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;				         &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Duck(&lt;span class=&quot;string&quot;&gt;&quot;Dewey&quot;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;				         &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Duck(&lt;span class=&quot;string&quot;&gt;&quot;Howard&quot;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;				         &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Duck(&lt;span class=&quot;string&quot;&gt;&quot;Loule&quot;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;				         &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Duck(&lt;span class=&quot;string&quot;&gt;&quot;Donald&quot;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;				         &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Duck(&lt;span class=&quot;string&quot;&gt;&quot;Huey&quot;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		 &amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		 System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;Before sorting: &quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		 display(ducks);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		 Arrays.sort(ducks);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		 System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;\n After sorting:  &quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		 display(ducks);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Duck[] ducks)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// TODO Auto-generated method stub&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;i&amp;lt;ducks.length;i++)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			System.out.println(ducks[i]);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;结果：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;Before sorting:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Daffyweight &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Deweyweight &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Howardweight &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Louleweight &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Donaldweight &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Hueyweight &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; After sorting:  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Deweyweight &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Louleweight &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Hueyweight &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Howardweight &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Daffyweight &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Donaldweight &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h3&gt;&lt;p&gt;在生活中也有很多的方法思维是这样的，当你要用到那个知识点的时候你才去翻阅，而不用一直放在你的记忆力，这样的话很容易造成知识混乱，这就是所谓的内聚吧，所以我们在生活中也处处用到模板模式，而考试的知识抽查需要用到策略模式，把所有的问题都需要设计，这样才能够不变应万变，正所谓，你不用来找我，我去找你，就是这个道理吧。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;###定义&lt;br&gt;模板方法模式定义了一个算法的步骤，并允许子类别为一个或多个步骤提供其实践方式。让子类别在不改变算法架构的情况下，重新定义算法中的某些步骤。在软件工程中，它是一种软件设计模式，和C++模板没有关连。&lt;/p&gt;
&lt;h2 id=&quot;结构图&quot;&gt;&lt;a href=&quot;#结构图&quot; class=&quot;headerlink&quot; title=&quot;结构图&quot;&gt;&lt;/a&gt;结构图&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://oa7hsarrh.bkt.clouddn.com/600px-Template_Method_UML.svg.png&quot; alt=&quot;模板模式结构图&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;抽象模板-Abstract-Template-角色有如下责任：&quot;&gt;&lt;a href=&quot;#抽象模板-Abstract-Template-角色有如下责任：&quot; class=&quot;headerlink&quot; title=&quot;抽象模板(Abstract Template)角色有如下责任：&quot;&gt;&lt;/a&gt;抽象模板(Abstract Template)角色有如下责任：&lt;/h4&gt;&lt;p&gt;　　　定义了一个或多个&lt;strong&gt;抽象操作&lt;/strong&gt;，以便让子类实现。这些抽象操作叫做基本操作，它们是一个顶级逻辑的组成步骤。&lt;/p&gt;
&lt;p&gt;　　定义并实现了一个模板方法。这个模板方法一般是一个具体方法，它给出了一个顶级逻辑的骨架，而逻辑的组成步骤在相应的抽象操作中，推迟到子类实现。顶级逻辑也有可能调用一些具体方法。&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;具体模板&lt;/strong&gt;(Concrete Template)角色又如下责任：&lt;br&gt;　　实现父类所定义的一个或多个抽象方法，它们是一个顶级逻辑的组成步骤。&lt;br&gt;每一个抽象模板角色都可以有任意多个具体模板角色与之对应，而每一个具体模板角色都可以给出这些抽象方法（也就是顶级逻辑的组成步骤）的不同实现，从而使得顶级逻辑的实现各不相同。&lt;/p&gt;
&lt;h3 id=&quot;模板模式在生活中的应用&quot;&gt;&lt;a href=&quot;#模板模式在生活中的应用&quot; class=&quot;headerlink&quot; title=&quot;模板模式在生活中的应用&quot;&gt;&lt;/a&gt;模板模式在生活中的应用&lt;/h3&gt;&lt;p&gt;在生活中随处可以看到模板模式的实现，遥控器的设计，只给了一个按键就是一种实现的算法，可是把他封装起来，在模板上会有所有的方法，比如调节音量和频道，模板就是封装算法的一种规范，在生活中，我们也需要把我们的一些秘密封装起来，比如登陆页面，只要你输入密码就可以触发验证的方法，比对正确才能够登录进去。&lt;br&gt;再设计模式中，herberate的设计也是运用了模板模式，在连接的时候，把繁琐的连接和断开，验证等操作封装起来，形成了基本的文件配置就可以连接数据库并提供不同的事务管理配置，降低了耦合度，提高了开发效率。&lt;/p&gt;
&lt;h2 id=&quot;模板模式和策略模式的比较&quot;&gt;&lt;a href=&quot;#模板模式和策略模式的比较&quot; class=&quot;headerlink&quot; title=&quot;模板模式和策略模式的比较&quot;&gt;&lt;/a&gt;模板模式和策略模式的比较&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;模板定义个一个算法的大纲，而由子类定义其中某些步骤的内容，算法的结构不改变，而策略通过对象组合让客户选择算法实现，放弃了对算法的控制&lt;/li&gt;
&lt;li&gt;模板由于使用了继承，实现了代码的复用，实现了所有子类之间的共享，而策略采用委托模板，使用了组合对象，更加有弹性和可扩展性，客户可以在运行的时候选择不同的策略对象去实现不同的算法
    
    </summary>
    
      <category term="设计模式" scheme="http://lxh5431.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="编程" scheme="http://lxh5431.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>适配器模式</title>
    <link href="http://lxh5431.github.io/2016/07/24/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <id>http://lxh5431.github.io/2016/07/24/适配器模式/</id>
    <published>2016-07-24T14:23:08.000Z</published>
    <updated>2016-07-24T15:08:36.897Z</updated>
    
    <content type="html">&lt;h3 id=&quot;适配器的定义&quot;&gt;&lt;a href=&quot;#适配器的定义&quot; class=&quot;headerlink&quot; title=&quot;适配器的定义&quot;&gt;&lt;/a&gt;适配器的定义&lt;/h3&gt;&lt;p&gt;在设计模式中，适配器模式（英语：adapter pattern）有时候也称包装样式或者包装(wrapper)。将一个类的接口转接成用户所期待的。一个适配使得因接口不兼容而不能在一起工作的类工作在一起，做法是将类自己的接口包裹在一个已存在的类中。&lt;/p&gt;
&lt;h2 id=&quot;适配器的种类&quot;&gt;&lt;a href=&quot;#适配器的种类&quot; class=&quot;headerlink&quot; title=&quot;适配器的种类&quot;&gt;&lt;/a&gt;适配器的种类&lt;/h2&gt;&lt;h4 id=&quot;对象适配器模式&quot;&gt;&lt;a href=&quot;#对象适配器模式&quot; class=&quot;headerlink&quot; title=&quot;对象适配器模式&quot;&gt;&lt;/a&gt;对象适配器模式&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;http://oa7hsarrh.bkt.clouddn.com/%E9%80%82%E9%85%8D%E5%99%A81.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;用一个具体的Adapter类对Adaptee和Target进行匹配。结果是当我们想要匹配一个类以及所有它的子类时，类Adapter将不能胜任工作。&lt;/p&gt;
&lt;h4 id=&quot;类适配器模式&quot;&gt;&lt;a href=&quot;#类适配器模式&quot; class=&quot;headerlink&quot; title=&quot;类适配器模式&quot;&gt;&lt;/a&gt;类适配器模式&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;http://oa7hsarrh.bkt.clouddn.com/%E9%80%82%E9%85%8D%E5%99%A8.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt; 允许一个Adapter与多个Adaptee—即Adaptee本身以及它的所有子类（如果有子类的话）—同时工作。Adapter也可以一次给所有的Adaptee添加功能。&lt;br&gt; &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&quot;结构&quot;&gt;&lt;a href=&quot;#结构&quot; class=&quot;headerlink&quot; title=&quot;结构&quot;&gt;&lt;/a&gt;结构&lt;/h5&gt;&lt;p&gt;目标角色（Target）：— 定义Client使用的与特定领域相关的接口。&lt;br&gt;客户角色（Client）：与符合Target接口的对象协同。&lt;br&gt; 被适配橘色（Adaptee)：定义一个已经存在并已经使用的接口，这个接口需要适配。&lt;br&gt; 适配器角色（Adapte) ：适配器模式的核心。它将对被适配Adaptee角色已有的接口转换为目标角色Target匹配的接口。对Adaptee的接口与Target接口进行适配.&lt;/p&gt;
&lt;h2 id=&quot;适配器的在生活中的应用&quot;&gt;&lt;a href=&quot;#适配器的在生活中的应用&quot; class=&quot;headerlink&quot; title=&quot;适配器的在生活中的应用&quot;&gt;&lt;/a&gt;适配器的在生活中的应用&lt;/h2&gt;&lt;p&gt;1.电视接口可以接受不同的音质，能够匹配不同的放映机，原来是DVD的机子，后来结成adapter之后可以匹配CD的放映，只要更改适配的代码，而不用修改全部&lt;br&gt;2.电脑pc的接口，可以插U盘和连接手机，还可以连接充电，这就是在原有的传输数据的基础上，适配充电的功能，然后可以重载不同的方法接口，连接不同的终端接口，在还可以连接打印机等其他的设备，这根据适配器，能够减少依赖，降低耦合度，便于开发和维护&lt;/p&gt;
&lt;h2 id=&quot;适配器模式使用注意事项&quot;&gt;&lt;a href=&quot;#适配器模式使用注意事项&quot; class=&quot;headerlink&quot; title=&quot;适配器模式使用注意事项&quot;&gt;&lt;/a&gt;适配器模式使用注意事项&lt;/h2&gt;&lt;p&gt;充当适配器角色的类就是：实现已有接口的抽象类；&lt;br&gt;为什么要用抽象类？此类是不要被实例化的。而只充当适配器的角色，也就为其子类提供了一个共同的接口，但其子类又可以将精力只集中在其感兴趣的地方。&lt;br&gt;适配器模式中被适配的接口 Adaptee 和适配成为的接口 Target 是没有关联的，Adaptee 和 Target 中的方法既可以是相同的，也可以是不同的。&lt;br&gt;适配器在适配的时候，可以适配多个 Apaptee，也就是说实现某个新的 Target 的功能的时候，需要调用多个模块的功能，适配多个模块的功能才能满足新接口的要求。&lt;br&gt;适配器有一个潜在的问题，就是被适配的对象不再兼容 Adaptee 的接口，因为适配器只是实现了 Target 的接口。这导致并不是所有 Adaptee 对象可以被使用的地方都能是使用适配器，双向适配器解决了这个问题&lt;/p&gt;
&lt;h2 id=&quot;代码实现&quot;&gt;&lt;a href=&quot;#代码实现&quot; class=&quot;headerlink&quot; title=&quot;代码实现&quot;&gt;&lt;/a&gt;代码实现&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; adaptertest;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Duck&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;quack&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;fly&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;实现接口&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; adaptertest;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MallardDuck&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Duck&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;quack&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// TODO Auto-generated method stub&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;Quack&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;fly&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// TODO Auto-generated method stub&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;I am flying&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; adaptertest;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Turkey&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;gobble&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;fly&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; adaptertest;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;WildTurkey&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Turkey&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;gobble&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// TODO Auto-generated method stub&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;Gobble gobble&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;fly&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// TODO Auto-generated method stub&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;I am flying a short distance&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;实现&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; adaptertest;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;WildTurkey&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Turkey&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;gobble&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// TODO Auto-generated method stub&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;Gobble gobble&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;fly&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// TODO Auto-generated method stub&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;I am flying a short distance&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;适配器实现&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; adaptertest;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TurkeyAdapter&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Duck&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Turkey turkey;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TurkeyAdapter&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Turkey turkey)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.turkey = turkey;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;quack&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// TODO Auto-generated method stub&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		turkey.gobble();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;fly&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// TODO Auto-generated method stub&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;;i++)	&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			turkey.fly();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;测试&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; adaptertest;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;DuckTestDrive&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		MallardDuck duck=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; MallardDuck();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		WildTurkey turkey=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; WildTurkey();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		Duck turkeyAdapter=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; TurkeyAdapter(turkey);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;the Turkey says...&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		turkey.gobble();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		turkey.fly();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;\n The Duck says...&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		testDuck(duck);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;\n The TurkeyAdapter says...&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		testDuck(turkeyAdapter);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;testDuck&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Duck duck)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// TODO Auto-generated method stub&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		duck.fly();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		duck.quack();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;结果：&lt;br&gt;the Turkey says…&lt;br&gt;Gobble gobble&lt;br&gt;I am flying a short distance&lt;/p&gt;
&lt;p&gt; The Duck says…&lt;br&gt;I am flying&lt;br&gt;Quack&lt;/p&gt;
&lt;p&gt; The TurkeyAdapter says…&lt;br&gt;I am flying a short distance&lt;br&gt;I am flying a short distance&lt;br&gt;I am flying a short distance&lt;br&gt;I am flying a short distance&lt;br&gt;I am flying a short distance&lt;br&gt;Gobble gobble&lt;/p&gt;
&lt;h3 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h3&gt;&lt;p&gt;通过本模式，可以锻炼一种解决方法的途径，不用一直死坑到底，当遇到困难时候，换一个方法去接应原来的方法估计更加完美，就像你要画一个圆，直接画的画你捉不住方向，这时候你可以像画一个正方形，然后慢慢的去掉四个边，然后慢慢磨平棱角，这样你的把握会更加的完美，这就是学习和生活的区别吧，不过学习的模式就是生活方法和经验的总结。加油，GO&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;适配器的定义&quot;&gt;&lt;a href=&quot;#适配器的定义&quot; class=&quot;headerlink&quot; title=&quot;适配器的定义&quot;&gt;&lt;/a&gt;适配器的定义&lt;/h3&gt;&lt;p&gt;在设计模式中，适配器模式（英语：adapter pattern）有时候也称包装样式或者包装(wrapper)。将一个类的接口转接成用户所期待的。一个适配使得因接口不兼容而不能在一起工作的类工作在一起，做法是将类自己的接口包裹在一个已存在的类中。&lt;/p&gt;
&lt;h2 id=&quot;适配器的种类&quot;&gt;&lt;a href=&quot;#适配器的种类&quot; class=&quot;headerlink&quot; title=&quot;适配器的种类&quot;&gt;&lt;/a&gt;适配器的种类&lt;/h2&gt;&lt;h4 id=&quot;对象适配器模式&quot;&gt;&lt;a href=&quot;#对象适配器模式&quot; class=&quot;headerlink&quot; title=&quot;对象适配器模式&quot;&gt;&lt;/a&gt;对象适配器模式&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;http://oa7hsarrh.bkt.clouddn.com/%E9%80%82%E9%85%8D%E5%99%A81.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;用一个具体的Adapter类对Adaptee和Target进行匹配。结果是当我们想要匹配一个类以及所有它的子类时，类Adapter将不能胜任工作。&lt;/p&gt;
&lt;h4 id=&quot;类适配器模式&quot;&gt;&lt;a href=&quot;#类适配器模式&quot; class=&quot;headerlink&quot; title=&quot;类适配器模式&quot;&gt;&lt;/a&gt;类适配器模式&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;http://oa7hsarrh.bkt.clouddn.com/%E9%80%82%E9%85%8D%E5%99%A8.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt; 允许一个Adapter与多个Adaptee—即Adaptee本身以及它的所有子类（如果有子类的话）—同时工作。Adapter也可以一次给所有的Adaptee添加功能。&lt;br&gt;
    
    </summary>
    
      <category term="设计模式" scheme="http://lxh5431.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="编程" scheme="http://lxh5431.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://lxh5431.github.io/2016/07/24/java%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <id>http://lxh5431.github.io/2016/07/24/java知识点/</id>
    <published>2016-07-24T06:04:23.101Z</published>
    <updated>2016-07-24T15:13:41.448Z</updated>
    
    <content type="html">&lt;p&gt;　1 Java基础&lt;/p&gt;
&lt;p&gt;　　1.1 Collection和Map&lt;/p&gt;
&lt;p&gt;　　(1)掌握Collection和Map的继承体系。&lt;/p&gt;
&lt;p&gt;　　(2)掌握ArrayList、LinkedList、Vector、Stack、PriorityQueue、HashSet、LinkedHashSet、TreeSet、HashMap、LinkedHashMap、TreeMap、WeakHashMap、EnumMap、TreeMap、HashTable的特点和实现原理。&lt;/p&gt;
&lt;p&gt;　　(3)掌握CopyOnWriteArrayList、CopyOnWriteArraySet、ConcurrentHashMap的实现原理和适用场景。&lt;/p&gt;
&lt;p&gt;　　1.2 IO&lt;/p&gt;
&lt;p&gt;　　(1)掌握InputStream、OutputStream、Reader、Writer的继承体系。&lt;/p&gt;
&lt;p&gt;　　(2)掌握字节流(FileInputStream、DataInputStream、BufferedInputStream、FileOutputSteam、DataOutputStream、BufferedOutputStream)和字符流(BufferedReader、InputStreamReader、FileReader、BufferedWriter、OutputStreamWriter、PrintWriter、FileWriter)，并熟练运用。&lt;/p&gt;
&lt;p&gt;　　(3)掌握NIO实现原理及使用方法。&lt;/p&gt;
&lt;p&gt;　　1.3 异常&lt;/p&gt;
&lt;p&gt;　　(1)掌握Throwable继承体系。&lt;/p&gt;
&lt;p&gt;　　(2)掌握异常工作原理。&lt;/p&gt;
&lt;p&gt;　　(3)了解常见受检异常(比如FileNotFoundException)、非受检异常(比如NullPointerException)和错误(比如IOError)。&lt;/p&gt;
&lt;p&gt;　　1.4 多线程&lt;/p&gt;
&lt;p&gt;　　(1)掌握Executors可以创建的三种(JAVA8增加了一种，共四种)线程池的特点及适用范围。&lt;/p&gt;
&lt;p&gt;　　(2)掌握多线程同步机制，并熟练运用。&lt;/p&gt;
&lt;p&gt;　　1.5 Socket&lt;/p&gt;
&lt;p&gt;　　(1)掌握Socket通信原理。&lt;/p&gt;
&lt;p&gt;　　(2)熟练使用多线程结合Socket进行编程。&lt;/p&gt;
&lt;p&gt;　　2 Java虚拟机&lt;/p&gt;
&lt;p&gt;　　2.1 JVM内存区域划分&lt;/p&gt;
&lt;p&gt;　　(1)掌握程序计数器、堆、虚拟机栈、本地方法栈、方法区（JAVA8已移除）、元空间（JAVA8新增）的作用及基本原理。&lt;/p&gt;
&lt;p&gt;　　(2)掌握堆的划分：新生代（Eden、Survivor1、Survivor2）和老年代的作用及工作原理。&lt;/p&gt;
&lt;p&gt;　　(3)掌握JVM内存参数设置及调优。&lt;/p&gt;
&lt;p&gt;　　2.2 类加载&lt;/p&gt;
&lt;p&gt;　　(1)掌握类的加载阶段：加载、链接（验证、准备、解析）、初始化、使用、卸载。&lt;/p&gt;
&lt;p&gt;　　(2)掌握类加载器分类及其应用：启动类加载器、扩展类加载器、应用程序类加载器、自定义加载器。&lt;/p&gt;
&lt;p&gt;　　3 J2EE&lt;/p&gt;
&lt;p&gt;　　(1) 掌握JSP内置对象、动作及相关特点和工作原理。&lt;/p&gt;
&lt;p&gt;　　(2) 掌握Servlet的特点和工作原理。&lt;/p&gt;
&lt;p&gt;　　(3) 掌握Spring框架的IOC和AOP实现原理（反射和动态代理）。&lt;/p&gt;
&lt;p&gt;　　(4) 至少掌握一个MVC框架（Spring MVC，Struts等）的工作原理，并熟练运用。&lt;/p&gt;
&lt;p&gt;　　(5) 至少掌握一个ORM框架(Hibernate，MyBatis等)的工作原理，并熟练运用。&lt;/p&gt;
&lt;p&gt;　　4 数据结构与算法&lt;/p&gt;
&lt;p&gt;　　(1)掌握线性表和树的特点并熟练运用。&lt;/p&gt;
&lt;p&gt;　　(2)掌握常用排序和查找算法：插入排序(直接插入排序、希尔排序)、选择排序(直接选择排序、堆排序)、交换排序(冒泡排序、快速排序)、归并排序，顺序查找、二分查找、哈希查找。&lt;/p&gt;
&lt;p&gt;　　(3) 熟练运用常见排序和查找算法思想解决编程问题。&lt;/p&gt;
&lt;p&gt;　　(4)了解几大基本算法：贪心算法、分治策略、动态规划。&lt;/p&gt;
&lt;p&gt;　　5 计算机网络&lt;/p&gt;
&lt;p&gt;　　(1)掌握网络的分层结构，及每层的功能特点。&lt;/p&gt;
&lt;p&gt;　　(2)掌握TCP/IP的通信原理(三次握手、四次挥手)&lt;/p&gt;
&lt;p&gt;　　6 数据库&lt;/p&gt;
&lt;p&gt;　　(1)掌握复杂的SQL语句编写。&lt;/p&gt;
&lt;p&gt;　　(2)掌握数据库的优化（SQL层面和表设计层面）。&lt;/p&gt;
&lt;p&gt;　　(3)至少掌握一款数据库产品。&lt;/p&gt;
&lt;p&gt;　　(4)熟悉高并发、大数据情况下的数据库开发。&lt;/p&gt;
&lt;p&gt;　　7 Web技术&lt;/p&gt;
&lt;p&gt;　　(1)掌握AJAX的工作原理。&lt;/p&gt;
&lt;p&gt;　　(2)至少熟悉一款JS框架(比如JQuery)。&lt;/p&gt;
&lt;p&gt;　　8 设计模式&lt;/p&gt;
&lt;p&gt;　　(1)熟悉常见的设计模式。&lt;/p&gt;
&lt;p&gt;　　(2)会将设计模式理论应用到实际开发中。&lt;/p&gt;
&lt;p&gt;　　9 Linux&lt;/p&gt;
&lt;p&gt;　　(1)熟练运用Linux常见命令。&lt;/p&gt;
&lt;p&gt;　　(2)熟悉Linux操作系统基本概念及特点。&lt;/p&gt;
&lt;p&gt;　　(3)熟悉Shell脚本。&lt;/p&gt;
&lt;p&gt;　　10 操作系统&lt;/p&gt;
&lt;p&gt;　　(1)掌握操作系统的进程管理。&lt;/p&gt;
&lt;p&gt;　　(2)了解操作系统的I/O。&lt;/p&gt;
&lt;p&gt;　　11 正则表达式&lt;/p&gt;
&lt;p&gt;　　(1)掌握常见正则表达式符号。&lt;/p&gt;
&lt;p&gt;　　(2)熟练运用正则表达式解决实际问题(比如匹配电话号码、邮箱、域名等)。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;　1 Java基础&lt;/p&gt;
&lt;p&gt;　　1.1 Collection和Map&lt;/p&gt;
&lt;p&gt;　　(1)掌握Collection和Map的继承体系。&lt;/p&gt;
&lt;p&gt;　　(2)掌握ArrayList、LinkedList、Vector、Stack、PriorityQueue、Ha
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>学习框架的魅力</title>
    <link href="http://lxh5431.github.io/2016/07/24/%E5%AD%A6%E4%B9%A0%E6%A1%86%E6%9E%B6%E7%9A%84%E9%AD%85%E5%8A%9B/"/>
    <id>http://lxh5431.github.io/2016/07/24/学习框架的魅力/</id>
    <published>2016-07-23T16:00:35.000Z</published>
    <updated>2016-07-23T17:23:22.150Z</updated>
    
    <content type="html">&lt;h2 id=&quot;框架的描述&quot;&gt;&lt;a href=&quot;#框架的描述&quot; class=&quot;headerlink&quot; title=&quot;框架的描述&quot;&gt;&lt;/a&gt;框架的描述&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;当你把一个软件设计作为一种规范，这就是框架，框架是把软件开发过程中的总结个归纳，是一种思想的实现，是对现实中的业务进行抽象和构造的最初的设计，软件的设计就是艺术。&lt;/strong&gt; 把生活中遇到的业务都可以以软件来表达出来，是一种建立于现实而高于现实的表达方式，用独特的字符传递着世界的信息和图片，抽象点说，数据就是把整个世界利用语言去勾画的字节，保存着世界各处的交流，所以软件开发就是一种能够表达和运用的构造方式，塑造了人们的开发和想象，为脑海的二次开发和人的情感世界观念提供更加贴切的服务，当你总结和归纳你写过的和描述的软件管理业务，这就是框架，其实就是一种经验，一本书，让大众都可以根据书中的内容设计本来不属于它这个层次的软件，在小说里面就是功法，是开挂的武器，只要你拥有这个就能够在这个社会找到自己存在的意义，所以框架就是业务，就是生活的提供和描述者。&lt;/p&gt;
&lt;h2 id=&quot;框架在软件中的应用&quot;&gt;&lt;a href=&quot;#框架在软件中的应用&quot; class=&quot;headerlink&quot; title=&quot;框架在软件中的应用&quot;&gt;&lt;/a&gt;框架在软件中的应用&lt;/h2&gt;&lt;p&gt;最近开始闲逛一些软件的社区和博客，最喜欢github上不声不响的框架，说得好听点就是解决方案，比如你需要开发一个内容管理系统，你可以去寻找关注最多的opencms，当你需要模仿开发一个在线通信聊天工具，现在还是有很多的软件不是开源的，但是开源的安全性却在经得起考验，我们现在需要的不仅仅是一种解决方案了，还需要在此之上去开发，去拓展，高内聚，低耦合的设计观念在深深的影响着一个软件的周期，也许你更关注当下，设计软件要瞻前顾后，对一个软件的迭代要有一定的把握，要不然你的价值就会下降，所以跨甲的魅力在于简单开发，在于贡献，共享和前景，这样才能够找到更好的解决方案，毕竟现在还是一个版开源的世界，在一点点的侵蚀中我们的世界，人工智能的解决方案和开源框架，在带动着这个领域的繁荣和开发，所以见到很多的框架都做到了简洁，把复杂的逻辑和业务单独出来，便于维护，就像学到的装饰模式，和适配器模式，这样才能够兼容不同的设备，不同的需求，韧性十足，这才是一个好软件的起点，开源节流也会在这个之上去完善和制度的诞生都会得到一个更好的位置。&lt;/p&gt;
&lt;h3 id=&quot;框架来源于生活&quot;&gt;&lt;a href=&quot;#框架来源于生活&quot; class=&quot;headerlink&quot; title=&quot;框架来源于生活&quot;&gt;&lt;/a&gt;框架来源于生活&lt;/h3&gt;&lt;p&gt;框架是对生活的抽象，所以框架来源于生活，来源于生活的每一个细节，在生活都能够找到出发点，所以善于观察，才能找到设计和开发软件的要点，比如一个管理系统，你要学的更多的是工商管理的理念，然后加到权限限定去，这样才能够进行权利分层，有利于管理，实施不一样的政策，留住更多的人才，节约开支，这样一个公司才能够专注于经营，而不是因为混乱的管理而奔溃，这也是一个软件的使命吧，为了提高效率而生的框架，为了描述世界而发展的语言，我因为描述世界而美丽，世界因为软件而更加完美。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;框架的描述&quot;&gt;&lt;a href=&quot;#框架的描述&quot; class=&quot;headerlink&quot; title=&quot;框架的描述&quot;&gt;&lt;/a&gt;框架的描述&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;当你把一个软件设计作为一种规范，这就是框架，框架是把软件开发过程中的总结个归纳，是一种思想的实现，是
    
    </summary>
    
      <category term="程序猿视野" scheme="http://lxh5431.github.io/categories/%E7%A8%8B%E5%BA%8F%E7%8C%BF%E8%A7%86%E9%87%8E/"/>
    
    
      <category term="编程/程序猿视野" scheme="http://lxh5431.github.io/tags/%E7%BC%96%E7%A8%8B-%E7%A8%8B%E5%BA%8F%E7%8C%BF%E8%A7%86%E9%87%8E/"/>
    
  </entry>
  
  <entry>
    <title>单例模式</title>
    <link href="http://lxh5431.github.io/2016/07/23/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://lxh5431.github.io/2016/07/23/单例模式/</id>
    <published>2016-07-23T07:43:08.000Z</published>
    <updated>2016-07-23T16:34:02.217Z</updated>
    
    <content type="html">&lt;h2 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h2&gt;&lt;p&gt;单例模式，也叫单子模式，是一种常用的软件设计模式。在应用这个模式时，单例对象的类必须保证只有一个实例存在。许多时候整个系统只需要拥有一个的全局对象，这样有利于我们协调系统整体的行为。比如在某个服务器程序中，该服务器的配置信息存放在一个文件中，这些配置数据由一个单例对象统一读取，然后服务进程中的其他对象再通过这个单例对象获取这些配置信息。这种方式简化了在复杂环境下的配置管理&lt;/p&gt;
&lt;h2 id=&quot;理解&quot;&gt;&lt;a href=&quot;#理解&quot; class=&quot;headerlink&quot; title=&quot;理解&quot;&gt;&lt;/a&gt;理解&lt;/h2&gt;&lt;p&gt;一个类能返回对象一个引用(永远是同一个)和一个获得该实例的方法（必须是静态方法，通常使用getInstance这个名称）；当我们调用这个方法时，如果类持有的引用不为空就返回这个引用，如果类保持的引用为空就创建该类的实例并将实例的引用赋予该类保持的引用；同时我们还将该类的构造函数定义为私有方法，这样其他处的代码就无法通过调用该类的构造函数来实例化该类的对象，只有通过该类提供的静态方法来得到该类的唯一实例&lt;/p&gt;
&lt;h2 id=&quot;构造方法&quot;&gt;&lt;a href=&quot;#构造方法&quot; class=&quot;headerlink&quot; title=&quot;构造方法&quot;&gt;&lt;/a&gt;构造方法&lt;/h2&gt;&lt;p&gt;.懒汉式&lt;br&gt;.饿汉式&lt;/p&gt;
&lt;h2 id=&quot;时序图&quot;&gt;&lt;a href=&quot;#时序图&quot; class=&quot;headerlink&quot; title=&quot;时序图&quot;&gt;&lt;/a&gt;时序图&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://oa7hsarrh.bkt.clouddn.com/Singleton.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;##作用&lt;br&gt;创建独一无二的对象，并提供全局访问点&lt;br&gt;确保程序一个类只有一个实例&lt;/p&gt;
&lt;p&gt;##优点&lt;br&gt;提供了对唯一实例的受控访问。因为单例类封装了它的唯一实例，所以它可以严格控制客户怎样以及何时访问它，并为设计及开发团队提供了共享的概念。&lt;br&gt;由于在系统内存中只存在一个对象，因此可以节约系统资源，对于一些需要频繁创建和销毁的对象，单例模式无疑可以提高系统的性能。&lt;br&gt;允许可变数目的实例。我们可以基于单例模式进行扩展，使用与单例控制相似的方法来获得指定个数的对象实例。&lt;/p&gt;
&lt;p&gt;##代码实现：&lt;br&gt;懒汉式：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; singletontest;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Singleton&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; Singleton uniqueInstance;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//记录Singleton的唯一实例&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Singleton&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; Singleton &lt;span class=&quot;title&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(uniqueInstance==&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			uniqueInstance=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Singleton();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; uniqueInstance;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在线程中，安全性会得到很大的关注&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Singleton&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;volatile&lt;/span&gt; Singleton uniqueInstance = &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Singleton&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;//thread safe and performance  promote&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt;  Singleton &lt;span class=&quot;title&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(uniqueInstance == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;synchronized&lt;/span&gt;(Singleton.class)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(uniqueInstance == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                 uniqueInstance = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Singleton();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                 &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;             &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; uniqueInstance&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h2&gt;&lt;p&gt;单例模式，也叫单子模式，是一种常用的软件设计模式。在应用这个模式时，单例对象的类必须保证只有一个实例存在。许多时候整个系统只需要拥有一个的全
    
    </summary>
    
      <category term="设计模式" scheme="http://lxh5431.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="编程" scheme="http://lxh5431.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>工厂方法（一）</title>
    <link href="http://lxh5431.github.io/2016/07/21/%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://lxh5431.github.io/2016/07/21/工厂方法（一）/</id>
    <published>2016-07-21T15:06:15.000Z</published>
    <updated>2016-07-23T16:43:32.969Z</updated>
    
    <content type="html">&lt;h2 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h2&gt;&lt;p&gt;抽象工厂模式（英语：Abstract factory pattern）是一种软件开发设计模式。抽象工厂模式提供了一种方式，可以将一组具有同一主题的单独的工厂封装起来。在正常使用中，客户端程序需要创建抽象工厂的具体实现，然后使用抽象工厂作为接口来创建这一主题的具体对象。客户端程序不需要知道（或关心）它从这些内部的工厂方法中获得对象的具体类型，因为客户端程序仅使用这些对象的通用接口。抽象工厂模式将一组对象的实现细节与他们的一般使用分离开来。&lt;/p&gt;
&lt;h2 id=&quot;作用&quot;&gt;&lt;a href=&quot;#作用&quot; class=&quot;headerlink&quot; title=&quot;作用&quot;&gt;&lt;/a&gt;作用&lt;/h2&gt;&lt;p&gt;客户端代码不知道任何具体类型，也就没必要引入任何相关的头文件或类定义。客户端代码仅仅处理抽象类型。工厂确实创建了具体类型的对象，但是客户端代码仅使用这些对象的抽象接口来访问它们。&lt;br&gt;如果要增加一个具体类型，只需要修改客户端代码使用另一个工厂即可，而且这个修改通常只是一个文件中的一行代码。不同的工厂创建不同的具体类型的对象，但是和以前一样返回一个抽象类型的引用（或指针），因此客户端代码的其他部分不需要任何改动。这样比修改客户端代码创建新类型的对象简单多了。如果是后者的话，需要修改代码中每一个创建这种对象的地方（而且需要注意的是，这些地方都知道对象的具体类型，而且需要引入具体类型的头文件或类定义）。如果所有的工厂对象都存储在全局的单例对象中，所有的客户端代码到这个单例中访问需要的工厂，那么，更换工厂就非常简单了，仅仅需要更改这个单例对象即可。&lt;/p&gt;
&lt;p&gt;##局限性&lt;br&gt;在添加新的产品对象时，难以扩展抽象工厂来生产新种类的产品，这是因为在抽象工厂角色中规定了所有可能被创建的产品集合，要支持新种类的产品就意味着要对该接口进行扩展，而这将涉及到对抽象工厂角色及其所有子类的修改，显然会带来较大的不便。&lt;br&gt;开闭原则的倾斜性（增加新的工厂和产品族容易，增加新的产品等级结构麻烦）。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;结构&quot;&gt;&lt;a href=&quot;#结构&quot; class=&quot;headerlink&quot; title=&quot;结构&quot;&gt;&lt;/a&gt;结构&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://oa7hsarrh.bkt.clouddn.com/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;举例&lt;br&gt;假设我们有两种网页产品接口 Button登录按钮 和 Border对话框 ，每一种产品都支持多种系列，比如 internet 10系列和google 系列。这样每个系列的产品分别是 IntButton, GoogButton, IntBorder, GoogBorder 。为了可以在运行时刻创建一个系列的产品族，我们可以为每个系列的产品族创建一个工厂 IntFactory 和 GoogFactory 。每个工厂都有两个方法 CreateButton 和 CreateBorder 并返回对应的产品，可以将这两个方法抽象成一个接口 AbstractFactory 。这样在运行时刻我们可以选择创建需要的产品系列。&lt;/p&gt;
&lt;h2 id=&quot;代码实现&quot;&gt;&lt;a href=&quot;#代码实现&quot; class=&quot;headerlink&quot; title=&quot;代码实现&quot;&gt;&lt;/a&gt;代码实现&lt;/h2&gt;&lt;p&gt;抽象材料接口&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; lxh;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;PizzaIngredientFactory&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Dough &lt;span class=&quot;title&quot;&gt;createDough&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Sauce &lt;span class=&quot;title&quot;&gt;createSauce&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Cheese &lt;span class=&quot;title&quot;&gt;createCheese&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Veggies[] createVeggies();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Pepperoni &lt;span class=&quot;title&quot;&gt;createPepperoni&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Clams &lt;span class=&quot;title&quot;&gt;createClam&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;抽象接口实现&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; lxh;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;NYPizzaIngredientFactory&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;PizzaIngredientFactory&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Dough &lt;span class=&quot;title&quot;&gt;createDough&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ThinCrustDough();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Sauce &lt;span class=&quot;title&quot;&gt;createSauce&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; MarinaraSauce();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Cheese &lt;span class=&quot;title&quot;&gt;createCheese&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ReggianoCheese();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Veggies[] createVeggies() &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		Veggies veggies[] = &amp;#123; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Garlic(), &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Onion(), &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Mushroom(), &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; RedPepper() &amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; veggies;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Pepperoni &lt;span class=&quot;title&quot;&gt;createPepperoni&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; SlicedPepperoni();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Clams &lt;span class=&quot;title&quot;&gt;createClam&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; FreshClams();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;几个材料接口&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; factorytest;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Clams&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; factorytest;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Dough&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; factorytest;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Eggplant&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Veggies&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;Eggplant&quot;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; factorytest;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Garlic&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Veggies&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;Garlic&quot;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;商店类和接口&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; factorytest;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;NYPizzaStore&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;PizzaStore&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; Pizza &lt;span class=&quot;title&quot;&gt;createPizza&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String item)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		Pizza pizza = &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		PizzaIngredientFactory ingredientFactory =&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; NYPizzaIngredientFactory();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (item.equals(&lt;span class=&quot;string&quot;&gt;&quot;cheese&quot;&lt;/span&gt;)) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			pizza = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; CheesePizza(ingredientFactory);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			pizza.setName(&lt;span class=&quot;string&quot;&gt;&quot;New York Style Cheese Pizza&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (item.equals(&lt;span class=&quot;string&quot;&gt;&quot;veggie&quot;&lt;/span&gt;)) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			pizza = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; VeggiePizza(ingredientFactory);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			pizza.setName(&lt;span class=&quot;string&quot;&gt;&quot;New York Style Veggie Pizza&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (item.equals(&lt;span class=&quot;string&quot;&gt;&quot;clam&quot;&lt;/span&gt;)) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			pizza = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ClamPizza(ingredientFactory);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			pizza.setName(&lt;span class=&quot;string&quot;&gt;&quot;New York Style Clam Pizza&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (item.equals(&lt;span class=&quot;string&quot;&gt;&quot;pepperoni&quot;&lt;/span&gt;)) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			pizza = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; PepperoniPizza(ingredientFactory);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			pizza.setName(&lt;span class=&quot;string&quot;&gt;&quot;New York Style Pepperoni Pizza&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; pizza;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; factorytest;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;CheesePizza&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Pizza&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	PizzaIngredientFactory ingredientFactory;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;CheesePizza&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(PizzaIngredientFactory ingredientFactory)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.ingredientFactory = ingredientFactory;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;prepare&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;Preparing &quot;&lt;/span&gt; + name);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		dough = ingredientFactory.createDough();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		sauce = ingredientFactory.createSauce();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		cheese = ingredientFactory.createCheese();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; factorytest;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;PizzaTestDrive&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		PizzaStore nyStore = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; NYPizzaStore();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		PizzaStore chicagoStore = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ChicagoPizzaStore();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		Pizza pizza = nyStore.orderPizza(&lt;span class=&quot;string&quot;&gt;&quot;cheese&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;Ethan ordered a &quot;&lt;/span&gt; + pizza + &lt;span class=&quot;string&quot;&gt;&quot;\n&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		pizza = chicagoStore.orderPizza(&lt;span class=&quot;string&quot;&gt;&quot;cheese&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;Joel ordered a &quot;&lt;/span&gt; + pizza + &lt;span class=&quot;string&quot;&gt;&quot;\n&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		pizza = nyStore.orderPizza(&lt;span class=&quot;string&quot;&gt;&quot;clam&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;Ethan ordered a &quot;&lt;/span&gt; + pizza + &lt;span class=&quot;string&quot;&gt;&quot;\n&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		pizza = chicagoStore.orderPizza(&lt;span class=&quot;string&quot;&gt;&quot;clam&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;Joel ordered a &quot;&lt;/span&gt; + pizza + &lt;span class=&quot;string&quot;&gt;&quot;\n&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		pizza = nyStore.orderPizza(&lt;span class=&quot;string&quot;&gt;&quot;pepperoni&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;Ethan ordered a &quot;&lt;/span&gt; + pizza + &lt;span class=&quot;string&quot;&gt;&quot;\n&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		pizza = chicagoStore.orderPizza(&lt;span class=&quot;string&quot;&gt;&quot;pepperoni&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;Joel ordered a &quot;&lt;/span&gt; + pizza + &lt;span class=&quot;string&quot;&gt;&quot;\n&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		pizza = nyStore.orderPizza(&lt;span class=&quot;string&quot;&gt;&quot;veggie&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;Ethan ordered a &quot;&lt;/span&gt; + pizza + &lt;span class=&quot;string&quot;&gt;&quot;\n&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		pizza = chicagoStore.orderPizza(&lt;span class=&quot;string&quot;&gt;&quot;veggie&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;Joel ordered a &quot;&lt;/span&gt; + pizza + &lt;span class=&quot;string&quot;&gt;&quot;\n&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;测试结果：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;44&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;45&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;46&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;47&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;48&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;49&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;50&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;51&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;52&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;53&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;54&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;55&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;56&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;57&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;58&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;59&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;60&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;61&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;62&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;63&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;64&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;65&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;66&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;67&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;68&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;69&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;70&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;71&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;72&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;73&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;74&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;75&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;76&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;77&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;78&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;--- Making a New York Style Cheese Pizza ---&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Preparing New York Style Cheese Pizza&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Bake &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;25&lt;/span&gt; minutes at &lt;span class=&quot;number&quot;&gt;350&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Cutting the pizza into diagonal slices&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Place pizza in official PizzaStore box&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Ethan ordered a ---- New York Style Cheese Pizza ----&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Thin Crust Dough&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Marinara Sauce&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;--- Making a Chicago Style Cheese Pizza ---&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Preparing Chicago Style Cheese Pizza&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Bake &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;25&lt;/span&gt; minutes at &lt;span class=&quot;number&quot;&gt;350&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Cutting the pizza into diagonal slices&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Place pizza in official PizzaStore box&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Joel ordered a ---- Chicago Style Cheese Pizza ----&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ThickCrust style extra thick crust dough&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Tomato sauce with plum tomatoes&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;--- Making a New York Style Clam Pizza ---&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Preparing New York Style Clam Pizza&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Bake &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;25&lt;/span&gt; minutes at &lt;span class=&quot;number&quot;&gt;350&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Cutting the pizza into diagonal slices&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Place pizza in official PizzaStore box&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Ethan ordered a ---- New York Style Clam Pizza ----&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Thin Crust Dough&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Marinara Sauce&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;--- Making a Chicago Style Clam Pizza ---&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Preparing Chicago Style Clam Pizza&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Bake &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;25&lt;/span&gt; minutes at &lt;span class=&quot;number&quot;&gt;350&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Cutting the pizza into diagonal slices&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Place pizza in official PizzaStore box&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Joel ordered a ---- Chicago Style Clam Pizza ----&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ThickCrust style extra thick crust dough&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Tomato sauce with plum tomatoes&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;--- Making a New York Style Pepperoni Pizza ---&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Preparing New York Style Pepperoni Pizza&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Bake &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;25&lt;/span&gt; minutes at &lt;span class=&quot;number&quot;&gt;350&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Cutting the pizza into diagonal slices&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Place pizza in official PizzaStore box&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Ethan ordered a ---- New York Style Pepperoni Pizza ----&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Thin Crust Dough&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Marinara Sauce&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;--- Making a Chicago Style Pepperoni Pizza ---&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Preparing Chicago Style Pepperoni Pizza&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Bake &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;25&lt;/span&gt; minutes at &lt;span class=&quot;number&quot;&gt;350&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Cutting the pizza into diagonal slices&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Place pizza in official PizzaStore box&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Joel ordered a ---- Chicago Style Pepperoni Pizza ----&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ThickCrust style extra thick crust dough&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Tomato sauce with plum tomatoes&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;--- Making a New York Style Veggie Pizza ---&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Preparing New York Style Veggie Pizza&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Bake &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;25&lt;/span&gt; minutes at &lt;span class=&quot;number&quot;&gt;350&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Cutting the pizza into diagonal slices&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Place pizza in official PizzaStore box&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Ethan ordered a ---- New York Style Veggie Pizza ----&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Thin Crust Dough&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Marinara Sauce&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;--- Making a Chicago Style Veggie Pizza ---&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Preparing Chicago Style Veggie Pizza&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Bake &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;25&lt;/span&gt; minutes at &lt;span class=&quot;number&quot;&gt;350&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Cutting the pizza into diagonal slices&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Place pizza in official PizzaStore box&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Joel ordered a ---- Chicago Style Veggie Pizza ----&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ThickCrust style extra thick crust dough&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Tomato sauce with plum tomatoes&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;本代码来自《head　ｆｉｒｓｔ设计模式》&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;通过本个设计模式，对抽象工厂方法有了进一步的了解，在执行时再去工厂取原材料，然后制作产品，节约了前期的一些投入，能够更好的运用内存，但是却是降低了效率，，不过耦合度降低，减小了维护和扩展的难度，当要重新添加额外的要求是，甚至还要重构接口，不过总体来说还是可取的，毕竟依赖了抽象，符合了多用组合少用继承和针对接口编程的原则，这倒是可取之处。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h2&gt;&lt;p&gt;抽象工厂模式（英语：Abstract factory pattern）是一种软件开发设计模式。抽象工厂模式提供了一种方式，可以将一组具有同一主题的单独的工厂封装起来。在正常使用中，客户端程序需要创建抽象工厂的具体实现，然后使用抽象工厂作为接口来创建这一主题的具体对象。客户端程序不需要知道（或关心）它从这些内部的工厂方法中获得对象的具体类型，因为客户端程序仅使用这些对象的通用接口。抽象工厂模式将一组对象的实现细节与他们的一般使用分离开来。&lt;/p&gt;
&lt;h2 id=&quot;作用&quot;&gt;&lt;a href=&quot;#作用&quot; class=&quot;headerlink&quot; title=&quot;作用&quot;&gt;&lt;/a&gt;作用&lt;/h2&gt;&lt;p&gt;客户端代码不知道任何具体类型，也就没必要引入任何相关的头文件或类定义。客户端代码仅仅处理抽象类型。工厂确实创建了具体类型的对象，但是客户端代码仅使用这些对象的抽象接口来访问它们。&lt;br&gt;如果要增加一个具体类型，只需要修改客户端代码使用另一个工厂即可，而且这个修改通常只是一个文件中的一行代码。不同的工厂创建不同的具体类型的对象，但是和以前一样返回一个抽象类型的引用（或指针），因此客户端代码的其他部分不需要任何改动。这样比修改客户端代码创建新类型的对象简单多了。如果是后者的话，需要修改代码中每一个创建这种对象的地方（而且需要注意的是，这些地方都知道对象的具体类型，而且需要引入具体类型的头文件或类定义）。如果所有的工厂对象都存储在全局的单例对象中，所有的客户端代码到这个单例中访问需要的工厂，那么，更换工厂就非常简单了，仅仅需要更改这个单例对象即可。&lt;/p&gt;
&lt;p&gt;##局限性&lt;br&gt;在添加新的产品对象时，难以扩展抽象工厂来生产新种类的产品，这是因为在抽象工厂角色中规定了所有可能被创建的产品集合，要支持新种类的产品就意味着要对该接口进行扩展，而这将涉及到对抽象工厂角色及其所有子类的修改，显然会带来较大的不便。&lt;br&gt;开闭原则的倾斜性（增加新的工厂和产品族容易，增加新的产品等级结构麻烦）。&lt;br&gt;
    
    </summary>
    
      <category term="设计模式" scheme="http://lxh5431.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="编程" scheme="http://lxh5431.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>装饰者模式</title>
    <link href="http://lxh5431.github.io/2016/07/20/%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>http://lxh5431.github.io/2016/07/20/装饰者模式/</id>
    <published>2016-07-20T07:43:08.000Z</published>
    <updated>2016-07-23T16:43:32.977Z</updated>
    
    <content type="html">&lt;h2 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h2&gt;&lt;p&gt;修饰模式，是面向对象编程领域中，一种动态地往一个类中添加新的行为的设计模式。就功能而言，修饰模式相比生成子类更为灵活，这样可以给某个对象而不是整个类添加一些功能&lt;/p&gt;
&lt;h2 id=&quot;修饰者模式的作用&quot;&gt;&lt;a href=&quot;#修饰者模式的作用&quot; class=&quot;headerlink&quot; title=&quot;修饰者模式的作用&quot;&gt;&lt;/a&gt;修饰者模式的作用&lt;/h2&gt;&lt;p&gt;通过使用修饰模式，可以在运行时扩充一个类的功能。原理是：增加一个修饰类包裹原来的类，包裹的方式一般是通过在将原来的对象作为修饰类的构造函数的参数。装饰类实现新的功能，但是，在不需要用到新功能的地方，它可以直接调用原来的类中的方法。修饰类必须和原来的类有相同的接口。&lt;/p&gt;
&lt;h2 id=&quot;时序图&quot;&gt;&lt;a href=&quot;#时序图&quot; class=&quot;headerlink&quot; title=&quot;时序图&quot;&gt;&lt;/a&gt;时序图&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://oa7hsarrh.bkt.clouddn.com/%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;ConcreteComponent：具体的组件对象，实现了组件接口。该对象通常就是被装饰器装饰的原始对象，可以给这个对象添加职责；&lt;/p&gt;
&lt;p&gt;   Decorator：所有装饰器的父类，需要定义一个与组件接口一致的接口(主要是为了实现装饰器功能的复用，即具体的装饰器A可以装饰另外一个具体的装饰器B，因为装饰器类也是一个Component)，并持有一个Component对象，该对象其实就是被装饰的对象。如果不继承组件接口类，则只能为某个组件添加单一的功能，即装饰器对象不能在装饰其他的装饰器对象。&lt;/p&gt;
&lt;p&gt;   ConcreteDecorator：具体的装饰器类，实现具体要向被装饰对象添加的功能。用来装饰具体的组件对象或者另外一个具体的装饰器对象。&lt;/p&gt;
&lt;h2 id=&quot;代码实现&quot;&gt;&lt;a href=&quot;#代码实现&quot; class=&quot;headerlink&quot; title=&quot;代码实现&quot;&gt;&lt;/a&gt;代码实现&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://oa7hsarrh.bkt.clouddn.com/%E8%A3%85%E9%A5%B0.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;例子描述&lt;br&gt;首先调用原函数的方法，计算奶茶的售价，然后继承原来的奶茶，然后加入其他的原料，得到红豆奶茶，使用组合的方式把原来的参数传递给装饰对象，然后重写一下cost*()方法去计算后来的奶茶的价格，打印出来&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;代码实现-1&quot;&gt;&lt;a href=&quot;#代码实现-1&quot; class=&quot;headerlink&quot; title=&quot;代码实现&quot;&gt;&lt;/a&gt;代码实现&lt;/h3&gt;&lt;p&gt;抽象类&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; decoratortest;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; *&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@author&lt;/span&gt; lxh&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@version&lt;/span&gt; 1.0&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; *&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MilkyTea&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	String description=&lt;span class=&quot;string&quot;&gt;&quot;Unknow Tea&quot;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;getDescription&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; description;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;cost&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;44&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;45&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;46&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;47&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;48&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;49&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;50&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;/*---&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;实现抽象类&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;package decoratortest;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;public &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BeanMilkeTea&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MilkyTea&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;public BeanMilkeTea()&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	description=&lt;span class=&quot;string&quot;&gt;&quot;Tea&quot;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	@Override&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	public double cost() &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;regexp&quot;&gt;//&lt;/span&gt; TODO Auto-generated method stub&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;装饰对象&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;package decoratortest;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;public abstract &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;CondimentDecorator&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MilkyTea&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	public abstract String getDescription();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;装饰修饰者&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;package decoratortest;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;public &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;RedBeanMilkTea&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;CondimentDecorator&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	MilkyTea milkyTea;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	@Override&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	public String getDescription() &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;regexp&quot;&gt;//&lt;/span&gt; TODO Auto-generated method stub&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; milkyTea.description+&lt;span class=&quot;string&quot;&gt;&quot;,redbean&quot;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	@Override&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	public double cost() &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;regexp&quot;&gt;//&lt;/span&gt; TODO Auto-generated method stub&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;14&lt;/span&gt;+milkyTea.cost();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	public RedBeanMilkTea(MilkyTea milkyTea) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		this.milkyTea = milkyTea;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;测试&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; decoratortest;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; *&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@author&lt;/span&gt; lxh&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@deprecated&lt;/span&gt; 装饰模式&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; *&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;DecoratorTest&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		MilkyTea milkTea = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; BeanMilkeTea();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		System.out.println(milkTea.getDescription() + &lt;span class=&quot;string&quot;&gt;&quot; &quot;&lt;/span&gt; + &lt;span class=&quot;string&quot;&gt;&quot;$&quot;&lt;/span&gt; + milkTea.cost());&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		MilkyTea milkTea1 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; RedBeanMilkTea(milkTea);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		System.out.println(milkTea1.getDescription() + &lt;span class=&quot;string&quot;&gt;&quot;$&quot;&lt;/span&gt; + milkTea1.cost());&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*---&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;结果&lt;br&gt;Tea $0.3&lt;br&gt;Tea,redbean$0.44&lt;/p&gt;
&lt;h2 id=&quot;装饰者的应用（来自书上）&quot;&gt;&lt;a href=&quot;#装饰者的应用（来自书上）&quot; class=&quot;headerlink&quot; title=&quot;装饰者的应用（来自书上）&quot;&gt;&lt;/a&gt;装饰者的应用（来自书上）&lt;/h2&gt;&lt;p&gt;Java中的IO是明显的装饰器模式的运用。FilterInputStream，FilterOutputStream，FilterRead，FilterWriter分别为具体装饰器的父类，相当于Decorator类，它们分别实现了InputStream，OutputStream，Reader，Writer类(这些类相当于Component，是其他组件类的父类，也是Decorator类的父类)。继承自InputStream，OutputStream，Reader，Writer这四个类的其他类是具体的组件类，每个都有相应的功能，相当于ConcreteComponent类。而继承自FilterInputStream，FilterOutputStream，FilterRead，FilterWriter这四个类的其他类就是具体的装饰器对象类，即ConcreteDecorator类。通过这些装饰器类，可以给我们提供更加具体的有用的功能。如FileInputStream是InputStream的一个子类，从文件中读取数据流，BufferedInputStream是继承自FilterInputStream的具体的装饰器类，该类提供一个内存的缓冲区类保存输入流中的数据。我们使用如下的代码来使用BufferedInputStream装饰FileInputStream，就可以提供一个内存缓冲区来保存从文件中读取的输入流。&lt;/p&gt;
&lt;h2 id=&quot;代码实现-2&quot;&gt;&lt;a href=&quot;#代码实现-2&quot; class=&quot;headerlink&quot; title=&quot;代码实现&quot;&gt;&lt;/a&gt;代码实现&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; decoratortest1;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.io.FilterInputStream;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.io.IOException;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.io.InputStream;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;LowerCaseInputStream&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;FilterInputStream&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;LowerCaseInputStream&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(InputStream in)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;(in);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// TODO Auto-generated constructor stub&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; IOException&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; c=&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.read();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (c==-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;?c:Character.toLowerCase((&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;) c));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;[] b,&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; offset,&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; len)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; IOException&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; result=&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.read(b, offset, len);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i=offset;i&amp;lt;offset+result;i++)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			b[i]=(&lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;) Character.toLowerCase((&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;)b[i]);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; result;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;测试&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; decoratortest1;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.io.BufferedInputStream;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.io.FileInputStream;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.io.FilterInputStream;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.io.IOException;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.io.InputStream;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;InputTest&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; IOException &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; c;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			InputStream in=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; LowerCaseInputStream(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; BufferedInputStream(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; FileInputStream(&lt;span class=&quot;string&quot;&gt;&quot;src/test.txt&quot;&lt;/span&gt;)));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;((c=in.read())&amp;gt;=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;				System.out.println((&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;)c);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			in.close();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&amp;#125;&lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt;(IOException e)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			e.printStackTrace();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;通过本次实现，对各种接口的修饰和扩展有了进一步的了解，为以后书写和架构提供了更好的平台，学习设计模式，就是学习作者的写作风格和写代码的思考，在成长中学到更多的东西&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h2&gt;&lt;p&gt;修饰模式，是面向对象编程领域中，一种动态地往一个类中添加新的行为的设计模式。就功能而言，修饰模式相比生成子类更为灵活，这样可以给某个对象而不是整个类添加一些功能&lt;/p&gt;
&lt;h2 id=&quot;修饰者模式的作用&quot;&gt;&lt;a href=&quot;#修饰者模式的作用&quot; class=&quot;headerlink&quot; title=&quot;修饰者模式的作用&quot;&gt;&lt;/a&gt;修饰者模式的作用&lt;/h2&gt;&lt;p&gt;通过使用修饰模式，可以在运行时扩充一个类的功能。原理是：增加一个修饰类包裹原来的类，包裹的方式一般是通过在将原来的对象作为修饰类的构造函数的参数。装饰类实现新的功能，但是，在不需要用到新功能的地方，它可以直接调用原来的类中的方法。修饰类必须和原来的类有相同的接口。&lt;/p&gt;
&lt;h2 id=&quot;时序图&quot;&gt;&lt;a href=&quot;#时序图&quot; class=&quot;headerlink&quot; title=&quot;时序图&quot;&gt;&lt;/a&gt;时序图&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://oa7hsarrh.bkt.clouddn.com/%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;ConcreteComponent：具体的组件对象，实现了组件接口。该对象通常就是被装饰器装饰的原始对象，可以给这个对象添加职责；&lt;/p&gt;
&lt;p&gt;   Decorator：所有装饰器的父类，需要定义一个与组件接口一致的接口(主要是为了实现装饰器功能的复用，即具体的装饰器A可以装饰另外一个具体的装饰器B，因为装饰器类也是一个Component)，并持有一个Component对象，该对象其实就是被装饰的对象。如果不继承组件接口类，则只能为某个组件添加单一的功能，即装饰器对象不能在装饰其他的装饰器对象。&lt;/p&gt;
&lt;p&gt;   ConcreteDecorator：具体的装饰器类，实现具体要向被装饰对象添加的功能。用来装饰具体的组件对象或者另外一个具体的装饰器对象。&lt;/p&gt;
&lt;h2 id=&quot;代码实现&quot;&gt;&lt;a href=&quot;#代码实现&quot; class=&quot;headerlink&quot; title=&quot;代码实现&quot;&gt;&lt;/a&gt;代码实现&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://oa7hsarrh.bkt.clouddn.com/%E8%A3%85%E9%A5%B0.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;例子描述&lt;br&gt;首先调用原函数的方法，计算奶茶的售价，然后继承原来的奶茶，然后加入其他的原料，得到红豆奶茶，使用组合的方式把原来的参数传递给装饰对象，然后重写一下cost*()方法去计算后来的奶茶的价格，打印出来&lt;br&gt;
    
    </summary>
    
      <category term="设计模式" scheme="http://lxh5431.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="编程" scheme="http://lxh5431.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>观察者模式</title>
    <link href="http://lxh5431.github.io/2016/07/19/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>http://lxh5431.github.io/2016/07/19/观察者模式/</id>
    <published>2016-07-19T15:15:36.000Z</published>
    <updated>2016-07-20T08:23:55.910Z</updated>
    
    <content type="html">&lt;h2 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h2&gt;&lt;p&gt;观察者模式是软件设计模式的一种。在此种模式中，一个目标对象管理所有相依于它的观察者对象，并且在它本身的状态改变时主动发出通知。这通常透过呼叫各观察者所提供的方法来实现。此种模式通常被用来实时事件处理系统。&lt;/p&gt;
&lt;h2 id=&quot;观察者模式的作用&quot;&gt;&lt;a href=&quot;#观察者模式的作用&quot; class=&quot;headerlink&quot; title=&quot;观察者模式的作用&quot;&gt;&lt;/a&gt;观察者模式的作用&lt;/h2&gt;&lt;p&gt;1.当抽象个体有两个互相依赖的层面时。封装这些层面在单独的对象内将可允许程序员单独地去变更与重复使用这些对象，而不会产生两者之间交互的问题。&lt;br&gt;2.当其中一个对象的变更会影响其他对象，却又不知道多少对象必须被同时变更时。&lt;br&gt;3.当对象应该有能力通知其他对象，又不应该知道其他对象的实做细节时。&lt;/p&gt;
&lt;h3 id=&quot;在mvc上的应用&quot;&gt;&lt;a href=&quot;#在mvc上的应用&quot; class=&quot;headerlink&quot; title=&quot;在mvc上的应用&quot;&gt;&lt;/a&gt;在mvc上的应用&lt;/h3&gt;&lt;p&gt;观察者模式通常与 MVC 范式有关系。在 MVC 中，观察者模式被用来降低 model 与 view 的耦合程度。一般而言， model 的改变会触发通知其他身为观察者的 model 。而这些 model 实际上是 view&lt;/p&gt;
&lt;h2 id=&quot;观察者的时序图&quot;&gt;&lt;a href=&quot;#观察者的时序图&quot; class=&quot;headerlink&quot; title=&quot;观察者的时序图&quot;&gt;&lt;/a&gt;观察者的时序图&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://oa7hsarrh.bkt.clouddn.com/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F1.png&quot; alt=&quot;&quot;&gt;&lt;br&gt; 抽象主题（Subject）：它把所有观察者对象的引用保存到一个聚集里，每个主题都可以有任何数量的观察者。抽象主题提供一个接口，可以增加和删除观察者对象。&lt;br&gt; 具体主题（ConcreteSubject）：将有关状态存入具体观察者对象；在具体主题内部状态改变时，给所有登记过的观察者发出通知。&lt;br&gt;抽象观察者（Observer）：为所有的具体观察者定义一个接口，在得到主题通知时更新自己。 具体观察者（ConcreteObserver）：实现抽象观察者角色所要求的更新接口，以便使本身的状态与主题状态协调。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;实现&quot;&gt;&lt;a href=&quot;#实现&quot; class=&quot;headerlink&quot; title=&quot;实现&quot;&gt;&lt;/a&gt;实现&lt;/h2&gt;&lt;p&gt;全局掌握&lt;br&gt;在气象观测站中，它能够追踪目前的天气状况，包括温度、适度、气压。需要实现一个布告板，能够分别显示目前的状态，气象统计和简单的预报。当气象站中获取最新的测量数据时，三种布告板必须实时更新。当然可以直接扩展布告板，不过首先要向主题注册，才能够在主题更新的时候更新布告板的信息，分析图如下：&lt;br&gt;&lt;img src=&quot;http://oa7hsarrh.bkt.clouddn.com/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F&quot; alt=&quot;&quot;&gt;&lt;br&gt; 就像现在非常流行的rss订阅，当你订阅的时候，主题者会把你的注册信息添加，当主题要发布新的信息的时候，你接受到的更新会更新你自己的观察者的信息，呈现给阅读者看&lt;br&gt; 观察者模式解决了主题更新，观察者就要修改源代码的麻烦，降低了耦合度，实现了抽象和实体的分离，为三层架构提供了可能。&lt;/p&gt;
&lt;h3 id=&quot;代码实现&quot;&gt;&lt;a href=&quot;#代码实现&quot; class=&quot;headerlink&quot; title=&quot;代码实现&quot;&gt;&lt;/a&gt;代码实现&lt;/h3&gt;&lt;p&gt;代码接口&lt;br&gt;—Java&lt;br&gt;public interface Subject {&lt;br&gt;    /**&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; * 注册观察者
 * @param observer
 */  
public void registerObserver(Observer observer);  

/**
 * 删除观察者
 * @param observer
 */  
public void removeOberver(Observer observer);  

/**
 * 当主题状态发生改变时，这个方法需要被调用，以通知所有观察者
 */  
public void notifyObserver();  
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;}  &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;观察者接口  
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;p&gt;—java&lt;br&gt;public interface Observer {&lt;br&gt;    public void update(float temp,float humidity,float pressure);  &lt;/p&gt;
&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;}&quot;&gt;&lt;/a&gt;}&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;public interface DisplayElement {&lt;br&gt;    public void display();  &lt;/p&gt;
&lt;h2 id=&quot;-1&quot;&gt;&lt;a href=&quot;#-1&quot; class=&quot;headerlink&quot; title=&quot;}&quot;&gt;&lt;/a&gt;}&lt;/h2&gt;&lt;h2 id=&quot;主题实现&quot;&gt;&lt;a href=&quot;#主题实现&quot; class=&quot;headerlink&quot; title=&quot;主题实现&quot;&gt;&lt;/a&gt;主题实现&lt;/h2&gt;&lt;p&gt;public class WeatherData implements Subject{&lt;br&gt;    private List&lt;observer&gt; observers;&lt;br&gt;    private float tempterature;&lt;br&gt;    private float pressure;&lt;br&gt;    private float humidity;  &lt;/observer&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public WeatherData(){  
    observers = new ArrayList&amp;lt;Observer&amp;gt;();  
}  

@Override  
public void notifyObserver() {  
    for(int i = 0; i &amp;lt; observers.size();i++){  
        Observer observer = observers.get(i);  
        observer.update(tempterature, humidity, pressure);  
    }  
}  

@Override  
public void registerObserver(Observer observer) {  
    observers.add(observer);  
}  

@Override  
public void removeOberver(Observer observer) {  
    int i = observers.indexOf(observer);  
    if(i &amp;gt;= 0){  
        observers.remove(i);  
    }  
}  

/**
 * 气象站得到更新的观测数据时，通知观察者
 */  
public void measurementChanged(){  
    notifyObserver();  
}  

public void setMeasurements(float temperature,float humidity,float pressure){  
    this.tempterature = temperature;  
    this.humidity = humidity;  
    this.pressure = pressure;  
    measurementChanged();  
}  
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;-2&quot;&gt;&lt;a href=&quot;#-2&quot; class=&quot;headerlink&quot; title=&quot;}  &quot;&gt;&lt;/a&gt;}  &lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;public class CurrentConditionsDisplay implements Observer,DisplayElement{&lt;br&gt;    private float temperature;&lt;br&gt;    private float humidity;&lt;br&gt;    private Subject weatherData;  &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public CurrentConditionsDisplay(Subject weatherData){  
    this.weatherData = weatherData;  
    weatherData.registerObserver(this);      //注册观察者  
}  

public void update(float temp, float humidity, float pressure) {  
    this.temperature = temp;  
    this.humidity = humidity;  
    display();  
}  

@Override  
public void display() {  
    System.out.println(&amp;quot;Current conditions:&amp;quot;+temperature+&amp;quot;F degrees and &amp;quot;+humidity+&amp;quot;% humidity&amp;quot;);  
}  
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;-3&quot;&gt;&lt;a href=&quot;#-3&quot; class=&quot;headerlink&quot; title=&quot;}  &quot;&gt;&lt;/a&gt;}  &lt;/h2&gt;&lt;h2 id=&quot;测试类&quot;&gt;&lt;a href=&quot;#测试类&quot; class=&quot;headerlink&quot; title=&quot;测试类&quot;&gt;&lt;/a&gt;测试类&lt;/h2&gt;&lt;p&gt;package weatherDataTest;&lt;/p&gt;
&lt;p&gt;public class WeatherStation {&lt;br&gt;    public static void main(String[] args) {&lt;br&gt;        WeatherData weatherData=new WeatherData();&lt;br&gt;        CurrentConditionDisplay currentDisplay=new CurrentConditionDisplay(weatherData);&lt;br&gt;        weatherData.setMeasurements(80, 65, 30.5f);&lt;br&gt;        weatherData.setMeasurements(83, 55, 29.7f);&lt;br&gt;        weatherData.setMeasurements(78 , 90, 34.2f);&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;}&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;/*&lt;br&gt;总结：&lt;br&gt;观察者模式是设计一个程序的一个很重要的模式，实现了实体和逻辑的分离，在控制中就能够控制view层的活动，可以更加灵活的 去开发软件，让自己有更多的时间去关注于软件的业务功能，提高了开发效率&lt;br&gt;本文的例子来自《head first 设计模式》&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h2&gt;&lt;p&gt;观察者模式是软件设计模式的一种。在此种模式中，一个目标对象管理所有相依于它的观察者对象，并且在它本身的状态改变时主动发出通知。这通常透过呼叫各观察者所提供的方法来实现。此种模式通常被用来实时事件处理系统。&lt;/p&gt;
&lt;h2 id=&quot;观察者模式的作用&quot;&gt;&lt;a href=&quot;#观察者模式的作用&quot; class=&quot;headerlink&quot; title=&quot;观察者模式的作用&quot;&gt;&lt;/a&gt;观察者模式的作用&lt;/h2&gt;&lt;p&gt;1.当抽象个体有两个互相依赖的层面时。封装这些层面在单独的对象内将可允许程序员单独地去变更与重复使用这些对象，而不会产生两者之间交互的问题。&lt;br&gt;2.当其中一个对象的变更会影响其他对象，却又不知道多少对象必须被同时变更时。&lt;br&gt;3.当对象应该有能力通知其他对象，又不应该知道其他对象的实做细节时。&lt;/p&gt;
&lt;h3 id=&quot;在mvc上的应用&quot;&gt;&lt;a href=&quot;#在mvc上的应用&quot; class=&quot;headerlink&quot; title=&quot;在mvc上的应用&quot;&gt;&lt;/a&gt;在mvc上的应用&lt;/h3&gt;&lt;p&gt;观察者模式通常与 MVC 范式有关系。在 MVC 中，观察者模式被用来降低 model 与 view 的耦合程度。一般而言， model 的改变会触发通知其他身为观察者的 model 。而这些 model 实际上是 view&lt;/p&gt;
&lt;h2 id=&quot;观察者的时序图&quot;&gt;&lt;a href=&quot;#观察者的时序图&quot; class=&quot;headerlink&quot; title=&quot;观察者的时序图&quot;&gt;&lt;/a&gt;观察者的时序图&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://oa7hsarrh.bkt.clouddn.com/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F1.png&quot; alt=&quot;&quot;&gt;&lt;br&gt; 抽象主题（Subject）：它把所有观察者对象的引用保存到一个聚集里，每个主题都可以有任何数量的观察者。抽象主题提供一个接口，可以增加和删除观察者对象。&lt;br&gt; 具体主题（ConcreteSubject）：将有关状态存入具体观察者对象；在具体主题内部状态改变时，给所有登记过的观察者发出通知。&lt;br&gt;抽象观察者（Observer）：为所有的具体观察者定义一个接口，在得到主题通知时更新自己。 具体观察者（ConcreteObserver）：实现抽象观察者角色所要求的更新接口，以便使本身的状态与主题状态协调。&lt;br&gt;
    
    </summary>
    
      <category term="设计模式" scheme="http://lxh5431.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="编程" scheme="http://lxh5431.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>策略模式</title>
    <link href="http://lxh5431.github.io/2016/07/18/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
    <id>http://lxh5431.github.io/2016/07/18/策略模式/</id>
    <published>2016-07-18T13:10:26.000Z</published>
    <updated>2016-07-23T16:43:32.996Z</updated>
    
    <content type="html">&lt;p&gt;策略模式定义 &lt;strong&gt;定义了算法簇，分别封装起来，让他们之间可以互相替代，此模式让算法的变化独立于使用算法的客户&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;策略模式的作用&quot;&gt;&lt;a href=&quot;#策略模式的作用&quot; class=&quot;headerlink&quot; title=&quot;策略模式的作用&quot;&gt;&lt;/a&gt;策略模式的作用&lt;/h2&gt;&lt;p&gt;完成一项任务，往往可以有多种不同的方式，每一种方式称为一个策略，我们可以根据环境或者条件的不同选择不同的策略来完成该项任务。&lt;br&gt;在软件开发中也常常遇到类似的情况，实现某一个功能有多个途径，此时可以使用一种设计模式来使得系统可以灵活地选择解决途径，也能够方便地增加新的解决途径。&lt;br&gt;在软件系统中，有许多算法可以实现某一功能，如查找、排序等，一种常用的方法是硬编码(Hard Coding)在一个类中，如需要提供多种查找算法，可以将这些算法写到一个类中，在该类中提供多个方法，每一个方法对应一个具体的查找算法；当然也可以将这些查找算法封装在一个统一的方法中，通过if…else…等条件判断语句来进行选择。这两种实现方法我们都可以称之为硬编码，如果需要增加一种新的查找算法，需要修改封装算法类的源代码；更换查找算法，也需要修改客户端调用代码。在这个算法类中封装了大量查找算法，该类代码将较复杂，维护较为困难。&lt;br&gt;除了提供专门的查找算法类之外，还可以在客户端程序中直接包含算法代码，这种做法更不可取，将导致客户端程序庞大而且难以维护，如果存在大量可供选择的算法时问题将变得更加严重。&lt;br&gt;为了解决这些问题，可以定义一些独立的类来封装不同的算法，每一个类封装一个具体的算法，在这里，每一个封装算法的类我们都可以称之为策略(Strategy)，为了保证这些策略的一致性，一般会用一个抽象的策略类来做算法的定义，而具体每种算法则对应于一个具体策略类。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;模式结构&quot;&gt;&lt;a href=&quot;#模式结构&quot; class=&quot;headerlink&quot; title=&quot;模式结构&quot;&gt;&lt;/a&gt;模式结构&lt;/h2&gt;&lt;p&gt;Context: 环境类&lt;br&gt;Strategy: 抽象策略类&lt;br&gt;ConcreteStrategy: 具体策略类&lt;br&gt;&lt;img src=&quot;http://oa7hsarrh.bkt.clouddn.com/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;时序图&quot;&gt;&lt;a href=&quot;#时序图&quot; class=&quot;headerlink&quot; title=&quot;时序图&quot;&gt;&lt;/a&gt;时序图&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://oa7hsarrh.bkt.clouddn.com/seq_Strategy.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;策略的实现&quot;&gt;&lt;a href=&quot;#策略的实现&quot; class=&quot;headerlink&quot; title=&quot;策略的实现&quot;&gt;&lt;/a&gt;策略的实现&lt;/h2&gt;&lt;p&gt;主函数&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; strategymaintest;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MiniDuckTest&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		Duck duck=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; MallardDuck();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		duck.performFly();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		duck.performQuack();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		Duck model=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; MallardDuck();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		model.performFly();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		model.setFlyBehavior(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; FlyRocketPowered());&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		model.performFly();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;接口和实现类&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;FlyBehavior&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;fly&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; strategymaintest;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;FlyNoWay&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;FlyBehavior&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;fly&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// TODO Auto-generated method stub&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		System.out.println(&lt;span class=&quot;string&quot;&gt;&quot; I am not flying &quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; strategymaintest;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;FlyRocketPowered&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;FlyBehavior&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;fly&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// TODO Auto-generated method stub&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;I am flying with a rocket&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;FlyWithWings&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;FlyBehavior&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;fly&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// TODO Auto-generated method stub&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;I am flying!!!&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;44&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;45&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;46&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;47&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;48&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;49&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;50&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;51&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;52&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;53&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;54&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;55&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;56&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;57&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;58&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;59&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;60&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;61&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;62&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;63&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;64&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;65&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;66&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;67&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;68&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;QoackBehavior&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;quack&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Qoack&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;QoackBehavior&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;quack&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// TODO Auto-generated method stub&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;Qoack&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; strategymaintest;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Duck&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	FlyBehavior flyBehavior;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	QoackBehavior qoackBehavior;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setFlyBehavior&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(FlyBehavior flyBehavior)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.flyBehavior = flyBehavior;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setQoackBehavior&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(QoackBehavior qoackBehavior)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.qoackBehavior = qoackBehavior;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;performFly&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		flyBehavior.fly();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;performQuack&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		qoackBehavior.quack();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;swim&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;All ducks float,even decoys!&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MallardDuck&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Duck&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MallardDuck&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		  qoackBehavior=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Qoack();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		  flyBehavior=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; FlyWithWings();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;  &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;I am a real mallard duck&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; strategymaintest;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MiniDuckTest&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		Duck duck=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; MallardDuck();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		duck.performFly();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		duck.performQuack();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		Duck model=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; MallardDuck();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		model.performFly();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		model.setFlyBehavior(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; FlyRocketPowered());&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		model.performFly();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;策略的作用&quot;&gt;&lt;a href=&quot;#策略的作用&quot; class=&quot;headerlink&quot; title=&quot;策略的作用&quot;&gt;&lt;/a&gt;策略的作用&lt;/h2&gt;&lt;p&gt;策略模式的重心&lt;/p&gt;
&lt;p&gt;　　策略模式的重心不是如何实现算法，而是如何组织、调用这些算法，从而让程序结构更灵活，具有更好的维护性和扩展性。&lt;/p&gt;
&lt;p&gt;　　算法的平等性&lt;/p&gt;
&lt;p&gt;　　策略模式一个很大的特点就是各个策略算法的平等性。对于一系列具体的策略算法，大家的地位是完全一样的，正因为这个平等性，才能实现算法之间可以相互替换。所有的策略算法在实现上也是相互独立的，相互之间是没有依赖的。&lt;/p&gt;
&lt;p&gt;　　所以可以这样描述这一系列策略算法：策略算法是相同行为的不同实现。&lt;/p&gt;
&lt;p&gt;　　运行时策略的唯一性&lt;/p&gt;
&lt;p&gt;　　运行期间，策略模式在每一个时刻只能使用一个具体的策略实现对象，虽然可以动态地在不同的策略实现中切换，但是同时只能使用一个。&lt;/p&gt;
&lt;p&gt;　　公有的行为&lt;/p&gt;
&lt;p&gt;　　经常见到的是，所有的具体策略类都有一些公有的行为。这时候，就应当把这些公有的行为放到共同的抽象策略角色Strategy类里面。当然这时候抽象策略角色必须要用Java抽象类实现，而不能使用接口&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;策略模式定义 &lt;strong&gt;定义了算法簇，分别封装起来，让他们之间可以互相替代，此模式让算法的变化独立于使用算法的客户&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;策略模式的作用&quot;&gt;&lt;a href=&quot;#策略模式的作用&quot; class=&quot;headerlink&quot; title=&quot;策略模式的作用&quot;&gt;&lt;/a&gt;策略模式的作用&lt;/h2&gt;&lt;p&gt;完成一项任务，往往可以有多种不同的方式，每一种方式称为一个策略，我们可以根据环境或者条件的不同选择不同的策略来完成该项任务。&lt;br&gt;在软件开发中也常常遇到类似的情况，实现某一个功能有多个途径，此时可以使用一种设计模式来使得系统可以灵活地选择解决途径，也能够方便地增加新的解决途径。&lt;br&gt;在软件系统中，有许多算法可以实现某一功能，如查找、排序等，一种常用的方法是硬编码(Hard Coding)在一个类中，如需要提供多种查找算法，可以将这些算法写到一个类中，在该类中提供多个方法，每一个方法对应一个具体的查找算法；当然也可以将这些查找算法封装在一个统一的方法中，通过if…else…等条件判断语句来进行选择。这两种实现方法我们都可以称之为硬编码，如果需要增加一种新的查找算法，需要修改封装算法类的源代码；更换查找算法，也需要修改客户端调用代码。在这个算法类中封装了大量查找算法，该类代码将较复杂，维护较为困难。&lt;br&gt;除了提供专门的查找算法类之外，还可以在客户端程序中直接包含算法代码，这种做法更不可取，将导致客户端程序庞大而且难以维护，如果存在大量可供选择的算法时问题将变得更加严重。&lt;br&gt;为了解决这些问题，可以定义一些独立的类来封装不同的算法，每一个类封装一个具体的算法，在这里，每一个封装算法的类我们都可以称之为策略(Strategy)，为了保证这些策略的一致性，一般会用一个抽象的策略类来做算法的定义，而具体每种算法则对应于一个具体策略类。&lt;br&gt;
    
    </summary>
    
      <category term="设计模式" scheme="http://lxh5431.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="编程" scheme="http://lxh5431.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>写给大学，写给这些年的读书生活（一）</title>
    <link href="http://lxh5431.github.io/2016/07/16/%E5%86%99%E7%BB%99%E5%A4%A7%E5%AD%A6%EF%BC%8C%E5%86%99%E7%BB%99%E8%BF%99%E4%BA%9B%E5%B9%B4%E7%9A%84%E8%AF%BB%E4%B9%A6%E7%94%9F%E6%B4%BB%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://lxh5431.github.io/2016/07/16/写给大学，写给这些年的读书生活（一）/</id>
    <published>2016-07-16T06:00:23.000Z</published>
    <updated>2016-07-16T06:11:19.575Z</updated>
    
    <content type="html">&lt;p&gt;&lt;strong&gt;每个人都是对方的幸运者，遇到的就是一刹那的美丽&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;##关于感情&lt;/p&gt;
&lt;p&gt;&lt;em&gt;感情里没有谁对谁错，我在我自己的感情里只是一直在逃避。我喜欢的并不是我不想去追，我只是觉得这个年纪更应该找到适合自己的未来，然后才能够遇到更好的自己&lt;/em&gt;&lt;br&gt;回忆这一路走来，看到过很多灵性的女孩子，体贴而关心入怀，善良而诚恳，坚强而倔强，在我眼里就是不一样的烟火，远离社会的纷纷瑶瑶，在这一片宁静的土地里静止你的形象，你的品性，还有就是你的性格，都在我眼中是无可替代，&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;每个人都是对方的幸运者，遇到的就是一刹那的美丽&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;##关于感情&lt;/p&gt;
&lt;p&gt;&lt;em&gt;感情里没有谁对谁错，我在我自己的感情里只是一直在逃避。我喜欢的并不是我不想去追，我只是觉得这个年纪更应该找到适合自己的未来，然后才能够遇到更好
    
    </summary>
    
      <category term="大学" scheme="http://lxh5431.github.io/categories/%E5%A4%A7%E5%AD%A6/"/>
    
    
      <category term="随笔" scheme="http://lxh5431.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>写给大学，写给这些年的读书生活</title>
    <link href="http://lxh5431.github.io/2016/07/15/%E5%86%99%E7%BB%99%E5%A4%A7%E5%AD%A6%EF%BC%8C%E5%86%99%E7%BB%99%E8%BF%99%E4%BA%9B%E5%B9%B4%E7%9A%84%E8%AF%BB%E4%B9%A6%E7%94%9F%E6%B4%BB/"/>
    <id>http://lxh5431.github.io/2016/07/15/写给大学，写给这些年的读书生活/</id>
    <published>2016-07-15T06:09:40.000Z</published>
    <updated>2016-07-15T06:54:18.226Z</updated>
    
    <content type="html">&lt;p&gt;&lt;strong&gt;这些年读书遇到的人和物，总有人离开，总有人加进来，留到最后的才是我不可割舍的朋友&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;关于那些年&quot;&gt;&lt;a href=&quot;#关于那些年&quot; class=&quot;headerlink&quot; title=&quot;关于那些年&quot;&gt;&lt;/a&gt;关于那些年&lt;/h2&gt;&lt;h3 id=&quot;方向&quot;&gt;&lt;a href=&quot;#方向&quot; class=&quot;headerlink&quot; title=&quot;方向&quot;&gt;&lt;/a&gt;方向&lt;/h3&gt;&lt;p&gt;高三看的《高三》和冲刺的时候看的《那些年一起追过的女孩》都侧面的描述了高三的残酷和执着，那一年我选择了继续读书，而不是那么早的就踏进社会，这就是我人生先择的开始吧，然后陆续的看过一些书，三毛的撒老哈的坚守，穆斯林习俗的探讨，还是边城小镇的一场秋雨，或者随着秋雨先生的足迹探索那迷失的秘密，只要走进图书馆，就能够开拓一个人的视野，坚定自己的信心和对未来的一种追求吧。青春就是为了更好的去做一个正确的自己，磨练自己的性格，沉淀自己的性情，在花开花落的世界还能够找到自己寻找的意义。很多人都说出来读书为了什么，为了看下这多彩的世界，了解不一样风俗的人和事，看下大千世界的轮回，再去沉淀自己，在最后奋斗里为自己的思想去该变自己。乐嘉写的一本书中描述的是证明自己，其实我们一直不就是在证明自己，证明自己的智慧，证明自己的存在，证明自己的眼界，最后证明确实我就是我。我现在该从哪里来，到哪里去，这本来就是一个递归的世界，一件事就是你的一个选择，最后用大半生的时光去证明这个选择。看小说很多的思路最开始就是证明，说直白点就是屌丝逆袭，即使最后的结果并不是想要的，可是我一直在证明着自己。这就是一个对我来说一直不适应的世界的，要不然我为何一直抗拒着管理自己，管理自己的内心，管理自己的行为，世界的规矩在不断的演进，适者生存，在新一轮的选择中要开启心的蓝图。我不知道未来如何，可是我现在我要知道我自己。坚定自己，才能够找到新的方向。&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;读书&quot;&gt;&lt;a href=&quot;#读书&quot; class=&quot;headerlink&quot; title=&quot;读书&quot;&gt;&lt;/a&gt;读书&lt;/h2&gt;&lt;p&gt;&lt;em&gt;读书使人明智，使人开阔视野让人体验不一样的人生和世界&lt;/em&gt;&lt;br&gt;沉迷于小说的世界里也有过几年，开始时的热血朝天，然后想着也能像小说一样构建自己的心灵王国，这就是一个人最初的本性，总是对新事物的追求不止境，然后迷失自己的本心，小说的吸引不在于精湛的笔触，而在于基于现实，而高于现实的一种虚拟构造，在人们心灵构造另外一个适合自己生活的世界或者说是故事，然后再文字的理解和求知中有进一步的悬念，然后一步一步的开启了人生的体验之旅，无论是《盘龙》，还是《斗破苍穹》，都是从侧面的去书写一个不完善的社会，在为一些一蹴而就的人们构造一个臆想的世界，现在的社会开始浮躁，还有就是急于成功，这已经开始脱离了世界的本来的运行规则在所以滋生出一些无法理解的现象。读书的真正意义对我来说就是能够静下心来去思考，去回顾生活的不满并践行自己的努力去修改和追求和改正自己，然后开始以此为目标继续前行，生为了更好的活着，活为了有一个明确的目标去活着，这样不会为了别人而去把自己的生活搭建在别人的生活之下，这样会让自己活在自己的道德界限中，所以有时我们需要的不是勇气，还有毅力和去改变一件事的决心。然而我读文学作品，却能够感受到作者写作时的那份平静，有时候确实那么的悲怆，有时候作者写的确实自己，但这确实经历过沧桑的人写下的不朽之作，书写的不仅仅是情怀，还有对一个人的性格的剖析，对一个人的一生的一个总结，都浓缩在一本薄纸装订的书扉里，着如何能够呢，我却不是想，去回味这一本书的价值，而是所体现出来的精神还有这个时代的一种象征意义却是我们所需要的，这正是我们索要学习的，这样才能够看清现在的世界的轨迹，然后前行，这世界的很多事都需要潜行者的指引和奋斗，也许他们默默无闻，也许在山间野外构建的世界，但这就是一种适者生存的规则，总需要开拓才能够进步，才能够构建更加美好的世界。这就算是世界观吧。书籍是人类进步的阶梯，我想说的是书籍是我开拓视野的窗口。&lt;/p&gt;
&lt;h2 id=&quot;关于感情&quot;&gt;&lt;a href=&quot;#关于感情&quot; class=&quot;headerlink&quot; title=&quot;关于感情&quot;&gt;&lt;/a&gt;关于感情&lt;/h2&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;这些年读书遇到的人和物，总有人离开，总有人加进来，留到最后的才是我不可割舍的朋友&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;关于那些年&quot;&gt;&lt;a href=&quot;#关于那些年&quot; class=&quot;headerlink&quot; title=&quot;关于那些年&quot;&gt;&lt;/a&gt;关于那些年&lt;/h2&gt;&lt;h3 id=&quot;方向&quot;&gt;&lt;a href=&quot;#方向&quot; class=&quot;headerlink&quot; title=&quot;方向&quot;&gt;&lt;/a&gt;方向&lt;/h3&gt;&lt;p&gt;高三看的《高三》和冲刺的时候看的《那些年一起追过的女孩》都侧面的描述了高三的残酷和执着，那一年我选择了继续读书，而不是那么早的就踏进社会，这就是我人生先择的开始吧，然后陆续的看过一些书，三毛的撒老哈的坚守，穆斯林习俗的探讨，还是边城小镇的一场秋雨，或者随着秋雨先生的足迹探索那迷失的秘密，只要走进图书馆，就能够开拓一个人的视野，坚定自己的信心和对未来的一种追求吧。青春就是为了更好的去做一个正确的自己，磨练自己的性格，沉淀自己的性情，在花开花落的世界还能够找到自己寻找的意义。很多人都说出来读书为了什么，为了看下这多彩的世界，了解不一样风俗的人和事，看下大千世界的轮回，再去沉淀自己，在最后奋斗里为自己的思想去该变自己。乐嘉写的一本书中描述的是证明自己，其实我们一直不就是在证明自己，证明自己的智慧，证明自己的存在，证明自己的眼界，最后证明确实我就是我。我现在该从哪里来，到哪里去，这本来就是一个递归的世界，一件事就是你的一个选择，最后用大半生的时光去证明这个选择。看小说很多的思路最开始就是证明，说直白点就是屌丝逆袭，即使最后的结果并不是想要的，可是我一直在证明着自己。这就是一个对我来说一直不适应的世界的，要不然我为何一直抗拒着管理自己，管理自己的内心，管理自己的行为，世界的规矩在不断的演进，适者生存，在新一轮的选择中要开启心的蓝图。我不知道未来如何，可是我现在我要知道我自己。坚定自己，才能够找到新的方向。
    
    </summary>
    
      <category term="大学" scheme="http://lxh5431.github.io/categories/%E5%A4%A7%E5%AD%A6/"/>
    
    
      <category term="随笔" scheme="http://lxh5431.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>暑假计划进行时</title>
    <link href="http://lxh5431.github.io/2016/07/12/%E6%9A%91%E5%81%87%E8%AE%A1%E5%88%92%E8%BF%9B%E8%A1%8C%E6%97%B6/"/>
    <id>http://lxh5431.github.io/2016/07/12/暑假计划进行时/</id>
    <published>2016-07-12T14:15:03.000Z</published>
    <updated>2016-07-15T06:54:18.211Z</updated>
    
    <content type="html">&lt;h2 id=&quot;青春是散不去的光&quot;&gt;&lt;a href=&quot;#青春是散不去的光&quot; class=&quot;headerlink&quot; title=&quot;青春是散不去的光&quot;&gt;&lt;/a&gt;青春是散不去的光&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://oa7hsarrh.bkt.clouddn.com/p31749018.jpg&quot; alt=&quot;...&quot;&gt;&lt;br&gt;在学期结束的时候，我留下来为了更好的前方，所以我放弃了暑假工，放弃了家里的温暖，我知道这就是我最后的冲刺阶段了，我要懂得选择自己的路，今天成绩出来了，我总算把大学所有的科目都已经修完，虽然说还是有那么多的缺陷，但是我可以对自己说我已经开始毕业，毕业了什么都带不走，我想了想，所以先在我智能留下来为了自己能够留下来点什么，比如书籍，智慧还有对自我性格的修养，我知道我知道认真的我才是我，我一遍一遍的去熟悉业务，逻辑，还有各个之间的关系，我虽然我的逻辑不是很好，但是我知道我的想象力却是补足了我的缺陷，我知道前路坎坷，可是我依然希望向前，不是为了别人还有自己的心，安于自己的心，我不知道我有么有那么伟大，但是我觉得我足够坚强，知道自己的路，&lt;em&gt;关于友情，关于爱情，关于事业，我都需要做出我自己的选择&lt;/em&gt; 回望过去走过的路，那样崎岖，但是又是一种际遇，锻炼着我，磨砺着我，我就是我，我要把自己磨练成真正的我，纯真的我，有意思的我，还有就是我是无法替代的。&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;在校期间，不止是为了自己的性格，还有磨练适应的环境，我需要的不只是一个技能，还有就是转变过来我的生活方式，还有就对未来的一个定位，没有人可以为自己的路找借口，我也不行，我知道我欺骗不了我自己，我需要的只是平淡的生活，关于理想，是那么的美满，关于梦想是那么的遥远，我如果一直不向前，怎么知道我的梦想遥远呢，我一直以为开发是那么遥不可及，假如你一直在原地，最后什么都不会属于你，你需要定下心来去体会架构，编码和规范，还需要学会如何去证明这个想法，和实现这个想法，我一直都对自己说我不行，我在哪里缺失了，其实我一直是缺少了一种执行力，我现在就需要这能力，去面对即将到来的面试，也许很残酷，也许很难，但是我已经做好一往无前的准备，我知道我有可能会退缩，但是我要站在别人的失败的路上继续前行，我不知道未来的路怎样，但是我不想因为别人的思想而一直束缚我，我就是我，不一样我，爱吃，爱笑，乐于助人却有一颗安于平凡的心。&lt;/p&gt;
&lt;h2 id=&quot;我最好的年华给予了最后的青春&quot;&gt;&lt;a href=&quot;#我最好的年华给予了最后的青春&quot; class=&quot;headerlink&quot; title=&quot;我最好的年华给予了最后的青春&quot;&gt;&lt;/a&gt;我最好的年华给予了最后的青春&lt;/h2&gt;&lt;p&gt;不知道从什么时候起，我就开始转向自己的喜好，我爱文学，一种从心里就开始酝酿的细胞，对文学的热爱就是为了表达自己，而不是把所有的事情都放在心里，我想把我自己的想法付诸与行动，而不是闷在心里，我想象中的人生就是为了认识这个世界，为了这个世界而去批判，去述说，然后去改进，这就是书写和写作的意义，很多文学为了记录，为了传承，我却不是，为了现在，把这个世界的美好和臆想去描述，然后去探索，开拓属于我自己的文学家园，我不知道别人的人生是怎样的，至少我觉得我有我的想法，我有我自己的主张，就应该让自己的有一个好多表达，旅行，饮食和生活的点滴，都是我关注的一个方面，我知道我做不了那么多，但是我还是要努力去做，做一个评论家，一个思想家，一个创新的领路人，即使开拓的人并不是我，但是我知道这就是我前进的理由，不和别人比，只和自己比，我就是自己的证明者，我需要证明我的理论是正确的，是可行的，这样我才能够继续下去，继续寻求更加好的人生的意义。很多人的抱怨，而我只是在描述了吧，就让这个笔触描绘出我心中的念想，让别人有一个路线。我应该属于的不该属于的领域。也即将引领我自己。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;青春是散不去的光&quot;&gt;&lt;a href=&quot;#青春是散不去的光&quot; class=&quot;headerlink&quot; title=&quot;青春是散不去的光&quot;&gt;&lt;/a&gt;青春是散不去的光&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://oa7hsarrh.bkt.clouddn.com/p31749018.jpg&quot; alt=&quot;...&quot;&gt;&lt;br&gt;在学期结束的时候，我留下来为了更好的前方，所以我放弃了暑假工，放弃了家里的温暖，我知道这就是我最后的冲刺阶段了，我要懂得选择自己的路，今天成绩出来了，我总算把大学所有的科目都已经修完，虽然说还是有那么多的缺陷，但是我可以对自己说我已经开始毕业，毕业了什么都带不走，我想了想，所以先在我智能留下来为了自己能够留下来点什么，比如书籍，智慧还有对自我性格的修养，我知道我知道认真的我才是我，我一遍一遍的去熟悉业务，逻辑，还有各个之间的关系，我虽然我的逻辑不是很好，但是我知道我的想象力却是补足了我的缺陷，我知道前路坎坷，可是我依然希望向前，不是为了别人还有自己的心，安于自己的心，我不知道我有么有那么伟大，但是我觉得我足够坚强，知道自己的路，&lt;em&gt;关于友情，关于爱情，关于事业，我都需要做出我自己的选择&lt;/em&gt; 回望过去走过的路，那样崎岖，但是又是一种际遇，锻炼着我，磨砺着我，我就是我，我要把自己磨练成真正的我，纯真的我，有意思的我，还有就是我是无法替代的。
    
    </summary>
    
      <category term="大学" scheme="http://lxh5431.github.io/categories/%E5%A4%A7%E5%AD%A6/"/>
    
    
      <category term="随笔" scheme="http://lxh5431.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>“留校，只为了更好的自己</title>
    <link href="http://lxh5431.github.io/2016/07/09/%E2%80%9C%E7%95%99%E6%A0%A1%EF%BC%8C%E5%8F%AA%E4%B8%BA%E4%BA%86%E6%9B%B4%E5%A5%BD%E7%9A%84%E8%87%AA%E5%B7%B1/"/>
    <id>http://lxh5431.github.io/2016/07/09/“留校，只为了更好的自己/</id>
    <published>2016-07-09T14:54:08.000Z</published>
    <updated>2016-07-19T15:46:05.543Z</updated>
    
    <content type="html">&lt;h2 id=&quot;所有对我的磨砺都是为了更好的认识自己吗，该变自己，让自己适应这个社会&quot;&gt;&lt;a href=&quot;#所有对我的磨砺都是为了更好的认识自己吗，该变自己，让自己适应这个社会&quot; class=&quot;headerlink&quot; title=&quot;所有对我的磨砺都是为了更好的认识自己吗，该变自己，让自己适应这个社会&quot;&gt;&lt;/a&gt;所有对我的磨砺都是为了更好的认识自己吗，该变自己，让自己适应这个社会&lt;/h2&gt;&lt;p&gt;生活在一个日新月异的社会里，我很庆幸自己还能够有时间去思考我未来需要什么，到底我应该如何去规划我自己的人格，品味还有就是我需要走的路，二十多年来我都在学校里的纯静里学会思考， 学会认识自己，学会面对生活中方方面面，我现在需要的不再是用原来的经验去解决问题，现在是试着用一种新的方式去面对即将到来的挫折，困惑和迷茫，虽然我现在还在学校我已经开始慢慢的接触社会，一个只要能想到就能感受到的社会，我不知道我未来在哪里，我需要走向哪去，但在这一刻，我知道我应该去规划自己未来的蓝图。在这一个月里，我要试着去总结归纳，试着用另一种方式去生活去思考，去磨砺，即使偏题鳞伤，我知道我依然需要向前，这就是我要选择的路。很多人都是在社会的大染缸里挣扎，我需要的只是追求技术的更高的方式，更前卫的思想，和更加简洁的生活方式，这就是我写这篇文章的意义吧。&lt;/p&gt;
&lt;p&gt;##关于技术&lt;br&gt;&lt;strong&gt;规划自己的人生，还不如规划自己的技能，这样会更容易去融入这社会&lt;/strong&gt; 当我站在这个大三的最后一个暑假，我就知道我的大学还剩下的只有一个证书的领取，这只是标榜着我上过这所大学，承认我有这方面的智商和水平，但这并不一定能够代表我的技术水平，大学如此的宽松，自由和平等，沉迷的人总需要找一个理由和过去告别，游戏还是其他呢，我觉得都不是，我觉得书籍是最容易去治愈心灵的偏离的，但是现在的社会越来越浮躁，容不下静下心来好好想想未来，想想自己，想象构造的蓝图，很多人都想着马上就可以成功，性格，财富都不是一蹴而就的，那样的人生总是会被捆绑在无人岛的荒野，最终自我灭亡，我不知道我未来需要什么我，我需要一颗平静的心，甘于平凡却超于平凡的心，我想到最好的就是我们需要磨砺，需要成长，需要的不仅是想到的还有从书中学到的东西。当你回顾往事的时候，你不会全是人与人之间的交换和勾心斗角。还有你看书静下来的思考，还有图书馆里那宁静到可怕的环境。这都是让人怀念的，我脑海里始终抹不去的我想就算对一个个书评，还有一个地位来的定位，对自我提高所做的努力。人生是为了什么，为了更好的活着，为何爱恩斯但最后信奉上帝，就像是皈依信仰呢，我觉得人生的意义还是没有继续影响着他，也许他只是想换种方式去继续改变世界，最后去成为世界的信徒，沉迷自己。&lt;/p&gt;
&lt;h2 id=&quot;最后的规划&quot;&gt;&lt;a href=&quot;#最后的规划&quot; class=&quot;headerlink&quot; title=&quot;最后的规划&quot;&gt;&lt;/a&gt;最后的规划&lt;/h2&gt;&lt;p&gt;出去找工作最重要的使技术，还有信心，最后才是品性，我现在需要调整自己的性格，生活习惯，开始读一些生活的书，还有学会沟通和包容，学会面对挫折勇于前进的心，最后的就是技能的磨练，我需要从三各方面入手，技术上很多都需要书写自己的思想理解和实现这个项目所需要的条件，所以抽出一半的时间去写写项目，用剩下的时间去发展自己的博客，还有技术，最后就是开始努力，学会沟通，到达自己熟悉的领域，让别人看到你的闪光点，勇往直前，只要跨过这座山，我想就能到底彼岸。&lt;br&gt;———–榕树下&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;所有对我的磨砺都是为了更好的认识自己吗，该变自己，让自己适应这个社会&quot;&gt;&lt;a href=&quot;#所有对我的磨砺都是为了更好的认识自己吗，该变自己，让自己适应这个社会&quot; class=&quot;headerlink&quot; title=&quot;所有对我的磨砺都是为了更好的认识自己吗，该变自己
    
    </summary>
    
      <category term="大学" scheme="http://lxh5431.github.io/categories/%E5%A4%A7%E5%AD%A6/"/>
    
    
      <category term="随笔" scheme="http://lxh5431.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>学习方法</title>
    <link href="http://lxh5431.github.io/2016/07/08/%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/"/>
    <id>http://lxh5431.github.io/2016/07/08/学习方法/</id>
    <published>2016-07-08T06:28:06.737Z</published>
    <updated>2016-06-25T08:17:39.802Z</updated>
    
    <content type="html">&lt;p&gt;通过学习和总结，让自己的学习和知识有进一步的巩固，我知道我需要更多的时间去学习基础知识，然后才能认真的对待日新月异的新技术，开启吧，我的技术学习之路&lt;br&gt;开启学习交流的新的模式&lt;br&gt;我滴第一个博客&lt;/p&gt;
&lt;p&gt;$  “J2SEjava基础部分”&lt;br&gt;.java开发前奏:计算机基本原理，Java语言发展简史以及开发环境的搭建，体验Java程序的开发，环境变量的设置，程序的执行过程，&lt;br&gt;相关反编译工具介绍，java开发工具Eclipse的安装和使用，javadoc的说明。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;进阶&lt;br&gt;1&lt;br&gt;$  “java基础部分”&lt;br&gt;Java语法格式，常量和变量，变量的作用域，方法和方法的重载，运算符，程序流程控制，数组和操作数组的类，&lt;br&gt;对数组循环遍历以及针对数组的常用查找、排序算法原理，最后使用Java程序进行功能实现。&lt;br&gt;一切面向对象&lt;br&gt;1&lt;br&gt;$ 面向对象&lt;br&gt;理解对象的本质，以及面向对象，类与对象之间的关系，如何用面向对象的思想分析和解决显示生活中的问题，&lt;br&gt;并java程序的手段编写出来。&lt;br&gt;如何设计类，设计类的基本原则，类的实例化过程，类元素：构造函数、this关键字、方法和方法的参数传递过程、&lt;br&gt;static关键字、内部类，Java的垃圾对象回收机制。&lt;br&gt;对象的三大特性：封装、继承和多态。子类对象的实例化过程、方法的重写和重载、final关键字、抽象类、接口、&lt;br&gt;继承的优点和缺点。 对象的多态性：子类和父类之间的转换、父类纸箱子类的引用、抽象类和接口在多态中的应用、多态优点。常用设计模式如单利、模版等模式。&lt;br&gt;什么是异常 异常的捕捉和抛出 异常捕捉的原则 finally的使用，package的应用 import关键字。&lt;br&gt;高级应用&lt;br&gt;1&lt;br&gt;$多线程应用&lt;br&gt;多线程的概念，如何在程序中创建多线程(Thread、Runnable)，线程安全问题，线程的同步，线程之间的通讯、&lt;br&gt;死锁问题的剖析&lt;br&gt;1&lt;br&gt;$高级特性&lt;br&gt;.什么是IO，File及相关类，字节流InputStream和OutputStream，字符流Reader和Writer，以及相应缓冲流和管道流，字节和字符的转化流，包装流，以及常用包装类使用，分析java的IO性能。&lt;br&gt;.Java网络编程，网络通信底层协议TCP/UDP/IP，Socket编程。网络通信常用应用层协议简介：HTTP、FTP等，以及WEB服务器的工作原理。&lt;br&gt;.递归程序，Java的高级特性：反射、代理和泛型、枚举、Java正则表达式API详解及其应用。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;通过学习和总结，让自己的学习和知识有进一步的巩固，我知道我需要更多的时间去学习基础知识，然后才能认真的对待日新月异的新技术，开启吧，我的技术学习之路&lt;br&gt;开启学习交流的新的模式&lt;br&gt;我滴第一个博客&lt;/p&gt;
&lt;p&gt;$  “J2SEjava基础部分”&lt;br&gt;.java开发前奏:计算机基本原理，Java语言发展简史以及开发环境的搭建，体验Java程序的开发，环境变量的设置，程序的执行过程，&lt;br&gt;相关反编译工具介绍，java开发工具Eclipse的安装和使用，javadoc的说明。&lt;br&gt;
    
    </summary>
    
    
      <category term="编程" scheme="http://lxh5431.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>java反射的理解</title>
    <link href="http://lxh5431.github.io/2016/07/08/java%E5%8F%8D%E5%B0%84%E7%9A%84%E7%90%86%E8%A7%A3/"/>
    <id>http://lxh5431.github.io/2016/07/08/java反射的理解/</id>
    <published>2016-07-08T06:28:06.705Z</published>
    <updated>2016-06-25T08:17:39.760Z</updated>
    
    <content type="html">&lt;p&gt;概念：&lt;br&gt;java反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法，&lt;br&gt;对于任意一个对象，都能够条用她的任意一个方法和属性，&lt;br&gt;这种动态的获取信息以及动态调用对象的方法的功能成为java的发射机制&lt;/p&gt;
&lt;h3 id=&quot;Java反射的功能&quot;&gt;&lt;a href=&quot;#Java反射的功能&quot; class=&quot;headerlink&quot; title=&quot;Java反射的功能&quot;&gt;&lt;/a&gt;Java反射的功能&lt;/h3&gt;&lt;p&gt;　　1)可以判断运行时对象所属的类&lt;br&gt;　　2)可以判断运行时对象所具有的成员变量和方法&lt;br&gt;　　3)通过反射甚至可以调用到private的方法&lt;br&gt;　　4)生成动态代理&lt;/p&gt;
&lt;h3 id=&quot;实现Java反射的类&quot;&gt;&lt;a href=&quot;#实现Java反射的类&quot; class=&quot;headerlink&quot; title=&quot;实现Java反射的类&quot;&gt;&lt;/a&gt;实现Java反射的类&lt;/h3&gt;&lt;p&gt;　　1)Class：它表示正在运行的Java应用程序中的类和接口&lt;br&gt;　　2)Field：提供有关类或接口的属性信息，以及对它的动态访问权限&lt;br&gt;　　3)Constructor：提供关于类的单个构造方法的信息以及对它的访问权限&lt;br&gt;　　4)Method：提供关于类或接口中某个方法信息&lt;br&gt;　　注意：Class类是Java反射中最重要的一个功能类，所有获取对象的信息(包括：方法/属性/构造方法/访问权限)&lt;br&gt;都需要它来实现&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;类classloader加载方式&quot;&gt;&lt;a href=&quot;#类classloader加载方式&quot; class=&quot;headerlink&quot; title=&quot;类classloader加载方式&quot;&gt;&lt;/a&gt;类classloader加载方式&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;1)Bootstrap ClassLoader 此加载器采用c++编写，一般开发中很少见。&lt;/li&gt;
&lt;li&gt;2）Extension ClassLoader 用来进行扩展类的加载，一般对应的是jre\lib\ext目录中的类&lt;/li&gt;
&lt;li&gt;3）AppClassLoader 加载classpath指定的类，是最常用的加载器，同时也是java中默认的加载器。&lt;br&gt;例子：&lt;br&gt;package lxh.reflect;&lt;br&gt;import java.lang.reflect.&lt;em&gt;;&lt;br&gt;public class ReflectDemo {&lt;br&gt;/*&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;为了看清楚Java反射部分代码，所有异常我都最后抛出来给虚拟机处理&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;public static void main(String[] args) throws ClassNotFoundException, IllegalAccessException, InstantiationException, InvocationTargetException, NoSuchFieldException, NoSuchMethodException {&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;System.out.println(&amp;quot;demo1：通过Java反射机制得到类的包名和类名&amp;quot;);
demo1();

System.out.println(&amp;quot;--------------------&amp;quot;);
System.out.println(&amp;quot;demo2：验证所有的类都是Class类的实例对象&amp;quot;);
demo2();

System.out.println(&amp;quot;--------------------&amp;quot;);
System.out.println(&amp;quot;demo3：通过Java反射机制，用 Class 创建类对象，这也就是反射存在的意义所在&amp;quot;);
demo3();

System.out.println(&amp;quot;---------------------&amp;quot;);
System.out.println(&amp;quot;demo4：通过Java反射机制得到一个类的构造函数，并实现创建带参实例对象&amp;quot;);
demo4();

System.out.println(&amp;quot;------------------------&amp;quot;);
System.out.println(&amp;quot;demo5：通过Java反射机制操作成员变量, set 和 get&amp;quot;);
demo5();

System.out.println(&amp;quot;-------------------------&amp;quot;);
System.out.println(&amp;quot;demo6：通过Java反射机制得到类的一些属性：继承的接口、父类、函数信息、成员信息、类型等&amp;quot;);
demo6();

System.out.println(&amp;quot;--------------------------&amp;quot;);
System.out.println(&amp;quot;demo7：通过Java反射机制调用类方法&amp;quot;);
demo7();

System.out.println(&amp;quot;&amp;quot;);
System.out.println(&amp;quot;demo8：通过Java反射机制得到类加载器信息&amp;quot;);
demo8();
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;/**&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;demo1：通过Java反射机制得到类的包名和类名&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;public static void demo1() {&lt;br&gt;    Person person = new Person();&lt;br&gt;    System.out.println(“包名：” + person.getClass().getPackage().getName());&lt;br&gt;    System.out.println(“完整类名：” + person.getClass().getName());&lt;br&gt;}&lt;/p&gt;
&lt;p&gt;/**&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;demo2：验证所有的类都是Class类的实例对象&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;public static void demo2() throws ClassNotFoundException {&lt;br&gt;    //定义两个类型都未知的Class，设置初值为null，看看如何给它们赋值成Person类&lt;br&gt;    Class&amp;lt;?&amp;gt; class1 = null;&lt;br&gt;    Class&amp;lt;?&amp;gt; class2 = null;&lt;br&gt;    //写法1，可能抛出 ClassNotFoundException 异常，多用这个写法&lt;br&gt;    class1 = Class.forName(“demo.reflect.Person”);&lt;br&gt;    System.out.println(“写法1，包名：” + class1.getPackage().getName() + “ , 完整类名：” + class1.getName());&lt;br&gt;    //写法2&lt;br&gt;    class2 = Person.class;&lt;br&gt;    System.out.println(“写法2，包名：” + class2.getPackage().getName() + “ , 完整类名：” + class2.getName());&lt;br&gt;}&lt;/p&gt;
&lt;p&gt;/**&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;demo3：通过Java反射机制，用 Class 创建类对象，这也就是反射存在的意义所在.创建对象：获取类以后我们来创建它的对象，利用newInstance：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;public static void demo3() throws ClassNotFoundException, InstantiationException, IllegalAccessException {&lt;br&gt;    Class&amp;lt;?&amp;gt; class1 = null;&lt;br&gt;    class1 = Class.forName(“demo.reflect.Person”);&lt;br&gt;    //由于这里不能带参数，所以你要实例化的这个类Person，一定要有无参构造函数&lt;br&gt;    Person person = (Person) class1.newInstance();&lt;br&gt;    person.setName(“xiaoming”);&lt;br&gt;    person.setAge(20);&lt;br&gt;    System.out.println(person.getName() + “ , “ + person.getAge());&lt;br&gt;}&lt;/p&gt;
&lt;p&gt;/**&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;demo4：通过Java反射机制得到一个类的构造函数，并实现创建带参实例对象&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;public static void demo4() throws ClassNotFoundException, InstantiationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException {&lt;br&gt;    Class&amp;lt;?&amp;gt; class1 = null;&lt;br&gt;    Person person1 = null;&lt;br&gt;    Person person2 = null;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class1 = Class.forName(&amp;quot;demo.reflect.Person&amp;quot;);
Constructor&amp;lt;?&amp;gt;[] constructors = class1.getConstructors();

person1 = (Person) constructors[0].newInstance();
person1.setName(&amp;quot;xiaoming&amp;quot;);
person1.setAge(20);
System.out.println(person1.getName() + &amp;quot; , &amp;quot; + person1.getAge());
person2 = (Person) constructors[1].newInstance(21, &amp;quot;xiaohong&amp;quot;);
System.out.println(person2.getName() + &amp;quot; , &amp;quot; + person2.getAge());
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;/**&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;demo5：通过Java反射机制操作成员变量, set 和 get&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;public static void demo5() throws ClassNotFoundException, IllegalAccessException, InstantiationException, NoSuchFieldException, SecurityException {&lt;br&gt;    Class&amp;lt;?&amp;gt; class1 = Class.forName(“demo.reflect.Person”);&lt;br&gt;    Object obj = class1.newInstance();&lt;br&gt;    Field personNameField = class1.getDeclaredField(“name”);&lt;br&gt;    personNameField.setAccessible(true); //取消访问检查&lt;br&gt;    personNameField.set(obj, “lxh”);&lt;br&gt;    System.out.println(“修改属性之后得到属性变量的值：” + personNameField.get(obj));&lt;br&gt;}&lt;/p&gt;
&lt;p&gt;/**&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;demo6：通过Java反射机制得到类的一些属性：继承的接口、父类、函数信息、成员信息、类型等&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;public static void demo6() throws ClassNotFoundException {&lt;br&gt;    Class&amp;lt;?&amp;gt; class1 = Class.forName(“demo.reflect.SuperMan”);&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//取得父类名称
Class&amp;lt;?&amp;gt; superclass = class1.getSuperclass();
System.out.println(&amp;quot;SuperMan类的父类名：&amp;quot; + superclass.getName());

Field[] fields = class1.getDeclaredFields();
for (int i = 0; i &amp;lt; fields.length; i++) {
    System.out.println(&amp;quot;类中的成员&amp;quot; + i + &amp;quot;： &amp;quot; + fields[i]);
}

//取得类方法
Method[] methods = class1.getDeclaredMethods();
for (int i = 0; i &amp;lt; methods.length; i++) {
    System.out.println(&amp;quot;取得SuperMan类的方法&amp;quot; + i + &amp;quot;：&amp;quot;);
    System.out.println(&amp;quot;函数名：&amp;quot; + methods[i].getName());
    System.out.println(&amp;quot;函数返回类型：&amp;quot; + methods[i].getReturnType());
    System.out.println(&amp;quot;函数访问修饰符：&amp;quot; + Modifier.toString(methods[i].getModifiers()));
    System.out.println(&amp;quot;函数代码写法： &amp;quot; + methods[i]);
}

//取得类实现的接口，因为接口类也属于Class，所以得到接口中的方法也是一样的方法得到哈
Class&amp;lt;?&amp;gt; interfaces[] = class1.getInterfaces();
for (int i = 0; i &amp;lt; interfaces.length; i++) {
    System.out.println(&amp;quot;实现的接口类名： &amp;quot; + interfaces[i].getName());
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;/**&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;demo7：通过Java反射机制调用类方法&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;public static void demo7() throws ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InstantiationException, InvocationTargetException {&lt;br&gt;    Class&amp;lt;?&amp;gt; class1 = Class.forName(“demo.reflect.SuperMan”);&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;System.out.println(&amp;quot;调用无参方法fly()：&amp;quot;);
Method method = class1.getMethod(&amp;quot;fly&amp;quot;);
method.invoke(class1.newInstance());

System.out.println(&amp;quot;调用有参方法walk(int m)：&amp;quot;);
method = class1.getMethod(&amp;quot;walk&amp;quot;, int.class);
method.invoke(class1.newInstance(), 100);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;/**&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;demo8：通过Java反射机制得到类加载器信息&lt;/li&gt;
&lt;li&gt;在java中有三种类类加载器&lt;/li&gt;
&lt;li&gt;1）Bootstrap ClassLoader 此加载器采用c++编写，一般开发中很少见。&lt;/li&gt;
&lt;li&gt;2）Extension ClassLoader 用来进行扩展类的加载，一般对应的是jre\lib\ext目录中的类&lt;/li&gt;
&lt;li&gt;3）AppClassLoader 加载classpath指定的类，是最常用的加载器，同时也是java中默认的加载器。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;public static void demo8() throws ClassNotFoundException {&lt;br&gt;    Class&amp;lt;?&amp;gt; class1 = Class.forName(“demo.reflect.SuperMan”);&lt;br&gt;    String name = class1.getClassLoader().getClass().getName();&lt;br&gt;    System.out.println(“类加载器类名：” + name);&lt;br&gt;}&lt;br&gt;}&lt;br&gt;class Person {&lt;br&gt;private int age;&lt;br&gt;private String name;&lt;br&gt;public Person() {&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;public Person(int age, String name) {&lt;br&gt;    this.age = age;&lt;br&gt;    this.name = name;&lt;br&gt;}&lt;/p&gt;
&lt;p&gt;public int getAge() {&lt;br&gt;    return age;&lt;br&gt;}&lt;/p&gt;
&lt;p&gt;public void setAge(int age) {&lt;br&gt;    this.age = age;&lt;br&gt;}&lt;/p&gt;
&lt;p&gt;public String getName() {&lt;br&gt;    return name;&lt;br&gt;}&lt;/p&gt;
&lt;p&gt;public void setName(String name) {&lt;br&gt;    this.name = name;&lt;br&gt;}&lt;br&gt;}&lt;br&gt;interface ActionInterface {&lt;br&gt;public void walk(int m);&lt;br&gt;}&lt;br&gt;class SuperMan extends Person implements ActionInterface {&lt;br&gt;private boolean blueBriefs;&lt;br&gt;public void fly() {&lt;br&gt;    System.out.println(“我要一直爱下去，直到天荒地老，海孤石烂～～”);&lt;br&gt;}&lt;/p&gt;
&lt;p&gt;public boolean isBlueBriefs() {&lt;br&gt;    return blueBriefs;&lt;br&gt;}&lt;/p&gt;
&lt;p&gt;public void setBlueBriefs(boolean blueBriefs) {&lt;br&gt;    this.blueBriefs = blueBriefs;&lt;br&gt;}&lt;/p&gt;
&lt;p&gt;@Override&lt;br&gt;public void walk(int m) {&lt;br&gt;    System.out.println(“我要回去了～～走了” + m + “我在深圳走步了了！”);&lt;br&gt;}&lt;br&gt;}&lt;/p&gt;
&lt;p&gt;理解&lt;br&gt;通过本例子，可以看出可以通过通过Java反射机制得到类的包名和类名，可以只定义自己的类classloader而不是系统基于的数据，&lt;br&gt;可以更加好的实现自己的功能，ssh,Spring 就是通过反射代理这种方式实现servlet的映射和传值 AOP，的实现，给程序员更多可控性和灵活性&lt;br&gt;2，在运行是才获取能够解耦，实现业务逻辑和和应用逻辑的分离，让我们更加专注于程序的业务逻辑，而不是去关心AOP的运行。&lt;br&gt;这样我们就可以获得类的各种内容，进行了反编译。对于JAVA这种先编译再运行的语言来说，反射机制可以使代码更加灵活，更加容易实现面向对象。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;概念：&lt;br&gt;java反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法，&lt;br&gt;对于任意一个对象，都能够条用她的任意一个方法和属性，&lt;br&gt;这种动态的获取信息以及动态调用对象的方法的功能成为java的发射机制&lt;/p&gt;
&lt;h3 id=&quot;Java反射的功能&quot;&gt;&lt;a href=&quot;#Java反射的功能&quot; class=&quot;headerlink&quot; title=&quot;Java反射的功能&quot;&gt;&lt;/a&gt;Java反射的功能&lt;/h3&gt;&lt;p&gt;　　1)可以判断运行时对象所属的类&lt;br&gt;　　2)可以判断运行时对象所具有的成员变量和方法&lt;br&gt;　　3)通过反射甚至可以调用到private的方法&lt;br&gt;　　4)生成动态代理&lt;/p&gt;
&lt;h3 id=&quot;实现Java反射的类&quot;&gt;&lt;a href=&quot;#实现Java反射的类&quot; class=&quot;headerlink&quot; title=&quot;实现Java反射的类&quot;&gt;&lt;/a&gt;实现Java反射的类&lt;/h3&gt;&lt;p&gt;　　1)Class：它表示正在运行的Java应用程序中的类和接口&lt;br&gt;　　2)Field：提供有关类或接口的属性信息，以及对它的动态访问权限&lt;br&gt;　　3)Constructor：提供关于类的单个构造方法的信息以及对它的访问权限&lt;br&gt;　　4)Method：提供关于类或接口中某个方法信息&lt;br&gt;　　注意：Class类是Java反射中最重要的一个功能类，所有获取对象的信息(包括：方法/属性/构造方法/访问权限)&lt;br&gt;都需要它来实现&lt;br&gt;
    
    </summary>
    
    
      <category term="编程" scheme="http://lxh5431.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>直播的天地，人们的生活方式</title>
    <link href="http://lxh5431.github.io/2016/07/08/%E7%9B%B4%E6%92%AD%E7%9A%84%E5%A4%A9%E5%9C%B0%EF%BC%8C%E4%BA%BA%E4%BB%AC%E7%9A%84%E7%94%9F%E6%B4%BB%E6%96%B9%E5%BC%8F/"/>
    <id>http://lxh5431.github.io/2016/07/08/直播的天地，人们的生活方式/</id>
    <published>2016-07-08T04:57:13.000Z</published>
    <updated>2016-07-08T05:34:12.508Z</updated>
    
    <content type="html">&lt;p&gt;最近开始走入正轨的直播生态正在逐步的改变人们的生活，特别是这一两年所需要的成熟的云存储的发展和使用，使大规模交换数据成为了可能，在阿里云的崛起和云里生活的搭建，现在已经为云服务搭建了更广阔的平台，有了一个质的飞跃，渗透到直播，微博，网站，微信和vr和移动端的各个方面，下面我来说下直播在当下情况下的一种新形式下的另类的蓬勃发展。&lt;br&gt;直播1.0是电视直播时代，这个荣光属于电视转播商，电视剧和体育赛事占据了大部分的时间和空间，在广告的支持下支撑着全民的观视效果，这只是几个几家公司的欢快，滋生了一系列的问题。&lt;br&gt;直播2.0则属于互联网发轫的早起，&lt;em&gt;肇于9158，成熟于YY&lt;/em&gt;，前几年的YY甚至想过自建舞台自己做星探自己做经纪人做类似于SNH48海选的造星运动，这种模式就是一种纯粹的线上秀场。9158和YY搭建平台，签约主播，主播坐在装扮得体的房间内，绑缚在麦克风摄像头和椅子中间，主题不限定，有一定的空间限制，很多人都通过看而消耗时间。&lt;br&gt;&lt;strong&gt;直播3.0的时代则是属于映客和花椒们的，直播的概念和生态也随之移动化&lt;/strong&gt;。通过边缘切入淘宝和微博搭建起来的成熟网红生态，以流水线的形式将网红和女主播们送上了微博养号-视频出镜-淘宝代言的商业化道路，主题扩展到生活的方方面面，购车，游戏直播，唱歌和谈天说地，生活方式的改变，主播的门槛和质量有所下降，但是却又更多的人加入到这个行业来，只要你有一技之长，打破了原来全面发展的局面。丰富了这一代人的生活，改变了很多人的生活。&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;不过主播这条路依然是一条艰辛的路。&lt;br&gt;直播开发的过程中却伴随着色情，语言攻击和暴力直播等的情况，这就需要监管部门更加严厉的政策和更加干净的环境，在这个全民可参与的直播中，现在大公司却在布局vr和直播大赛和各种周边也在加入其中，弹幕的出现加深了主播和粉丝之间的沟通，要求多样化，形式更复杂，却对软件开发者来说，新的解决方案的提出，必定会孕育新的技术和新的创业环境，新的品牌效应需要我们继续寻求新的解决方式，在这个直播平台中，运用了视频的解压和断点下载的方式，数据的及时是保证直播流畅的一个正确的形式，还有就是直播的ui界面的吸引力和软件的友好度这些都需要过硬的技术去设计去感悟，引进一些新的技术粉丝去继续挖掘和完善是更好的软件发展的方向，当然还有的就是我们需要的不仅是视觉的体验，还有就是沟通的桥梁，后台的验证和支付都需要加强软件的安全性和耦合性，如何把业务和逻辑分开，搭建一个用户满意的直播平台这也是创业者需要考虑和解决的问题，七牛，阿里云等云服务商给我们提供的方案正好解决了这个问题，创业门槛更加的低，大众创新才能更好的发展，直播平台的搭建需要实现 &lt;strong&gt;推流端（采集、前处理、编码、推流），服务端（转码、录制、截图、鉴黄），播放器（拉流、解码、渲染）、互动系统（聊天室、礼物系统、赞&lt;/strong&gt; 的功能，数据的正确传输和数据的安全性的保证是一个开发者需要重视的一点，当然一个平台的崛起还需要有关键的资源，人的互动，才能支撑平台的繁荣。就像qq微信这种用户就是资源就是关键的平台的接入点就可以使一款软件走向成功。&lt;br&gt;一个平台的成功是开发者无数日夜奋战的结果，从平台的激烈性看，这就是一次际遇吧，但是如何更好的选择和发展自我的软件开发优势，要懂得先去了解平台搭建的逻辑，然后要用到的技术栈，最后就是处理好用户和软件之间的关系，这样才能更适合的去开发，去生活，生活就是开发的一种体验，我需要的不仅是描绘这世界，还需要再我的生活上添砖，为自我的价值实现做充分的准备，这就是一个开发者应有的态度和学习心态，当我还站在高峰，请眺望远方，而不要止于脚下，毕竟风景无限。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;最近开始走入正轨的直播生态正在逐步的改变人们的生活，特别是这一两年所需要的成熟的云存储的发展和使用，使大规模交换数据成为了可能，在阿里云的崛起和云里生活的搭建，现在已经为云服务搭建了更广阔的平台，有了一个质的飞跃，渗透到直播，微博，网站，微信和vr和移动端的各个方面，下面我来说下直播在当下情况下的一种新形式下的另类的蓬勃发展。&lt;br&gt;直播1.0是电视直播时代，这个荣光属于电视转播商，电视剧和体育赛事占据了大部分的时间和空间，在广告的支持下支撑着全民的观视效果，这只是几个几家公司的欢快，滋生了一系列的问题。&lt;br&gt;直播2.0则属于互联网发轫的早起，&lt;em&gt;肇于9158，成熟于YY&lt;/em&gt;，前几年的YY甚至想过自建舞台自己做星探自己做经纪人做类似于SNH48海选的造星运动，这种模式就是一种纯粹的线上秀场。9158和YY搭建平台，签约主播，主播坐在装扮得体的房间内，绑缚在麦克风摄像头和椅子中间，主题不限定，有一定的空间限制，很多人都通过看而消耗时间。&lt;br&gt;&lt;strong&gt;直播3.0的时代则是属于映客和花椒们的，直播的概念和生态也随之移动化&lt;/strong&gt;。通过边缘切入淘宝和微博搭建起来的成熟网红生态，以流水线的形式将网红和女主播们送上了微博养号-视频出镜-淘宝代言的商业化道路，主题扩展到生活的方方面面，购车，游戏直播，唱歌和谈天说地，生活方式的改变，主播的门槛和质量有所下降，但是却又更多的人加入到这个行业来，只要你有一技之长，打破了原来全面发展的局面。丰富了这一代人的生活，改变了很多人的生活。
    
    </summary>
    
      <category term="程序员视觉" scheme="http://lxh5431.github.io/categories/%E7%A8%8B%E5%BA%8F%E5%91%98%E8%A7%86%E8%A7%89/"/>
    
    
      <category term="编程" scheme="http://lxh5431.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>java的未来需要掌控者</title>
    <link href="http://lxh5431.github.io/2016/07/08/java%E7%9A%84%E6%9C%AA%E6%9D%A5%E9%9C%80%E8%A6%81%E6%8E%8C%E6%8E%A7%E8%80%85/"/>
    <id>http://lxh5431.github.io/2016/07/08/java的未来需要掌控者/</id>
    <published>2016-07-07T16:34:39.000Z</published>
    <updated>2016-07-07T17:23:15.023Z</updated>
    
    <content type="html">&lt;h2 id=&quot;关于javaee的基础认识&quot;&gt;&lt;a href=&quot;#关于javaee的基础认识&quot; class=&quot;headerlink&quot; title=&quot;关于javaee的基础认识&quot;&gt;&lt;/a&gt;关于javaee的基础认识&lt;/h2&gt;&lt;p&gt;最近对于我这种java开发者都是一个震惊的消息让我很是看不到未来继续下去的路，甲骨文居然要放弃javaee的更新和开发，这就意味了以后javaee都会比较艰难，毕竟只靠一个开源社区的力量还是缺少一些资金和时间上的更新，对日新月异的网络来说并不是一件好事，而最主要的原因就是因为javaee不能够带来足够的利润，我深深的被这结果所折服，也许我们需要更加完善的体制继续让这门语言更加的流行，而不是靠着大公司的标准而原地踏步，我们现在不仅需要免费的软件和开源项目，还需要免费的资源和劳动力才能推动一个软件的更新换代，更新的不仅就是我们的知识，还有对这一件事所应该坚持的原则和立场，。对于甲骨文我已经无话可说，一个曾经仰望的公司，现在已经为了一丝之利竟然开始出卖自己的产品，一种无形的资本，我们的信息和看法也是一种公司的财富，如果让更多的人死心，也许到时候不仅仅是客户的流失，还有公司人才的流失，一个决策总是伴随着一个产品的更新和淘汰，也许这也是软件的一种最基本的竞争方式吧，甲骨文干这事儿也不是第一次了，对于那些被甲骨文收购的开源项目，这样的结局似乎成了一种宿命。从 OpenSolaris 到 OpenOffice.org，如果你只是把金钱铺在开源项目上，我觉得这就是技术的悲哀，无法被挖掘却因为贪娈而变得一文不值了，这就是技术与商业之间的矛盾吧。&lt;br&gt;&lt;strong&gt;javaee的危机&lt;/strong&gt;&lt;br&gt;自从甲骨文收购sun公司就纠纷不断，甲骨文的律师已经就安卓系统 Dalvik 所提供的编程语言用的 Java 接口问题在法庭上和谷歌打了好几个月的官司了，这样的争吵在舆论中却不会带来一个技术的认可，va EE 在全世界驱动着数以百万的网站和企业应用。甚至在许多不是基于 Java 的应用中，Java EE 也扮演着不可或缺的角色。如果缺少这个技术很多人都得重新寻求工作才能更好的去学习和寻求真正的工作，也许这也是javaee危机的由来吧，我们不仅需要开源的项目和社区还需要开源的人们和企业更加需要商业的支持去支撑这一个体系的繁荣，要不然最后一定会变为一个垃圾回收，最终被淘汰，所以java需更加自由的开发团队去继续完善和发展这一个项目的继续研发和利用，当然甲骨文为了资金而放弃javaee也是人们可以接受的事情，不能忍受的是甲骨文放弃之前还在追究基层的一些老问题，也许这就是大公司的诟病吧，总是认为利益至上，当当我们继续前行的时候才发现这世界开源也是一种修行。我们只需要找到摆渡人，让我们跨过高山和大河，继续前行。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;strong&gt;原因的前因后果&lt;/strong&gt;&lt;br&gt;一位独立选举的 Java 社区进程执行委员会Java Community Process Executive Committee的成员 Geir Magnusson 就表示：“甲骨文在玩火。说来也是讽刺，现在竟然有一家公司让我们怀念起 Sun 来。”最近在逐渐的受缩领域的拓展性，正在数着前任的研究成果继续迷失，而这不仅是在放弃大部分的业务逻辑，还有我们开发届的资源，迫切人们去转换方式，去找替代品，继续挣扎下去，这世界不仅有一个javaee还会有更多的开源项目，去开拓我们更美好的未来，在桌面和服务器，移动和单片机等领域都在逐步的开放和丰富的应用和需求相信java还需要更长的路要走，javaee需要掌控着，才能狗开创出更美好的解决方案。&lt;br&gt;关于启示&lt;/p&gt;
&lt;h2 id=&quot;如果甲骨文真的决定走“毁灭一切”的路，本来就落后的安全补丁开发就会完全停止。数以千计使用-Java-EE-的服务器和云服务都会受到威胁，他们最终不得不替换掉植入的-Java-EE-组件，或许那些抛弃甲骨文-JCP-的公司会出资开发一个新的开源项目来替代-Java。许多公司已经在考虑这种情况，作为最后一根稻草，其它厂商已经开始讨论开发一套独立的-Java-API-的方案。如果事情真的走到这一步，JCP-也会加入他们。&quot;&gt;&lt;a href=&quot;#如果甲骨文真的决定走“毁灭一切”的路，本来就落后的安全补丁开发就会完全停止。数以千计使用-Java-EE-的服务器和云服务都会受到威胁，他们最终不得不替换掉植入的-Java-EE-组件，或许那些抛弃甲骨文-JCP-的公司会出资开发一个新的开源项目来替代-Java。许多公司已经在考虑这种情况，作为最后一根稻草，其它厂商已经开始讨论开发一套独立的-Java-API-的方案。如果事情真的走到这一步，JCP-也会加入他们。&quot; class=&quot;headerlink&quot; title=&quot;如果甲骨文真的决定走“毁灭一切”的路，本来就落后的安全补丁开发就会完全停止。数以千计使用 Java EE 的服务器和云服务都会受到威胁，他们最终不得不替换掉植入的 Java EE 组件，或许那些抛弃甲骨文 JCP 的公司会出资开发一个新的开源项目来替代 Java。许多公司已经在考虑这种情况，作为最后一根稻草，其它厂商已经开始讨论开发一套独立的 Java API 的方案。如果事情真的走到这一步，JCP 也会加入他们。&quot;&gt;&lt;/a&gt;如果甲骨文真的决定走“毁灭一切”的路，本来就落后的安全补丁开发就会完全停止。数以千计使用 Java EE 的服务器和云服务都会受到威胁，他们最终不得不替换掉植入的 Java EE 组件，或许那些抛弃甲骨文 JCP 的公司会出资开发一个新的开源项目来替代 Java。许多公司已经在考虑这种情况，作为最后一根稻草，其它厂商已经开始讨论开发一套独立的 Java API 的方案。如果事情真的走到这一步，JCP 也会加入他们。&lt;/h2&gt;&lt;p&gt;榕树下&lt;/p&gt;
&lt;h2 id=&quot;2016-07-8&quot;&gt;&lt;a href=&quot;#2016-07-8&quot; class=&quot;headerlink&quot; title=&quot;2016-07-8&quot;&gt;&lt;/a&gt;2016-07-8&lt;/h2&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;关于javaee的基础认识&quot;&gt;&lt;a href=&quot;#关于javaee的基础认识&quot; class=&quot;headerlink&quot; title=&quot;关于javaee的基础认识&quot;&gt;&lt;/a&gt;关于javaee的基础认识&lt;/h2&gt;&lt;p&gt;最近对于我这种java开发者都是一个震惊的消息让我很是看不到未来继续下去的路，甲骨文居然要放弃javaee的更新和开发，这就意味了以后javaee都会比较艰难，毕竟只靠一个开源社区的力量还是缺少一些资金和时间上的更新，对日新月异的网络来说并不是一件好事，而最主要的原因就是因为javaee不能够带来足够的利润，我深深的被这结果所折服，也许我们需要更加完善的体制继续让这门语言更加的流行，而不是靠着大公司的标准而原地踏步，我们现在不仅需要免费的软件和开源项目，还需要免费的资源和劳动力才能推动一个软件的更新换代，更新的不仅就是我们的知识，还有对这一件事所应该坚持的原则和立场，。对于甲骨文我已经无话可说，一个曾经仰望的公司，现在已经为了一丝之利竟然开始出卖自己的产品，一种无形的资本，我们的信息和看法也是一种公司的财富，如果让更多的人死心，也许到时候不仅仅是客户的流失，还有公司人才的流失，一个决策总是伴随着一个产品的更新和淘汰，也许这也是软件的一种最基本的竞争方式吧，甲骨文干这事儿也不是第一次了，对于那些被甲骨文收购的开源项目，这样的结局似乎成了一种宿命。从 OpenSolaris 到 OpenOffice.org，如果你只是把金钱铺在开源项目上，我觉得这就是技术的悲哀，无法被挖掘却因为贪娈而变得一文不值了，这就是技术与商业之间的矛盾吧。&lt;br&gt;&lt;strong&gt;javaee的危机&lt;/strong&gt;&lt;br&gt;自从甲骨文收购sun公司就纠纷不断，甲骨文的律师已经就安卓系统 Dalvik 所提供的编程语言用的 Java 接口问题在法庭上和谷歌打了好几个月的官司了，这样的争吵在舆论中却不会带来一个技术的认可，va EE 在全世界驱动着数以百万的网站和企业应用。甚至在许多不是基于 Java 的应用中，Java EE 也扮演着不可或缺的角色。如果缺少这个技术很多人都得重新寻求工作才能更好的去学习和寻求真正的工作，也许这也是javaee危机的由来吧，我们不仅需要开源的项目和社区还需要开源的人们和企业更加需要商业的支持去支撑这一个体系的繁荣，要不然最后一定会变为一个垃圾回收，最终被淘汰，所以java需更加自由的开发团队去继续完善和发展这一个项目的继续研发和利用，当然甲骨文为了资金而放弃javaee也是人们可以接受的事情，不能忍受的是甲骨文放弃之前还在追究基层的一些老问题，也许这就是大公司的诟病吧，总是认为利益至上，当当我们继续前行的时候才发现这世界开源也是一种修行。我们只需要找到摆渡人，让我们跨过高山和大河，继续前行。&lt;br&gt;
    
    </summary>
    
      <category term="程序员视野" scheme="http://lxh5431.github.io/categories/%E7%A8%8B%E5%BA%8F%E5%91%98%E8%A7%86%E9%87%8E/"/>
    
    
      <category term="编程" scheme="http://lxh5431.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>面试题目总结</title>
    <link href="http://lxh5431.github.io/2016/07/05/%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
    <id>http://lxh5431.github.io/2016/07/05/面试题目总结/</id>
    <published>2016-07-05T14:49:44.000Z</published>
    <updated>2016-07-19T15:46:05.623Z</updated>
    
    <content type="html">&lt;p&gt;&lt;strong&gt;作者：Alex-zhai&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;前段时间由于忙于修改论文，就好久没更新博客，现在准备重新开始记录自己的屌丝人生。哈哈&lt;/p&gt;
&lt;p&gt;面向对象软件开发的优点有哪些？&lt;br&gt;答：开发模块化，更易维护和修改；代码之间可以复用；增强代码的可靠性、灵活性和可理解性。&lt;/p&gt;
&lt;p&gt;答：多态是编程语言给不同的底层数据类型做相同的接口展示的一种能力。一个多态类型上的操作可以应用到其他类型的值上面。&lt;/p&gt;
&lt;p&gt;继承的定义？&lt;br&gt;答：继承给对象提供了从基类获取字段和方法的能力。继承提供了代码的重用行，也可以在不修改类的情况下给现存的类添加新特性&lt;/p&gt;
&lt;p&gt;抽象的定义？抽象和封装的不同点？&lt;br&gt;答：抽象是把想法从具体的实例中分离出来的步骤，因此，要根据他们的功能而不是实现细节来创建类。Java支持创建只暴漏接口而不包含方法实现的抽象的类。这种抽象技术的主要目的是把类的行为和实现细节分离开。&lt;br&gt;抽象和封装是互补的概念。一方面，抽象关注对象的行为。另一方面，封装关注对象行为的细节。一般是通过隐藏对象内部状态信息做到封装，因此，封装可以看成是用来提供抽象的一种策略。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;接口和抽象类的区别是什么？&lt;br&gt;答：Java提供和支持创建抽象类和接口。它们的实现有共同点，不同点在于：&lt;br&gt;接口中所有的方法隐含的都是抽象的。而抽象类则可以同时包含抽象和非抽象的方法。&lt;br&gt;类可以实现很多个接口，但是只能继承一个抽象类&lt;br&gt;类可以不实现抽象类和接口声明的所有方法，当然，在这种情况下，类也必须得声明成是抽象的。&lt;br&gt;抽象类可以在不提供接口方法实现的情况下实现接口。&lt;br&gt;Java接口中声明的变量默认都是final的。抽象类可以包含非final的变量。&lt;br&gt;Java接口中的成员函数默认是public的。抽象类的成员函数可以是private，protected或者是public。&lt;br&gt;接口是绝对抽象的，不可以被实例化。抽象类也不可以被实例化，但是，如果它包含main方法的话是可以被调用的。&lt;/p&gt;
&lt;p&gt;什么是Java虚拟机？为什么Java被称作是“平台无关的编程语言”？&lt;br&gt;答：上次电话面试被问到了这个问题，一脸蒙B。&lt;br&gt;Java虚拟机是一个可以执行Java字节码的虚拟机进程。Java源文件被编译成能被Java虚拟机执行的字节码文件。&lt;br&gt;Java被设计成允许应用程序可以运行在任意的平台，而不需要程序员为每一个平台单独重写或者是重新编译。Java虚拟机让这个变为可能，因为它知道底层硬件平台的指令长度和其他特性。&lt;br&gt;这里分享一个讲Java虚拟机的趣文，小说的形式。很有趣，读完你就明白虚拟机的工作原理：&lt;a href=&quot;http://blog.jobbole.com/101114/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.jobbole.com/101114/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;”static”关键字是什么意思？Java中是否可以覆盖(override)一个private或者是static的方法？&lt;br&gt;答：“static”关键字表明一个成员变量或者是成员方法可以在没有所属的类的实例变量的情况下被访问。&lt;br&gt;Java中static方法不能被覆盖，因为方法覆盖是基于运行时动态绑定的，而static方法是编译时静态绑定的。static方法跟类的任何实例都不相关，所以概念上不适用。&lt;/p&gt;
&lt;p&gt;Java中的方法覆盖(Overriding)和方法重载(Overloading)是什么意思？&lt;br&gt;答：这道题如果面试考概念，80%会被问到。太容易被混淆了，上次面试时候，一紧张就说反了。&lt;br&gt;Java中的方法重载发生在同一个类里面两个或者是多个方法的方法名相同但是参数不同的情况。与此相对，方法覆盖是说子类重新定义了父类的方法。方法覆盖必须有相同的方法名，参数列表和返回类型。覆盖者可能不会限制它所覆盖的方法的访问。&lt;/p&gt;
&lt;p&gt;Java支持的数据类型有哪些？什么是自动拆装箱？&lt;br&gt;答：byte，short，int，long，float，double，boolean，char&lt;br&gt;自动装箱是Java编译器在基本数据类型和对应的对象包装类型之间做的一个转化。比如：把int转化成Integer，double转化成Double，等等。反之就是自动拆箱。&lt;/p&gt;
&lt;p&gt;Java中，什么是构造函数？什么是构造函数重载？什么是复制构造函数？&lt;br&gt;答：当新对象被创建的时候，构造函数会被调用。每一个类都有构造函数。在程序员没有给类提供构造函数的情况下，Java编译器会为这个类创建一个默认的构造函数。&lt;br&gt;Java中构造函数重载和方法重载很相似。可以为一个类创建多个构造函数。每一个构造函数必须有它自己唯一的参数列表。&lt;br&gt;Java不支持像C++中那样的复制构造函数，这个不同点是因为如果你不自己写构造函数的情况下，Java不会创建默认的复制构造函数。&lt;/p&gt;
&lt;p&gt;Java支持多继承么？&lt;br&gt;答：Java中类不支持多继承，只支持单继承（即一个类只有一个父类）。 但是java中的接口支持多继承，或者说一个类可以实现多个接口。（接口的作用是用来扩展对象的功能，一个子接口继承多个父接口，说明子接口扩展了多个功能，当类实现接口时，类就扩展了相应的功能）。&lt;/p&gt;
&lt;p&gt;什么是值传递和引用传递？&lt;br&gt;答：这个问题也比较经典。&lt;br&gt;值传递是对基本型变量而言的,传递的是该变量的一个副本,改变副本不影响原变量.&lt;br&gt;引用传递一般是对于对象型变量而言的,传递的是该对象地址的一个副本, 并不是原对象本身 。 所以对引用对象进行操作会同时改变原对象。一般认为,java内的传递都是值传递。好像还是稀里糊涂&lt;br&gt;这边有个例子：&lt;a href=&quot;http://blog.csdn.net/yangjingyuan/article/details/5862944&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.csdn.net/yangjingyuan/article/details/5862944&lt;/a&gt; 大家看完应该就理解了&lt;/p&gt;
&lt;p&gt;创建线程有几种不同的方式？&lt;br&gt;答：有三种方式可以用来创建线程：&lt;br&gt;继承Thread类&lt;br&gt;实现Runnable接口&lt;br&gt;应用程序可以使用Executor框架来创建线程池&lt;br&gt;实现Runnable接口这种方式更受欢迎，因为这不需要继承Thread类。在应用设计中已经继承了别的对象的情况下，这需要多继承（而Java不支持多继承），只能实现接口。同时，线程池也是非常高效的，很容易实现和使用。&lt;/p&gt;
&lt;p&gt;概括的解释下线程的几种可用状态。&lt;br&gt;答：一句话说不明白这个问题，可以参考我的这篇文章：&lt;a href=&quot;http://blog.csdn.net/zjwcdd/article/details/51517096&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.csdn.net/zjwcdd/article/details/51517096&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;同步方法和同步代码块的区别是什么？&lt;br&gt;答：同步方法默认用this或者当前类class对象作为锁；&lt;br&gt;同步代码块可以选择以什么来加锁，比同步方法要更细颗粒度，我们可以选择只同步会发生同步问题的部分代码而不是整个方法；&lt;br&gt;这篇文章的例子不错：&lt;a href=&quot;http://blog.sina.com.cn/s/blog_4ae8f77f0101iifx.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.sina.com.cn/s/blog_4ae8f77f0101iifx.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在监视器(Monitor)内部，是如何做线程同步的？程序应该做哪种级别的同步？&lt;br&gt;答：监视器和锁在Java虚拟机中是一块使用的。监视器监视一块同步代码块，确保一次只有一个线程执行同步代码块。每一个监视器都和一个对象引用相关联。线程在获取锁之前不允许执行同步代码。&lt;/p&gt;
&lt;p&gt;Java集合类框架的基本接口有哪些？&lt;br&gt;答：集合类接口指定了一组叫做元素的对象。集合类接口的每一种具体的实现类都可以选择以它自己的方式对元素进行保存和排序。有的集合类允许重复的键，有些不允许。&lt;br&gt;Java集合类提供了一套设计良好的支持对一组对象进行操作的接口和类。Java集合类里面最基本的接口有：&lt;br&gt;Collection：代表一组对象，每一个对象都是它的子元素。&lt;br&gt;Set：不包含重复元素的Collection。&lt;br&gt;List：有顺序的collection，并且可以包含重复元素。&lt;br&gt;Map：可以把键(key)映射到值(value)的对象，键不能重复。&lt;/p&gt;
&lt;p&gt;什么是迭代器(Iterator)？&lt;br&gt;答：Iterator接口提供了很多对集合元素进行迭代的方法。每一个集合类都包含了可以返回迭代器实例的迭代方法。迭代器可以在迭代的过程中删除底层集合的元素,但是不可以直接调用集合的&lt;br&gt;remove(Object Obj)删除，可以通过迭代器的remove()方法删除。&lt;/p&gt;
&lt;p&gt;Iterator和ListIterator的区别是什么？&lt;br&gt;答：Iterator可用来遍历Set和List集合，但是ListIterator只能用来遍历List。&lt;br&gt;Iterator对集合只能是前向遍历，ListIterator既可以前向也可以后向。&lt;br&gt;ListIterator实现了Iterator接口，并包含其他的功能，比如：增加元素，替换元素，获取前一个和后一个元素的索引，等等。&lt;/p&gt;
&lt;p&gt;Java中的HashMap的工作原理是什么？&lt;br&gt;答：Java中的HashMap是以键值对(key-value)的形式存储元素的。HashMap需要一个hash函数，它使用hashCode()和equals()方法来向集合/从集合添加和检索元素。当调用put()方法的时候，HashMap会计算key的hash值，然后把键值对存储在集合中合适的索引上。如果key已经存在了，value会被更新成新值。HashMap的一些重要的特性是它的容量(capacity)，负载因子(load factor)和扩容极限(threshold resizing)。&lt;/p&gt;
&lt;p&gt;hashCode()和equals()方法的重要性体现在什么地方？&lt;br&gt;答：Java中的HashMap使用hashCode()和equals()方法来确定键值对的索引，当根据键获取值的时候也会用到这两个方法。如果没有正确的实现这两个方法，两个不同的键可能会有相同的hash值，因此，可能会被集合认为是相等的。而且，这两个方法也用来发现重复元素。所以这两个方法的实现对HashMap的精确性和正确性是至关重要的。&lt;/p&gt;
&lt;p&gt;HashMap和Hashtable有什么区别？&lt;br&gt;答：HashMap和Hashtable都实现了Map接口，因此很多特性非常相似。但是，他们有以下不同点：&lt;br&gt;HashMap允许键和值是null，而Hashtable不允许键或者值是null。&lt;br&gt;Hashtable是同步的，而HashMap不是。因此，HashMap更适合于单线程环境，而Hashtable适合于多线程环境。&lt;br&gt;HashMap提供了可供应用迭代的键的集合，因此，HashMap是快速失败的。另一方面，Hashtable提供了对键的列举(Enumeration)。&lt;br&gt;一般认为Hashtable是一个遗留的类。&lt;/p&gt;
&lt;p&gt;数组(Array)和列表(ArrayList)有什么区别？什么时候应该使用Array而不是ArrayList？&lt;br&gt;答：Array可以包含基本类型和对象类型，ArrayList只能包含对象类型。&lt;br&gt;Array大小是固定的，ArrayList的大小是动态变化的。&lt;br&gt;ArrayList提供了更多的方法和特性，比如：addAll()，removeAll()，iterator()等等。&lt;br&gt;对于基本类型数据，集合使用自动装箱来减少编码工作量。但是，当处理固定大小的基本数据类型的时候，这种方式相对比较慢。&lt;/p&gt;
&lt;p&gt;ArrayList和LinkedList有什么区别？&lt;br&gt;答：ArrayList是基于索引的数据接口，它的底层是数组。它可以以O(1)时间复杂度对元素进行随机访问。与此对应，LinkedList是以元素列表的形式存储它的数据，每一个元素都和它的前一个和后一个元素链接在一起，在这种情况下，查找某个元素的时间复杂度是O(n)。&lt;br&gt;相对于ArrayList，LinkedList的插入，添加，删除操作速度更快，因为当元素被添加到集合任意位置的时候，不需要像数组那样重新计算大小或者是更新索引。&lt;br&gt;LinkedList比ArrayList更占内存，因为LinkedList为每一个节点存储了两个引用，一个指向前一个元素，一个指向下一个元素。&lt;/p&gt;
&lt;p&gt;Comparable和Comparator接口是干什么的？列出它们的区别。&lt;br&gt;答：Java提供了只包含一个compareTo()方法的Comparable接口。这个方法可以个给两个对象排序。具体来说，它返回负数，0，正数来表明输入对象小于，等于，大于已经存在的对象。&lt;br&gt;Java提供了包含compare()和equals()两个方法的Comparator接口。compare()方法用来给两个输入参数排序，返回负数，0，正数表明第一个参数是小于，等于，大于第二个参数。equals()方法需要一个对象作为参数，它用来决定输入参数是否和comparator相等。只有当输入参数也是一个comparator并且输入参数和当前comparator的排序结果是相同的时候，这个方法才返回true。&lt;/p&gt;
&lt;p&gt;什么是Java优先级队列(Priority Queue)？&lt;br&gt;答：PriorityQueue是一个基于优先级堆的无界队列，它的元素是按照自然顺序(natural order)排序的。在创建的时候，我们可以给它提供一个负责给元素排序的比较器。PriorityQueue不允许null值，因为他们没有自然顺序，或者说他们没有任何的相关联的比较器。最后，PriorityQueue不是线程安全的，入队和出队的时间复杂度是O(log(n))。&lt;/p&gt;
&lt;p&gt;如何权衡是使用无序的数组还是有序的数组？&lt;br&gt;答:有序数组最大的好处在于查找的时间复杂度是O(log n)，而无序数组是O(n)。有序数组的缺点是插入操作的时间复杂度是O(n)，因为值大的元素需要往后移动来给新元素腾位置。相反，无序数组的插入时间复杂度是常量O(1)。&lt;/p&gt;
&lt;p&gt;Java集合类框架的最佳实践有哪些?&lt;br&gt;答：根据应用的需要正确选择要使用的集合的类型对性能非常重要，比如：假如元素的大小是固定的，而且能事先知道，我们就应该用Array而不是ArrayList。&lt;br&gt;有些集合类允许指定初始容量。因此，如果我们能估计出存储的元素的数目，我们可以设置初始容量来避免重新计算hash值或者是扩容。&lt;br&gt;为了类型安全，可读性和健壮性的原因总是要使用泛型。同时，使用泛型还可以避免运行时的ClassCastException。&lt;br&gt;使用JDK提供的不变类(immutable class)作为Map的键可以避免为我们自己的类实现hashCode()和equals()方法。&lt;br&gt;编程的时候接口优于实现。&lt;br&gt;底层的集合实际上是空的情况下，返回长度是0的集合或者是数组，不要返回null。&lt;/p&gt;
&lt;p&gt;Enumeration接口和Iterator接口的区别有哪些？&lt;br&gt;答：Enumeration速度是Iterator的2倍，同时占用更少的内存。但是，Iterator远远比Enumeration安全，因为其他线程不能够修改正在被iterator遍历的集合里面的对象。同时，Iterator允许调用者删除底层集合里面的元素，这对Enumeration来说是不可能的。&lt;/p&gt;
&lt;p&gt;HashSet和TreeSet有什么区别？&lt;br&gt;答：HashSet是由一个hash表来实现的，因此，它的元素是无序的。add()，remove()，contains()方法的时间复杂度是O(1)。&lt;br&gt;另一方面，TreeSet是由一个树形的结构来实现的，它里面的元素是有序的。因此，add()，remove()，contains()方法的时间复杂度是O(logn)。&lt;/p&gt;
&lt;p&gt;Java中垃圾回收有什么目的？什么时候进行垃圾回收？&lt;br&gt;答：垃圾回收的目的是识别并且丢弃应用不再使用的对象来释放和重用资源。&lt;/p&gt;
&lt;p&gt;finalize()方法什么时候被调用？析构函数(finalization)的目的是什么？&lt;br&gt;答：垃圾回收器(garbage collector)决定回收某对象时，就会运行该对象的finalize()方法 但是在Java中很不幸，如果内存总是充足的，那么垃圾回收可能永远不会进行，也就是说filalize()可能永远不被执行，显然指望它做收尾工作是靠不住的。 那么finalize()究竟是做什么的呢？它最主要的用途是回收特殊渠道申请的内存。Java程序有垃圾回收器，所以一般情况下内存问题不用程序员操心。但有一种JNI(Java Native Interface)调用non-Java程序（C或C++），finalize()的工作就是回收这部分的内存。&lt;/p&gt;
&lt;p&gt;如果对象的引用被置为null，垃圾收集器是否会立即释放对象占用的内存？&lt;br&gt;答: 不会，在下一个垃圾回收周期中，这个对象将是可被回收的。&lt;/p&gt;
&lt;p&gt;Java堆的结构是什么样子的？什么是堆中的永久代(Perm Gen space)?&lt;br&gt;答：JVM的堆是运行时数据区，所有类的实例和数组都是在堆上分配内存。它在JVM启动的时候被创建。对象所占的堆内存是由自动内存管理系统也就是垃圾收集器回收。&lt;br&gt;堆内存是由存活和死亡的对象组成的。存活的对象是应用可以访问的，不会被垃圾回收。死亡的对象是应用不可访问尚且还没有被垃圾收集器回收掉的对象。一直到垃圾收集器把这些对象回收掉之前，他们会一直占据堆内存空间。&lt;/p&gt;
&lt;p&gt;在Java中，对象什么时候可以被垃圾回收？&lt;br&gt;答：当对象对当前使用这个对象的应用程序变得不可触及的时候，这个对象就可以被回收了。&lt;/p&gt;
&lt;p&gt;Java中的两种异常类型是什么？他们有什么区别？&lt;br&gt;答：Java中有两种异常：受检查的(checked)异常和不受检查的(unchecked)异常。不受检查的异常不需要在方法或者是构造函数上声明，就算方法或者是构造函数的执行可能会抛出这样的异常，并且不受检查的异常可以传播到方法或者是构造函数的外面。相反，受检查的异常必须要用throws语句在方法或者是构造函数上声明。&lt;/p&gt;
&lt;p&gt;Java中Exception和Error有什么区别？&lt;br&gt;答：Exception和Error都是Throwable的子类。Exception用于用户程序可以捕获的异常情况。Error定义了不期望被用户程序捕获的异常。&lt;br&gt;具体解释和图说明见：&lt;a href=&quot;http://blog.csdn.net/zjwcdd/article/details/51508475&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.csdn.net/zjwcdd/article/details/51508475&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;throw和throws有什么区别？&lt;br&gt;答：throw关键字用来在程序中明确的抛出异常，相反，throws语句用来表明方法不能处理的异常。每一个方法都必须要指定哪些异常不能处理，所以方法的调用者才能够确保处理可能发生的异常，多个异常是用逗号分隔的。&lt;/p&gt;
&lt;p&gt;异常处理完成以后，Exception对象会发生什么变化？&lt;br&gt;答：Exception对象会在下一个垃圾回收过程中被回收掉。&lt;/p&gt;
&lt;p&gt;finally代码块和finalize()方法有什么区别？&lt;br&gt;答：无论是否抛出异常，finally代码块都会执行，它主要是用来释放应用占用的资源。finalize()方法是Object类的一个protected方法，它是在对象被垃圾回收之前由Java虚拟机来调用的。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;作者：Alex-zhai&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;前段时间由于忙于修改论文，就好久没更新博客，现在准备重新开始记录自己的屌丝人生。哈哈&lt;/p&gt;
&lt;p&gt;面向对象软件开发的优点有哪些？&lt;br&gt;答：开发模块化，更易维护和修改；代码之间可以复用；增强代码的可靠性、灵活性和可理解性。&lt;/p&gt;
&lt;p&gt;答：多态是编程语言给不同的底层数据类型做相同的接口展示的一种能力。一个多态类型上的操作可以应用到其他类型的值上面。&lt;/p&gt;
&lt;p&gt;继承的定义？&lt;br&gt;答：继承给对象提供了从基类获取字段和方法的能力。继承提供了代码的重用行，也可以在不修改类的情况下给现存的类添加新特性&lt;/p&gt;
&lt;p&gt;抽象的定义？抽象和封装的不同点？&lt;br&gt;答：抽象是把想法从具体的实例中分离出来的步骤，因此，要根据他们的功能而不是实现细节来创建类。Java支持创建只暴漏接口而不包含方法实现的抽象的类。这种抽象技术的主要目的是把类的行为和实现细节分离开。&lt;br&gt;抽象和封装是互补的概念。一方面，抽象关注对象的行为。另一方面，封装关注对象行为的细节。一般是通过隐藏对象内部状态信息做到封装，因此，封装可以看成是用来提供抽象的一种策略。&lt;br&gt;
    
    </summary>
    
      <category term="转载" scheme="http://lxh5431.github.io/categories/%E8%BD%AC%E8%BD%BD/"/>
    
    
      <category term="编程" scheme="http://lxh5431.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>路由器测试的几个要点</title>
    <link href="http://lxh5431.github.io/2016/07/05/%E8%B7%AF%E7%94%B1%E5%99%A8%E6%B5%8B%E8%AF%95%E7%9A%84%E5%87%A0%E4%B8%AA%E8%A6%81%E7%82%B9/"/>
    <id>http://lxh5431.github.io/2016/07/05/路由器测试的几个要点/</id>
    <published>2016-07-05T12:09:57.000Z</published>
    <updated>2016-07-05T14:50:29.598Z</updated>
    
    <content type="html">&lt;p&gt;在三层网络中如何针对特定的测试进行方法设计，试以吞吐量，丢包率，延时等测试对象加以描述&lt;br&gt;测试目的：找到在没有丢包的情况系路由器能够转发的最大速率，关心设备的整体性能和在某一具体应用的行为：整机吞吐量（反应背板或者交换网络的能力）端口吞吐量（反应端口和线卡的能力）&lt;br&gt;测试拓扑和流量分布：全网状，端口对，部分网状。&lt;br&gt;测试查找算法&lt;br&gt;a.    初始帧速率可以取理论最大传输速率的某个百分比，也可以通过前一个测试案例的结果加以适当的调整活得。&lt;br&gt;b.    由于包丢失是一个随机的过程为使测量的结果尽量接近路由器的实际性能测试时要持续较长的时间，选取较小的变化量，重复多次测量求平均值&lt;br&gt;c.    吞吐量随帧大小的不同而变化&lt;br&gt;测试条件&lt;br&gt;时长：每次至少持续60秒以上&lt;br&gt;帧尺寸： 64 128 256 512 1024 1280 1518&lt;br&gt;结果：64 14880 13000 128 8445 8200 256 4528 4500 512 2349 2349 1024 117 1197 1280 958 958 1518 82 812&lt;/p&gt;
&lt;h2 id=&quot;作为一名网络测试工程师，试说明对二层网络传输控制层面的功能或性能直接的测试&quot;&gt;&lt;a href=&quot;#作为一名网络测试工程师，试说明对二层网络传输控制层面的功能或性能直接的测试&quot; class=&quot;headerlink&quot; title=&quot;作为一名网络测试工程师，试说明对二层网络传输控制层面的功能或性能直接的测试&quot;&gt;&lt;/a&gt;作为一名网络测试工程师，试说明对二层网络传输控制层面的功能或性能直接的测试&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;直接给出一些传输控制层面的功能或性能指标，然后对这些指标进行直接的测试&lt;/li&gt;
&lt;li&gt;控制层面的功能的实现与否及其小效果最终必然会反映到数据转发层面上来，提出一些测试数据转发层面的性能指标，通过对这些指标的测试来间接反映传输控制层的功能与性能&lt;/li&gt;
&lt;li&gt;目的。为了度量dut再输入过载情况下，输入端口对过载的反应&lt;/li&gt;
&lt;li&gt;如何制造过载，测试帧的帧间隙设置为88bit帧大小，双工模式，测试时间等主要测试参数以及结果统计方法等都可以参考全网状测试&lt;/li&gt;
&lt;li&gt;观测结果：发现帧转发率大于最大提交负载或者介质的最大理论利用率，则表明dut启用了前压机制：当观测端口的帧转发率小于最大提交负载或介质的最大理论利用率是。则说明dut不具备前压机制&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
3、IntServ和DiffServ的优、缺点各是什么？&lt;br&gt;答：IntServ的优点是能够提供绝对有保证的QoS。详细的设计使RSVP用户能够仔细规定业务种类。因为RSVP运行在从源端到目的端的每个路由器上，因此可以监视每个流，以防止其消耗的资源超过其请求预留和预先购买的资源。&lt;br&gt;IntServ的缺点：（1）可扩展性差;（2）如果存在不支持IntServ的节点/网络，虽然信令可以透明通过，但对应用来说，已经无法实现真正意义上的资源预留，所希望达到的QoS保证也就打了折扣；（3）对路由器的要求较高；（4）该模型不适合于生存期短的业务流。&lt;br&gt;DiffServ的优点：区分服务只包含有限数量的业务类别，状态信息数少，实现简单，可扩展性较好。目前，区分服务是业界普遍认同的ip骨干网的服务质量解决方案。&lt;br&gt;DiffServ的缺点：虽然DiffServ为IP QoS奠定了宝贵的基础，但还是不能完全依靠自己来提供端到端的服务质量保证。DiffServ需要大量的网络元素的协同动作，才能向用户提供端到端的服务质量。&lt;h2 id=&quot;TCP连接关闭方式最常用的是4次握手关闭方式。除此之外，关闭TCP连接还有哪些方式？请简要说明这些关闭TCP连接方式的基本过程。&quot;&gt;&lt;a href=&quot;#TCP连接关闭方式最常用的是4次握手关闭方式。除此之外，关闭TCP连接还有哪些方式？请简要说明这些关闭TCP连接方式的基本过程。&quot; class=&quot;headerlink&quot; title=&quot;TCP连接关闭方式最常用的是4次握手关闭方式。除此之外，关闭TCP连接还有哪些方式？请简要说明这些关闭TCP连接方式的基本过程。&quot;&gt;&lt;/a&gt;TCP连接关闭方式最常用的是4次握手关闭方式。除此之外，关闭TCP连接还有哪些方式？请简要说明这些关闭TCP连接方式的基本过程。&lt;/h2&gt;答：TCP关闭连接的方式还包括3次握手关闭方式、服务器端发起的Reset关闭方式和客户端发起的Reset关闭方式。&lt;br&gt;3次握手关闭方式简化了4次握手关闭方式，通常由服务器端发起。可以用FIN、FIN/ACK、ACK即可完成连接的关闭。&lt;br&gt;客户端发起的Reset终止TCP连接方式的过程：客户端向服务器发送一个RST/ACK，要求立即终止连接，客户端和服务器的连接即刻终止；如需再次使用TCP进行通信，需要再建立连接。&lt;br&gt;服务器端发起的Reset终止TCP连接方式的过程：服务器向客户端发送RST/ACK，请求终止TCP连接，TCP连接即刻终止。若两者之间又要通信，则需要再次使用3次握手协议再次建立TCP连接。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;两种队列管理算法——RED和WRED的区别是什么？&lt;/strong&gt;&lt;br&gt;   答：WRED算法是RED算法和IP Precedence的结合，可以区分对待不同业务流，即WRED可以选择在发生拥塞时先丢弃优先级低的分组。WRED算法给不同的IP优先级配置不同的门限权重和最大丢失概率，这样可以向不同类型的业务流提供不同等级的服务。IP优先级的分组比起IP优先级高的分组更容易被丢弃。换句话说，分组的IP优先级越高，其成功传送的概率也就越大。对于非IP的业务，WRED将其IP优先级当成为0来对待。&lt;br&gt;什么是背对背？什么情况下需要进行背对背测试？&lt;br&gt;   答：背对背指的是在一段较短的时间内，以合法的最小帧间隙在传输介质上连续发送固定长度的包而不引起丢包时的包数量，IEEE规定的以太网帧间的最小帧间隙为96比特。该指标用于测试路由器缓存能力。&lt;br&gt;       大量的路由更新消息、频繁的文件传送和数据备份等操作都会导致数据在一段时间内急剧增加，甚至达到该物理介质的理论速率。为了描述此时路由器的表现，就要进行背对背突发的测试。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在三层网络中如何针对特定的测试进行方法设计，试以吞吐量，丢包率，延时等测试对象加以描述&lt;br&gt;测试目的：找到在没有丢包的情况系路由器能够转发的最大速率，关心设备的整体性能和在某一具体应用的行为：整机吞吐量（反应背板或者交换网络的能力）端口吞吐量（反应端口和线卡的能力）&lt;br&gt;测试拓扑和流量分布：全网状，端口对，部分网状。&lt;br&gt;测试查找算法&lt;br&gt;a.    初始帧速率可以取理论最大传输速率的某个百分比，也可以通过前一个测试案例的结果加以适当的调整活得。&lt;br&gt;b.    由于包丢失是一个随机的过程为使测量的结果尽量接近路由器的实际性能测试时要持续较长的时间，选取较小的变化量，重复多次测量求平均值&lt;br&gt;c.    吞吐量随帧大小的不同而变化&lt;br&gt;测试条件&lt;br&gt;时长：每次至少持续60秒以上&lt;br&gt;帧尺寸： 64 128 256 512 1024 1280 1518&lt;br&gt;结果：64 14880 13000 128 8445 8200 256 4528 4500 512 2349 2349 1024 117 1197 1280 958 958 1518 82 812&lt;/p&gt;
&lt;h2 id=&quot;作为一名网络测试工程师，试说明对二层网络传输控制层面的功能或性能直接的测试&quot;&gt;&lt;a href=&quot;#作为一名网络测试工程师，试说明对二层网络传输控制层面的功能或性能直接的测试&quot; class=&quot;headerlink&quot; title=&quot;作为一名网络测试工程师，试说明对二层网络传输控制层面的功能或性能直接的测试&quot;&gt;&lt;/a&gt;作为一名网络测试工程师，试说明对二层网络传输控制层面的功能或性能直接的测试&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;直接给出一些传输控制层面的功能或性能指标，然后对这些指标进行直接的测试&lt;/li&gt;
&lt;li&gt;控制层面的功能的实现与否及其小效果最终必然会反映到数据转发层面上来，提出一些测试数据转发层面的性能指标，通过对这些指标的测试来间接反映传输控制层的功能与性能&lt;/li&gt;
&lt;li&gt;目的。为了度量dut再输入过载情况下，输入端口对过载的反应&lt;/li&gt;
&lt;li&gt;如何制造过载，测试帧的帧间隙设置为88bit帧大小，双工模式，测试时间等主要测试参数以及结果统计方法等都可以参考全网状测试&lt;/li&gt;
&lt;li&gt;观测结果：发现帧转发率大于最大提交负载或者介质的最大理论利用率，则表明dut启用了前压机制：当观测端口的帧转发率小于最大提交负载或介质的最大理论利用率是。则说明dut不具备前压机制
    
    </summary>
    
      <category term="路由测试" scheme="http://lxh5431.github.io/categories/%E8%B7%AF%E7%94%B1%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="编程" scheme="http://lxh5431.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>人工智能 人们的智能</title>
    <link href="http://lxh5431.github.io/2016/07/05/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%20%E4%BA%BA%E4%BB%AC%E7%9A%84%E6%99%BA%E8%83%BD/"/>
    <id>http://lxh5431.github.io/2016/07/05/人工智能 人们的智能/</id>
    <published>2016-07-04T16:21:16.000Z</published>
    <updated>2016-07-05T02:36:32.791Z</updated>
    
    <content type="html">&lt;h2 id=&quot;机器就是未来&quot;&gt;&lt;a href=&quot;#机器就是未来&quot; class=&quot;headerlink&quot; title=&quot;机器就是未来&quot;&gt;&lt;/a&gt;机器就是未来&lt;/h2&gt;&lt;p&gt;今天在虎嗅看到一个新闻，谷歌正在推行人工智能的学习，他们已经是各个软件领域的佼佼者，现在都在看好人工智能的前景，人工智能就是他们的过去和未来，我深深的被CEO的话所震撼，机器革命正在逼近，摩尔定律的硬件的提升空间，正在为大存储大搜素和大内存的运行效率提供了必要的条件，人类正在进入伪人工智能的境地，人工智能的突破口在哪里，人工智能给我们的生活方式和学习方式带来什么呢，无论是现在的小娜，还是ap狗，都在预示着机器学习已经到达一个深度学习的阶段，我们该如何去判断和投资互联网，如何更好的捉住这个机会，这都是我该考虑和审视的问题，引用一句话，机器学习正在改变人们和世界，还有我们的生活。&lt;/p&gt;
&lt;h2 id=&quot;机器学习的前景&quot;&gt;&lt;a href=&quot;#机器学习的前景&quot; class=&quot;headerlink&quot; title=&quot;机器学习的前景&quot;&gt;&lt;/a&gt;机器学习的前景&lt;/h2&gt;&lt;p&gt;谷歌CEO桑达尔·皮查伊(Sundar Pichai)在去年末的财报电话会议上阐述了该公司的想法：“机器学习是一项有颠覆性的核心技术，我们可以借此重新思考我们做一切事情的方式。我们还会尽力将它应用于所有的产品中，包括搜索、广告、YouTube或Play。我们还处于发展初期，但你会看到我们以系统化的方式将机器学习应用到所有这些领域之中。谷歌正在布局人工智能和机器学习，这个大公司正在引领一个时代的潮流，我们不该轻视这一项造福人类的技术，技术本省就是为了服务大众，我们需要的是在机器中深度学习，让机器拥有独立思考的能力，这就要用到一些神经学的应用，现在需要的就是跨领域的学习，要不然各个专注于一点是很难找到突破口，我只是在试探，在眺望这一项技术，现在的虚拟眼睛和桌面聊天工具，这些都在学习，当时却缺少灵活性，声音识别和指纹识别的区别，就是在于学习功能的实现，谷歌用机器和人工智能布局未来，正从一个搜索和视频，转向新的开发方向，在开源的社区里是一件令人鼓舞的式，毕竟一个公司不仅取之于社会，还要回馈社会，未来人工智能加上智能家居的实现，我相信会解决土地与学习的方式，我一直觉得人工智能最大的好处就是能够在现有的基础之上去学习，帮助人们去学习，而不是自我的学习，那样最终会背叛善良和忠诚 ，人工智能的未来在富足学习，而不是真正意义上在模仿克隆人的特性，那样也是人工智能的雏形，但是人工智能的最初的定义就会违背，我们需要的更好的生活，更好的去适应社会和世界，我需要的不是那么的多，我们需要的仅仅是让世界的改变更慢一点吧，人工智能就是我们需要考虑的一个重要话题。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;机器学习与人工智能&quot;&gt;&lt;a href=&quot;#机器学习与人工智能&quot; class=&quot;headerlink&quot; title=&quot;机器学习与人工智能&quot;&gt;&lt;/a&gt;机器学习与人工智能&lt;/h2&gt;&lt;p&gt;看过不少的科幻电影，里面都在考虑着人工自能的可控性和人工智能的可用性，是监控一切，还是检测错误与威胁，还是为我们构建一个更加强大的虚拟世界，让人们更好的体验和选择不一样的生活，其实设计本身最重要的是如何让人工智能的特性体现出来，经过60年的发展，我们还在步履蹒跚，我们需要的突破点是否是因为我们缺少了一个能够记忆和思考的载体，晶体管是在记忆和传输着世界的数据，可是我们会不会提纯出我们需要的元素呢，一种可记忆可修改的硬件，这个真的很难说，我只希望在人工智能的继续发展的境况下，优先发展智能家居的实现，监控气温大气，还是声锁，这都是简单的一种体现形式，可有可能利用我们最贴切的空气提高人工智能的吻合度呢。这就是我所能想到最不可思议的想法，其实人工智能的前进道路上，我们一直在前进。&lt;br&gt;人工智能的实现和算法的应用&lt;br&gt;人工智能现在用的最多的就是算法，一种理解世界和改造世界的思维模式，一种固定却千变万化描述事物本身的一种实现形式，我们现在最多的就是算法和深度学习，还有就是大数据的分析和利用，可是我觉得还需要的是人记忆功能和学习功能的实现，现在很多的机器学习者都往人工技巧神经出发，这是一个非常可行的方式吧，但这个跨学科的知识却是难倒了不少人，我现在寻求的不再是如何学习，而是如何去考虑这件事，如何 去构造一个人，去抽象去实现，去开拓真的世界，就像现在的特效如何去构建一个更好的世界，然我们有不一样的视觉盛宴，这就是我们需要寻求的方案吧，现在的文章都是在表层体现，我也想去学习，额可环境去是影响了一点，不过我相信我最终还是会拥抱机器学习，毕竟人工智能已经是势不可挡了，只是那一天到来而已，你相信未来吗，我相信人工智能。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;机器就是未来&quot;&gt;&lt;a href=&quot;#机器就是未来&quot; class=&quot;headerlink&quot; title=&quot;机器就是未来&quot;&gt;&lt;/a&gt;机器就是未来&lt;/h2&gt;&lt;p&gt;今天在虎嗅看到一个新闻，谷歌正在推行人工智能的学习，他们已经是各个软件领域的佼佼者，现在都在看好人工智能的前景，人工智能就是他们的过去和未来，我深深的被CEO的话所震撼，机器革命正在逼近，摩尔定律的硬件的提升空间，正在为大存储大搜素和大内存的运行效率提供了必要的条件，人类正在进入伪人工智能的境地，人工智能的突破口在哪里，人工智能给我们的生活方式和学习方式带来什么呢，无论是现在的小娜，还是ap狗，都在预示着机器学习已经到达一个深度学习的阶段，我们该如何去判断和投资互联网，如何更好的捉住这个机会，这都是我该考虑和审视的问题，引用一句话，机器学习正在改变人们和世界，还有我们的生活。&lt;/p&gt;
&lt;h2 id=&quot;机器学习的前景&quot;&gt;&lt;a href=&quot;#机器学习的前景&quot; class=&quot;headerlink&quot; title=&quot;机器学习的前景&quot;&gt;&lt;/a&gt;机器学习的前景&lt;/h2&gt;&lt;p&gt;谷歌CEO桑达尔·皮查伊(Sundar Pichai)在去年末的财报电话会议上阐述了该公司的想法：“机器学习是一项有颠覆性的核心技术，我们可以借此重新思考我们做一切事情的方式。我们还会尽力将它应用于所有的产品中，包括搜索、广告、YouTube或Play。我们还处于发展初期，但你会看到我们以系统化的方式将机器学习应用到所有这些领域之中。谷歌正在布局人工智能和机器学习，这个大公司正在引领一个时代的潮流，我们不该轻视这一项造福人类的技术，技术本省就是为了服务大众，我们需要的是在机器中深度学习，让机器拥有独立思考的能力，这就要用到一些神经学的应用，现在需要的就是跨领域的学习，要不然各个专注于一点是很难找到突破口，我只是在试探，在眺望这一项技术，现在的虚拟眼睛和桌面聊天工具，这些都在学习，当时却缺少灵活性，声音识别和指纹识别的区别，就是在于学习功能的实现，谷歌用机器和人工智能布局未来，正从一个搜索和视频，转向新的开发方向，在开源的社区里是一件令人鼓舞的式，毕竟一个公司不仅取之于社会，还要回馈社会，未来人工智能加上智能家居的实现，我相信会解决土地与学习的方式，我一直觉得人工智能最大的好处就是能够在现有的基础之上去学习，帮助人们去学习，而不是自我的学习，那样最终会背叛善良和忠诚 ，人工智能的未来在富足学习，而不是真正意义上在模仿克隆人的特性，那样也是人工智能的雏形，但是人工智能的最初的定义就会违背，我们需要的更好的生活，更好的去适应社会和世界，我需要的不是那么的多，我们需要的仅仅是让世界的改变更慢一点吧，人工智能就是我们需要考虑的一个重要话题。&lt;br&gt;
    
    </summary>
    
      <category term="程序员视觉" scheme="http://lxh5431.github.io/categories/%E7%A8%8B%E5%BA%8F%E5%91%98%E8%A7%86%E8%A7%89/"/>
    
    
      <category term="编程" scheme="http://lxh5431.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>路由的几个性能指标</title>
    <link href="http://lxh5431.github.io/2016/07/05/%E8%B7%AF%E7%94%B1%E7%9A%84%E5%87%A0%E4%B8%AA%E6%80%A7%E8%83%BD%E6%8C%87%E6%A0%87/"/>
    <id>http://lxh5431.github.io/2016/07/05/路由的几个性能指标/</id>
    <published>2016-07-04T16:00:20.000Z</published>
    <updated>2016-07-04T16:06:30.633Z</updated>
    
    <content type="html">&lt;h2 id=&quot;吞吐量&quot;&gt;&lt;a href=&quot;#吞吐量&quot; class=&quot;headerlink&quot; title=&quot;吞吐量&quot;&gt;&lt;/a&gt;吞吐量&lt;/h2&gt;&lt;p&gt;是指在没有丢包的情况下，路由设备能够转发的最大速率，对网络/设备/端口/虚电路，或者其他设备，单位时间内成功的传递数据的数量(以比特字节分组等测量&lt;/p&gt;
&lt;h2 id=&quot;延时：&quot;&gt;&lt;a href=&quot;#延时：&quot; class=&quot;headerlink&quot; title=&quot;延时：&quot;&gt;&lt;/a&gt;延时：&lt;/h2&gt;&lt;p&gt;是指包的第一个比特进入路由器到最后一个比特离开路由器的时间的间隔，叫做时延&lt;/p&gt;
&lt;h2 id=&quot;丢包率：&quot;&gt;&lt;a href=&quot;#丢包率：&quot; class=&quot;headerlink&quot; title=&quot;丢包率：&quot;&gt;&lt;/a&gt;丢包率：&lt;/h2&gt;&lt;p&gt;是指路由器在稳定负载状态下，由于缺乏资源而不能被网络设备转发的包占所有应该被转发的包的百分比，丢包率的衡量单位是以字节为计数单位，计算被落下的包字节数占所有应该被转发的包字节数的百分比。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;背对背：&quot;&gt;&lt;a href=&quot;#背对背：&quot; class=&quot;headerlink&quot; title=&quot;背对背：&quot;&gt;&lt;/a&gt;背对背：&lt;/h2&gt;&lt;p&gt;指的是在一段时间内，以合法的最小帧间隙在传输媒介上连续发送固定长度的包不引起丢包的包数量 96&lt;/p&gt;
&lt;h2 id=&quot;转发率：&quot;&gt;&lt;a href=&quot;#转发率：&quot; class=&quot;headerlink&quot; title=&quot;转发率：&quot;&gt;&lt;/a&gt;转发率：&lt;/h2&gt;&lt;p&gt;通过标定交换机每秒能够处理的数据量来定义交换机的处理能力，交换机产品线按转发速率来进行分类，若转发率较低，则无法支持在其所有端口之间实现全线速通信，包转发率是指交换机每秒可以转发多少百万个数据包，即交换机能同时转发的数据包的数量，包转发率以数据包为单位体现了交换机的交换功能路由器的包转发率，也称端口吞吐量，是指路由器在某端口进行数据包转发能力，单位通常使用pps来衡量&lt;/p&gt;
&lt;h2 id=&quot;背压：&quot;&gt;&lt;a href=&quot;#背压：&quot; class=&quot;headerlink&quot; title=&quot;背压：&quot;&gt;&lt;/a&gt;背压：&lt;/h2&gt;&lt;p&gt;当外出或输出端口出现阻塞现象时，被交换机用来通知发送端降低怎发送速度，以阻止外部数据源继续向拥塞端口传输帧的哪些方法&lt;/p&gt;
&lt;h2 id=&quot;路由震荡：&quot;&gt;&lt;a href=&quot;#路由震荡：&quot; class=&quot;headerlink&quot; title=&quot;路由震荡：&quot;&gt;&lt;/a&gt;路由震荡：&lt;/h2&gt;&lt;p&gt;又叫路由波动是指由于种种原因导致到某个目的网络的路由在短期内反复撤销和重现，路由震荡通常以每秒更新路由的数量来衡量，每秒更新路由的数量越大，说明路由震荡越严重，路由震荡是路由u稳定性的主要体现，对路由转发能力有很大的影响&lt;/p&gt;
&lt;h2 id=&quot;路由收敛；&quot;&gt;&lt;a href=&quot;#路由收敛；&quot; class=&quot;headerlink&quot; title=&quot;路由收敛；&quot;&gt;&lt;/a&gt;路由收敛；&lt;/h2&gt;&lt;p&gt;路由收敛：路由收敛是指同一个网络中，所有路由器对网络拓扑的认识到一致的过程，也被理解为路由变化通知到全网所用时间，收敛是评估路由协议的一个关键指标，路由协议的收敛速度越快，其运行性越好&lt;br&gt;服务质量：定义为网络在传输数据流时要求满足一系列服务请求，具体可量化为带宽，时延，吞吐量等性能指标&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;吞吐量&quot;&gt;&lt;a href=&quot;#吞吐量&quot; class=&quot;headerlink&quot; title=&quot;吞吐量&quot;&gt;&lt;/a&gt;吞吐量&lt;/h2&gt;&lt;p&gt;是指在没有丢包的情况下，路由设备能够转发的最大速率，对网络/设备/端口/虚电路，或者其他设备，单位时间内成功的传递数据的数量(以比特字节分组等测量&lt;/p&gt;
&lt;h2 id=&quot;延时：&quot;&gt;&lt;a href=&quot;#延时：&quot; class=&quot;headerlink&quot; title=&quot;延时：&quot;&gt;&lt;/a&gt;延时：&lt;/h2&gt;&lt;p&gt;是指包的第一个比特进入路由器到最后一个比特离开路由器的时间的间隔，叫做时延&lt;/p&gt;
&lt;h2 id=&quot;丢包率：&quot;&gt;&lt;a href=&quot;#丢包率：&quot; class=&quot;headerlink&quot; title=&quot;丢包率：&quot;&gt;&lt;/a&gt;丢包率：&lt;/h2&gt;&lt;p&gt;是指路由器在稳定负载状态下，由于缺乏资源而不能被网络设备转发的包占所有应该被转发的包的百分比，丢包率的衡量单位是以字节为计数单位，计算被落下的包字节数占所有应该被转发的包字节数的百分比。&lt;br&gt;
    
    </summary>
    
    
      <category term="路由器  编程" scheme="http://lxh5431.github.io/tags/%E8%B7%AF%E7%94%B1%E5%99%A8-%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>socket的几个要点</title>
    <link href="http://lxh5431.github.io/2016/07/03/socket%E7%9A%84%E5%87%A0%E4%B8%AA%E8%A6%81%E7%82%B9/"/>
    <id>http://lxh5431.github.io/2016/07/03/socket的几个要点/</id>
    <published>2016-07-03T11:21:10.000Z</published>
    <updated>2016-07-03T15:25:02.679Z</updated>
    
    <content type="html">&lt;h2 id=&quot;互联网地址：&quot;&gt;&lt;a href=&quot;#互联网地址：&quot; class=&quot;headerlink&quot; title=&quot;互联网地址：&quot;&gt;&lt;/a&gt;互联网地址：&lt;/h2&gt;&lt;p&gt;又称IP地址，是IP协议提供的一种统一的地址格式，它为互联网的每一个网络和每一台主机分配一个逻辑地址，以此来屏蔽物理地址差异。（从技术角度讲，每个互联网地址代表着一台主机与底层的通信信道 的连接，换句话说，就是一个网络接口）&lt;/p&gt;
&lt;h2 id=&quot;端口号：tcp协议和UDP协议使用的地址，叫做端口号，都是用来区分同一主机不同应用程序的&quot;&gt;&lt;a href=&quot;#端口号：tcp协议和UDP协议使用的地址，叫做端口号，都是用来区分同一主机不同应用程序的&quot; class=&quot;headerlink&quot; title=&quot;端口号：tcp协议和UDP协议使用的地址，叫做端口号，都是用来区分同一主机不同应用程序的&quot;&gt;&lt;/a&gt;端口号：tcp协议和UDP协议使用的地址，叫做端口号，都是用来区分同一主机不同应用程序的&lt;/h2&gt;&lt;p&gt;协议：相当于相互通信的程序达成的一种约定，它规定了分组报文的交换方式和它们包含的意义，一组协议规定了分组报文的结构以及怎样对报文所包含的信息进行解析&lt;br&gt;客户端：或者用户端，是指与服务器端相对应的，为客户提供本地服务的程序，一般安装在普通的客户端机子上&lt;br&gt;服务器：是指某些高性能的计算机，能通过网络，向外提供服务，相当于普通PC来说，稳定性，安全性，性能等放面都要求更高&lt;br&gt;TCP,udp业务流程是什么，差别在哪里，功能&lt;/p&gt;
&lt;h2 id=&quot;TCP客户端：&quot;&gt;&lt;a href=&quot;#TCP客户端：&quot; class=&quot;headerlink&quot; title=&quot;TCP客户端：&quot;&gt;&lt;/a&gt;TCP客户端：&lt;/h2&gt;&lt;p&gt;1，    创建一个socket实例：构造函数向指定的远程主机和端口建立一个tcp连接&lt;br&gt;通过套接字的输入输出流进行通信，一个socket连接实例，包括一个Intputstream和outputsteam,它们的用法同于其他的java输入输出流&lt;br&gt;2，    使用socket类中的close()方法关闭连接&lt;/p&gt;
&lt;h2 id=&quot;Tcp客户端&quot;&gt;&lt;a href=&quot;#Tcp客户端&quot; class=&quot;headerlink&quot; title=&quot;Tcp客户端&quot;&gt;&lt;/a&gt;Tcp客户端&lt;/h2&gt;&lt;p&gt;1，    创建一个serverSocket实例并制定本地端口，此套接字的功能是侦听该端口收到的连接。&lt;br&gt;2，    重复执行 a.调用serversocket的accept()方法以获取一个客户端的连接，基于新建路的客户端连接，创建一个socket实例，并有accept()访问 b.使用所返回的Inputstream和outputstream，与客户端连接通信 c.通信完毕后，使用socket类的close（）方法关闭改客户端的套接字连接&lt;/p&gt;
&lt;h2 id=&quot;Udp客户端：&quot;&gt;&lt;a href=&quot;#Udp客户端：&quot; class=&quot;headerlink&quot; title=&quot;Udp客户端：&quot;&gt;&lt;/a&gt;Udp客户端：&lt;/h2&gt;&lt;p&gt;3，    创建一个datagramsocket实例，对本地地址和端口进行设置&lt;br&gt;4，    使用datagramsocket类中的send() receive()方法来发送和接受datagramSocket实例进行通信&lt;br&gt;5，    通信完毕，使用datagramsocket类中的close（）来销毁该套接字&lt;br&gt;6，    服务器端:&lt;br&gt;7，    创建一个datagramsocket实例，对本地地址和端口进行设置此时服务器已经准备好从任何客户端接受数据报文&lt;br&gt;8，    使用receive()方法来接受一个datagramsocket实例，当receive()方法返回时，数据报文就包含了客户端的地址，这样我们便知回复信息该送到哪里&lt;br&gt;9，    使用datagramsock类中的send()和receive()方法来发送和接受datagramsocket实例，进行通信&lt;/p&gt;
&lt;h2 id=&quot;功能：tcp：java为tcp提供两个类socket和serverSocket类，一个类代表tcp的一端，一个tcp连接一条抽象的双向的通信，来那边分别有IP地址和端口号确定&quot;&gt;&lt;a href=&quot;#功能：tcp：java为tcp提供两个类socket和serverSocket类，一个类代表tcp的一端，一个tcp连接一条抽象的双向的通信，来那边分别有IP地址和端口号确定&quot; class=&quot;headerlink&quot; title=&quot;功能：tcp：java为tcp提供两个类socket和serverSocket类，一个类代表tcp的一端，一个tcp连接一条抽象的双向的通信，来那边分别有IP地址和端口号确定&quot;&gt;&lt;/a&gt;功能：tcp：java为tcp提供两个类socket和serverSocket类，一个类代表tcp的一端，一个tcp连接一条抽象的双向的通信，来那边分别有IP地址和端口号确定&lt;/h2&gt;&lt;p&gt;Udp在ip协议基础上添加另一层的地址&lt;br&gt;对数据传输过程中可能产生数据错误进行检测，并抛出已经选坏的数据&lt;/p&gt;
&lt;h2 id=&quot;差别：&quot;&gt;&lt;a href=&quot;#差别：&quot; class=&quot;headerlink&quot; title=&quot;差别：&quot;&gt;&lt;/a&gt;差别：&lt;/h2&gt;&lt;p&gt;Udp套接字在使用前不需要进行连接tcp协议和电话通信协议，而udp协议则与通信相似&lt;br&gt;另一个不同点是他们对信息的边界处理方式不同，udp套接字保留了边界信息&lt;br&gt;Udp协议所提供的端到端的数据传输协议，提供了一个可信赖的字节流服务，一个ycp/ip流套接字与代表了tcp连接的一端，数据报套接字使用udp协议，提供了一个尽力而为的数据报服务，应用程序可以通过它发送最长6500字节的个人信息&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;Java多线程线程池，线程和线程池之间的关系&lt;br&gt;Java多线程：为Thread类定义了一个run()方法的子类，在run()方法中包含要执行的任务并实例这个子类&lt;br&gt;定义一个runnable接口的类，并在run（）方法中包含要执行的任务，再次这个类的一个实例传递一个实例传递给thead的构造函数&lt;br&gt;线程和线程池的关系&lt;br&gt;每个线程都会消耗系统资源，随着线程数的添加，线程消耗越来越多的系统资源，可能添加客户端总服务时间，为了避免这个问题，与为这个链接创建一个新的线程不同，服务器在启动时创建一个由固定数量线程组成的线程池，当一个新的客户端连接请求传入服务器，他将给线程池中的一个线程处理，当该线程处理完这额客户端后，又返回线程池，并为下次处理做准备&lt;/p&gt;
&lt;p&gt;综述：阻塞与超时&lt;br&gt;阻塞：socket 的i/o调用可能会由多种原因而组建&lt;br&gt;1，    数据输入方法read（）receive()在无数据可读&lt;br&gt;2，    Tcp套接字的write方法在没有足够的空间缓存传输数据时可能阻塞&lt;br&gt;3，    serverSocket的accept()方法和socket的构造函数都会阻塞等待&lt;br&gt;4，    长信息往返时间高错误率的连接慢速的服务器。都可能导致需要很长的时间建立连接。&lt;br&gt;超时：&lt;br&gt;Socket很多的i/o操作如果不能立即完成就会阻塞等待，读操作将阻塞等待直到至少有一个字节可读，接收操作将阻塞等待直到成功建立连接，不幸的是阻塞的时间没有限制，可以为各种操作指定一个最大阻塞时间&lt;br&gt;getTimeout和setTimeout()方法分别用于获取和设置读接数据操作以及accept操作的最长阻塞时间，超时设置为0表示该操作永不过时，如果阻塞超时长，则抛出异常88&lt;/p&gt;
&lt;p&gt;单播和组播的区别多播和单播只要区别是地址的形式，一个单播地址指向一组接收者单发送者和多播数据报文设置了初始化的ttl值&lt;br&gt;多播和单播接受者唯一的重要区别是，多播接收者表明希望那个多播地址接收数据来加入多播组。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;互联网地址：&quot;&gt;&lt;a href=&quot;#互联网地址：&quot; class=&quot;headerlink&quot; title=&quot;互联网地址：&quot;&gt;&lt;/a&gt;互联网地址：&lt;/h2&gt;&lt;p&gt;又称IP地址，是IP协议提供的一种统一的地址格式，它为互联网的每一个网络和每一台主机分配一个逻辑地址，以此来屏蔽物理地址差异。（从技术角度讲，每个互联网地址代表着一台主机与底层的通信信道 的连接，换句话说，就是一个网络接口）&lt;/p&gt;
&lt;h2 id=&quot;端口号：tcp协议和UDP协议使用的地址，叫做端口号，都是用来区分同一主机不同应用程序的&quot;&gt;&lt;a href=&quot;#端口号：tcp协议和UDP协议使用的地址，叫做端口号，都是用来区分同一主机不同应用程序的&quot; class=&quot;headerlink&quot; title=&quot;端口号：tcp协议和UDP协议使用的地址，叫做端口号，都是用来区分同一主机不同应用程序的&quot;&gt;&lt;/a&gt;端口号：tcp协议和UDP协议使用的地址，叫做端口号，都是用来区分同一主机不同应用程序的&lt;/h2&gt;&lt;p&gt;协议：相当于相互通信的程序达成的一种约定，它规定了分组报文的交换方式和它们包含的意义，一组协议规定了分组报文的结构以及怎样对报文所包含的信息进行解析&lt;br&gt;客户端：或者用户端，是指与服务器端相对应的，为客户提供本地服务的程序，一般安装在普通的客户端机子上&lt;br&gt;服务器：是指某些高性能的计算机，能通过网络，向外提供服务，相当于普通PC来说，稳定性，安全性，性能等放面都要求更高&lt;br&gt;TCP,udp业务流程是什么，差别在哪里，功能&lt;/p&gt;
&lt;h2 id=&quot;TCP客户端：&quot;&gt;&lt;a href=&quot;#TCP客户端：&quot; class=&quot;headerlink&quot; title=&quot;TCP客户端：&quot;&gt;&lt;/a&gt;TCP客户端：&lt;/h2&gt;&lt;p&gt;1，    创建一个socket实例：构造函数向指定的远程主机和端口建立一个tcp连接&lt;br&gt;通过套接字的输入输出流进行通信，一个socket连接实例，包括一个Intputstream和outputsteam,它们的用法同于其他的java输入输出流&lt;br&gt;2，    使用socket类中的close()方法关闭连接&lt;/p&gt;
&lt;h2 id=&quot;Tcp客户端&quot;&gt;&lt;a href=&quot;#Tcp客户端&quot; class=&quot;headerlink&quot; title=&quot;Tcp客户端&quot;&gt;&lt;/a&gt;Tcp客户端&lt;/h2&gt;&lt;p&gt;1，    创建一个serverSocket实例并制定本地端口，此套接字的功能是侦听该端口收到的连接。&lt;br&gt;2，    重复执行 a.调用serversocket的accept()方法以获取一个客户端的连接，基于新建路的客户端连接，创建一个socket实例，并有accept()访问 b.使用所返回的Inputstream和outputstream，与客户端连接通信 c.通信完毕后，使用socket类的close（）方法关闭改客户端的套接字连接&lt;/p&gt;
&lt;h2 id=&quot;Udp客户端：&quot;&gt;&lt;a href=&quot;#Udp客户端：&quot; class=&quot;headerlink&quot; title=&quot;Udp客户端：&quot;&gt;&lt;/a&gt;Udp客户端：&lt;/h2&gt;&lt;p&gt;3，    创建一个datagramsocket实例，对本地地址和端口进行设置&lt;br&gt;4，    使用datagramsocket类中的send() receive()方法来发送和接受datagramSocket实例进行通信&lt;br&gt;5，    通信完毕，使用datagramsocket类中的close（）来销毁该套接字&lt;br&gt;6，    服务器端:&lt;br&gt;7，    创建一个datagramsocket实例，对本地地址和端口进行设置此时服务器已经准备好从任何客户端接受数据报文&lt;br&gt;8，    使用receive()方法来接受一个datagramsocket实例，当receive()方法返回时，数据报文就包含了客户端的地址，这样我们便知回复信息该送到哪里&lt;br&gt;9，    使用datagramsock类中的send()和receive()方法来发送和接受datagramsocket实例，进行通信&lt;/p&gt;
&lt;h2 id=&quot;功能：tcp：java为tcp提供两个类socket和serverSocket类，一个类代表tcp的一端，一个tcp连接一条抽象的双向的通信，来那边分别有IP地址和端口号确定&quot;&gt;&lt;a href=&quot;#功能：tcp：java为tcp提供两个类socket和serverSocket类，一个类代表tcp的一端，一个tcp连接一条抽象的双向的通信，来那边分别有IP地址和端口号确定&quot; class=&quot;headerlink&quot; title=&quot;功能：tcp：java为tcp提供两个类socket和serverSocket类，一个类代表tcp的一端，一个tcp连接一条抽象的双向的通信，来那边分别有IP地址和端口号确定&quot;&gt;&lt;/a&gt;功能：tcp：java为tcp提供两个类socket和serverSocket类，一个类代表tcp的一端，一个tcp连接一条抽象的双向的通信，来那边分别有IP地址和端口号确定&lt;/h2&gt;&lt;p&gt;Udp在ip协议基础上添加另一层的地址&lt;br&gt;对数据传输过程中可能产生数据错误进行检测，并抛出已经选坏的数据&lt;/p&gt;
&lt;h2 id=&quot;差别：&quot;&gt;&lt;a href=&quot;#差别：&quot; class=&quot;headerlink&quot; title=&quot;差别：&quot;&gt;&lt;/a&gt;差别：&lt;/h2&gt;&lt;p&gt;Udp套接字在使用前不需要进行连接tcp协议和电话通信协议，而udp协议则与通信相似&lt;br&gt;另一个不同点是他们对信息的边界处理方式不同，udp套接字保留了边界信息&lt;br&gt;Udp协议所提供的端到端的数据传输协议，提供了一个可信赖的字节流服务，一个ycp/ip流套接字与代表了tcp连接的一端，数据报套接字使用udp协议，提供了一个尽力而为的数据报服务，应用程序可以通过它发送最长6500字节的个人信息&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://lxh5431.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="编程" scheme="http://lxh5431.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>岁月走不过的年轮</title>
    <link href="http://lxh5431.github.io/2016/07/02/%E5%B2%81%E6%9C%88%E8%B5%B0%E4%B8%8D%E8%BF%87%E7%9A%84%E5%B9%B4%E8%BD%AE/"/>
    <id>http://lxh5431.github.io/2016/07/02/岁月走不过的年轮/</id>
    <published>2016-07-02T15:45:05.000Z</published>
    <updated>2016-07-02T15:54:10.247Z</updated>
    
    <content type="html">&lt;h2 id=&quot;我承认我不曾历经沧桑&quot;&gt;&lt;a href=&quot;#我承认我不曾历经沧桑&quot; class=&quot;headerlink&quot; title=&quot;我承认我不曾历经沧桑&quot;&gt;&lt;/a&gt;我承认我不曾历经沧桑&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;我们缺失的不仅仅是岁月本身，还有对这个时代的观察与入微&lt;/strong&gt;&lt;br&gt;最近总在看到有些人在整理着青春的脚印，把过去的照片一张一张的整理，每一个瞬间都代表着一段童年的记忆，当过去的岁月都可以放在电影院那挥不去的依然是过往的思考，从出生的那一刻，正是改革开放的起步阶段，那时候充满着机遇，充满着挑战，在意不在意之间就能书写自己不一样的人生，下一代的我们就是在这种环境下所成长，阅历，感悟这世界的日新月异，也许你身边的同学唱的一首歌就能推测出流行音乐的最前线和风格的改变，cd的时代记录着我们所经历的岁月，刻进了光盘的线条里。很喜欢听过去的CD,那些老歌，就是老的故事，传唱的不仅是歌词的伤感，还有我们在世纪交接那段探索，从小学时候的教书育人，到现在的九年义务教育，九零后的我们很多都在改革，改革的不仅是形式，还有对过去的创新，我们所经历的一切都是有价值的，即使是最后成为时代的一个小的印记。我们依然记录着那铮铮的岁月。&lt;br&gt;&lt;img src=&quot;http://o94r16s1l.bkt.clouddn.com/%E6%B7%B1%E7%A9%BA.jpg&quot; alt=&quot;星空&quot;&gt;&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;这就是我最近所读的一本书的感悟吧，也许我还没曾历经沧桑，毕竟我站在这个大学校园的门口，看下过去走过的路，塑造了什么样的生活，构造了什么样的性格，培育了什么样的性情，我只是默默的拿起《我承认未曾历经沧桑》，读一本书，不仅为了更好的了解作者和主人公的本身，而是我从这书中看到了什么，读到了什么。读到的是作者所经历的一生沧桑的回忆，却是在审视我所经历的那些岁月，书中描写了从作者小学到大学的所见所闻所感，用&lt;br&gt;凝练的笔触给我们书写了改革三十年来的变化，用第一视觉的方式给我们描绘了刚开始富起来的人的心燥和后代不作为的性格，更精确的提出了时代的一些我们不可或缺的新视觉，贫富和知识，城市和乡村的教育的不平衡，以及一个寒门弟子为了改变命运必须付出别人不同的汗水与智慧。个人的情感和国家的苦难结合，书写了三十年的不一样的经历，电子产品的演进，带来了精神的富裕，也带来了贪欲与堕落，在游戏和学习中纠结的那一刻，只有跳出本来的圈子，才能看到不一样的视觉，我不知道，也无法想象作者是如何去面对，但是她的笔触道出了对岁月的反抗，对自己精神的一次洗礼和挣扎，我不去想未来如何，既然选择了远方，便只顾风雨兼程。&lt;br&gt;那句”你妈妈叫你回家吃饭”道尽了网络游戏和父母心的斗争是多么的让人揪心，事物本身并没有错，可是我们在成长的过程总是在经历中成长，重男轻女的农村还是那么的普遍，现在的政策在改变，人的思想和行为也在转变，最近的直播平台却折射了一个人成长的痕迹，也许我们都是在和生活的困苦在做斗争，可是我觉得本身我们在和自己斗争一个社会的进步总是顺从大多数，每个人的自由都应该建立在自己的权利范围之内，出去上网的叛逆是不是因为我们缺少的沟通，我们需要沟通的本体，而不是仅仅为了别人的而去放弃。&lt;br&gt;2003年非典的时候我去上学路上居然被一个乞丐所吓了，那一年人心惶惶，可是我却知道原来无知是会被很多东西所抛弃的，读书才能让我继续坚强，总觉得很多人都在得过且过，我总是感觉最笨的一个，然后我付出更多的努力，别人总是会不理解我，然后我才知道，资源的不平衡在造就着不一样的性格，不一样的人，电视剧放的都是逆袭的境遇，但是当你连最基本的知识你都没有，又何必去继续奋斗，你已经失去了继续下去的资格，跌跌撞撞到达的大学，缺少游戏的天堂，性格的养成总在一刻去决定了人际的大小和对着世界的看法，很久以前想过改造世界，可是你首先要懂得现在的世界咋样，读万卷书不如走万里路，从南到北的观察着，城市的交通在每一个地理位置都是那么的让人揪心，我们不仅需要做对一座城市的定位，还有观察，人群的培育，&lt;em&gt;我站在路口，我要走向的不是历史的见证，而是对一座城的思考。走过的路才能去发表自己的看法，记录并不是目的，只是为了机械的生活的一个反抗。&lt;/em&gt;&lt;br&gt;从初中的检讨书里保证不去上网到半夜起来去淘菜，都在演变着岁月的无情，让一些东西在侵蚀着我们的思想，原来的游戏机已经被岁月的风吹散，网吧的日益渐落，都在叹息着时代的变迁。新的改革，新的方向，指引的不仅是未来还有过去，天涯的没落，猫扑的沉寂，贴吧的乱想都在述说着网络已经是变化莫测，电子的出现也许是在改变着人们的生活方式，也改变着我们的思考方式。每天的动态也许只是让别人知道我们还在，可是这不就是一个书香隐匿的痕迹，街边 书店已经破旧的书籍，再也散发不了智慧的灵光，何不再去图书馆拾起以前未看完的书籍去沉淀自己呢，文艺本没有错，那只是一个人对外表达的一种方式，就像画画一样，也许你只是不懂得我们在固守的是什么。也许是性情，也许是不甘平凡的心。&lt;br&gt;走到了校门的过道，我开始即将走向社会，我知道这才是我的笔触的开始的地方，不面对前方，如何能够巩固自己坚守的信仰，我会在下一个路口，调整我的方向，即使我还没有财富，但我想到的是如何让我的精神富饶，让我的身体健壮，保持一个平常心面对生活的每一件事。当前路已是一片漆黑，请仰望天空，黑夜给了我黑色的眼睛，我却用它寻找光明。合上这本书，我的心里却又一片光明。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;我承认我不曾历经沧桑&quot;&gt;&lt;a href=&quot;#我承认我不曾历经沧桑&quot; class=&quot;headerlink&quot; title=&quot;我承认我不曾历经沧桑&quot;&gt;&lt;/a&gt;我承认我不曾历经沧桑&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;我们缺失的不仅仅是岁月本身，还有对这个时代的观察与入微&lt;/strong&gt;&lt;br&gt;最近总在看到有些人在整理着青春的脚印，把过去的照片一张一张的整理，每一个瞬间都代表着一段童年的记忆，当过去的岁月都可以放在电影院那挥不去的依然是过往的思考，从出生的那一刻，正是改革开放的起步阶段，那时候充满着机遇，充满着挑战，在意不在意之间就能书写自己不一样的人生，下一代的我们就是在这种环境下所成长，阅历，感悟这世界的日新月异，也许你身边的同学唱的一首歌就能推测出流行音乐的最前线和风格的改变，cd的时代记录着我们所经历的岁月，刻进了光盘的线条里。很喜欢听过去的CD,那些老歌，就是老的故事，传唱的不仅是歌词的伤感，还有我们在世纪交接那段探索，从小学时候的教书育人，到现在的九年义务教育，九零后的我们很多都在改革，改革的不仅是形式，还有对过去的创新，我们所经历的一切都是有价值的，即使是最后成为时代的一个小的印记。我们依然记录着那铮铮的岁月。&lt;br&gt;&lt;img src=&quot;http://o94r16s1l.bkt.clouddn.com/%E6%B7%B1%E7%A9%BA.jpg&quot; alt=&quot;星空&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="http://lxh5431.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>我承认我未成历经沧桑</title>
    <link href="http://lxh5431.github.io/2016/07/02/%E6%88%91%E6%89%BF%E8%AE%A4%E6%88%91%E6%9B%BE%E6%88%90%E5%8E%86%E7%BB%8F%E6%B2%A7%E6%A1%91/"/>
    <id>http://lxh5431.github.io/2016/07/02/我承认我曾成历经沧桑/</id>
    <published>2016-07-01T16:35:22.000Z</published>
    <updated>2016-07-01T17:22:18.245Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;http://o94r16s1l.bkt.clouddn.com/%E9%A3%8E%E6%99%AF.jpg&quot; alt=&quot;最美的不是风景&quot;&gt;&lt;/p&gt;
&lt;p&gt;读蒋方舟的未曾历经沧桑的书籍，书中描写了她生活的所见所闻所想，用低吟的述说着发生在身边的无力去改变的一些事，这就是这个时代的一个印证，用不一样的视觉还原了80的童年和穷苦大众和农村一些根深蒂固的思想，这在影响着作者的生活和思想，培育了一个懂得去生活，懂得去实践，懂得去发现的小女子形象，这正是对一个时代额环境的一种审判。当我们的岁月已流失，剩下的却是对这生活的地域的一些感想。我想思想永在。&lt;em&gt;我的心中也是被她直白的语言和凝练的笔触所触发，我所生活的生活，我所接触的世界，我所想到的境遇，都在这本书中引起我的共鸣，我不知道别人的记忆有没有依然存在这些城市的一些见证，可是我觉得在我血液里是抹不掉的伤，当一个机制，一个教育已经定型，很多人都在这里挣扎，走不出来，一直在跟着父辈的脚印和教育&lt;/em&gt;，我觉得这就是失败的，也许这就是视野的重要性，一个人在安逆的环境中总是会缺少斗志，最后泯然众人，即使你的一生无悔，但是我想说当你为了生活而生活的时候我就知道人生的意义已经驱散，我不想去重蹈覆辙，我想拥有自己的自由，人生的自由，思想的自由，我不想面对的不是未来，而是不确定的生活，或者说已经是似水的生活，那样也许我疯的时候我也会继续寻找，沉浸在我的悲伤中，当一个人真正影响你的时候，记得想下一个的回忆，我想有时当你不这么想的时候你就会有不一样的思想，面对晴天，面对你。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;‘’’思bash&lt;br&gt;我们做的每一件事，每一个问题，都应该带着批判的井绳，这样我们才能够找到问题的所在&lt;br&gt;‘’’&lt;/p&gt;
&lt;h2 id=&quot;关于路途&quot;&gt;&lt;a href=&quot;#关于路途&quot; class=&quot;headerlink&quot; title=&quot;关于路途&quot;&gt;&lt;/a&gt;关于路途&lt;/h2&gt;&lt;p&gt;每次的星空下的对话就是对自己的一个交代，那时候仰着头去面对天空，还有星星与我相约，现在的黑暗该如何去找到黎明，找到曙光，真的需要一个更加有力的力矩去搅动没接触的领域，我知道自己的力量有限，所以我需要有自己的技能去描绘这个世界不是素描，不是音符，我希望是文字，用我的笔触去整理着世界，去开阔一个属于我的精神家园，可是我更想说的是编程，把世界给抽象，就像小说里面的天马行空，还是对未来的憧憬，我都目标是都太过于广阔，还是我需要脚踏实地呢，我很久以前的规划，还是我的一厢情愿的去实现，而你没有考虑过这个目标的可行性呢，我知道的毕竟还是有线，我想知道的也还是很有局限性，所以我知道我要一个搅动点，一个方向，一个继续下去的理由。&lt;/p&gt;
&lt;h2 id=&quot;关于批判&quot;&gt;&lt;a href=&quot;#关于批判&quot; class=&quot;headerlink&quot; title=&quot;关于批判&quot;&gt;&lt;/a&gt;关于批判&lt;/h2&gt;&lt;p&gt;不知道一个人有对坏，就是影响别人，而不顾自己的后果，很久以前我就像这种性格的养成真的是一个家庭所影响的吗，对别人的伤害都无动于衷，我不知道这种认为和我会遇到，还是我过于年轻，然后未经沧桑，对这种对自己不负责的人的一种深深的厌恶呢，也许是嫉妒别人的，也许这就是这社会的制度的一种制约吧，穷的人更难翻身，富裕的人更有话语权，但是我真的担心道德的约束到达能够继续约束这些人吗，当人越来越多，更好的教育，还是更加优越的成就感才能拯救他们，有时候这就是我该去批评的吧，每种性格都没有错，可是一错再错就是一种错误，当你的心一直自我满足的时候，我想你的未来就这样。很想去用不同的视觉去记载这件事，这些人，这些陌生人，也许这就是我的修行吧，修的是心还有对未来的一种思想的传承吧&lt;/p&gt;
&lt;h2 id=&quot;v关于阅历&quot;&gt;&lt;a href=&quot;#v关于阅历&quot; class=&quot;headerlink&quot; title=&quot;v关于阅历&quot;&gt;&lt;/a&gt;v关于阅历&lt;/h2&gt;&lt;p&gt;走过很多山，过过很多河，来到过海边，去看过森林的神秘，看过的小说总爱幻想，也许下一个主角就是我，被骗过，被迷茫过，被中伤过，我知道这都不是阅历，阅历是岁月的沉淀，是生活的总结，是对自己的一种审判，而不是去批判别人，当我有一天又想到我已经尽力把一件不可能的事已经近于完美的实现的时候，我想我已经对这个世界有一定的阅历，而不是一直在总结别人的经验，总结别人的人生，为了什么，未来了生活，为了未来，未来又是为了啥，尘土的区别，不是去发现就剋解决的，还需要的是勇气和无所畏惧，我希望活的精彩，活的自在。活得洒脱，我就是我，我的一生交给了梦想，我就是我，不一样的烟火，我想烟花不会太过于美丽，但是我想着就是活下去的意义。信仰永不过期，我一直在这里，等着我的思想没有越界。我承认我未曾历经沧桑&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://o94r16s1l.bkt.clouddn.com/%E9%A3%8E%E6%99%AF.jpg&quot; alt=&quot;最美的不是风景&quot;&gt;&lt;/p&gt;
&lt;p&gt;读蒋方舟的未曾历经沧桑的书籍，书中描写了她生活的所见所闻所想，用低吟的述说着发生在身边的无力去改变的一些事，这就是这个时代的一个印证，用不一样的视觉还原了80的童年和穷苦大众和农村一些根深蒂固的思想，这在影响着作者的生活和思想，培育了一个懂得去生活，懂得去实践，懂得去发现的小女子形象，这正是对一个时代额环境的一种审判。当我们的岁月已流失，剩下的却是对这生活的地域的一些感想。我想思想永在。&lt;em&gt;我的心中也是被她直白的语言和凝练的笔触所触发，我所生活的生活，我所接触的世界，我所想到的境遇，都在这本书中引起我的共鸣，我不知道别人的记忆有没有依然存在这些城市的一些见证，可是我觉得在我血液里是抹不掉的伤，当一个机制，一个教育已经定型，很多人都在这里挣扎，走不出来，一直在跟着父辈的脚印和教育&lt;/em&gt;，我觉得这就是失败的，也许这就是视野的重要性，一个人在安逆的环境中总是会缺少斗志，最后泯然众人，即使你的一生无悔，但是我想说当你为了生活而生活的时候我就知道人生的意义已经驱散，我不想去重蹈覆辙，我想拥有自己的自由，人生的自由，思想的自由，我不想面对的不是未来，而是不确定的生活，或者说已经是似水的生活，那样也许我疯的时候我也会继续寻找，沉浸在我的悲伤中，当一个人真正影响你的时候，记得想下一个的回忆，我想有时当你不这么想的时候你就会有不一样的思想，面对晴天，面对你。&lt;br&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="http://lxh5431.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>简单的tcp应用</title>
    <link href="http://lxh5431.github.io/2016/07/01/%E7%AE%80%E5%8D%95%E7%9A%84tcp%E5%BA%94%E7%94%A8/"/>
    <id>http://lxh5431.github.io/2016/07/01/简单的tcp应用/</id>
    <published>2016-07-01T14:41:39.000Z</published>
    <updated>2016-07-06T09:50:26.239Z</updated>
    
    <content type="html">&lt;p&gt;&lt;strong&gt;tcp的定义&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;TCP/IP协议族按照层次由上到下，层层包装。&lt;/p&gt;
&lt;h5 id=&quot;应用层&quot;&gt;&lt;a href=&quot;#应用层&quot; class=&quot;headerlink&quot; title=&quot;应用层&quot;&gt;&lt;/a&gt;应用层&lt;/h5&gt;&lt;p&gt;这里面有http，ftp,等等我们熟悉的协议。&lt;/p&gt;
&lt;h5 id=&quot;传输层&quot;&gt;&lt;a href=&quot;#传输层&quot; class=&quot;headerlink&quot; title=&quot;传输层&quot;&gt;&lt;/a&gt;传输层&lt;/h5&gt;&lt;p&gt;著名的TCP和UDP协议就在这个层次&lt;/p&gt;
&lt;h5 id=&quot;网络层&quot;&gt;&lt;a href=&quot;#网络层&quot; class=&quot;headerlink&quot; title=&quot;网络层&quot;&gt;&lt;/a&gt;网络层&lt;/h5&gt;&lt;p&gt;IP协议,它负责对数据加上IP地址和其他的数据（后面会讲到）以确定传输的目标。&lt;/p&gt;
&lt;h5 id=&quot;数据链路层&quot;&gt;&lt;a href=&quot;#数据链路层&quot; class=&quot;headerlink&quot; title=&quot;数据链路层&quot;&gt;&lt;/a&gt;数据链路层&lt;/h5&gt;&lt;p&gt;这个层次为待传送的数据加入一个以太网协议头，并进行CRC编码，为最后的数据传输做准备。&lt;br&gt;发送协议的主机从上自下将数据按照协议封装，而接收数据的主机则按照协议从得到的数据包解开，最后拿到需要的数据。这种结构非常有栈的味道，所以某些文章也把tcp/ip协议族称为tcp/ip协议栈。&lt;br&gt;而我现在要学习的就是tcp的简单实用&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;在tcp的编程有两个关键字Socket和serverSocket,实现了基本的双向传输，下面是简单的例子让我们来简单的理解tcp的通信&lt;br&gt;&lt;img src=&quot;http://o94r16s1l.bkt.clouddn.com/%E5%A5%97%E6%8E%A5%E5%AD%97%E5%92%8C%E5%8D%8F%E8%AE%AE%E7%9A%84%E5%85%B3%E7%B3%BB.png&quot; alt=&quot;简单的协议通信&quot;&gt;&lt;br&gt;首先创建tcp套接字,并制定服务器和端口号&lt;br&gt;获取套接字的输入输出流&lt;br&gt;发送字符串并回馈给服务器，从服务器接受回馈信息，&lt;br&gt;打印回馈的字符串&lt;br&gt;关闭套接字&lt;br&gt;服务器：&lt;br&gt;创建服务器套接字&lt;br&gt;永久迭代，迭代处理心连接请求&lt;br&gt;报告已连接的客户端&lt;br&gt;获取输入输出流&lt;br&gt;接收数据并复制数据，直到客户端关闭&lt;br&gt;如何让两个不同的终端通信，最简单的就是协议，按照什么规则去连接传输解码，这样才能够利于维护和扩展&lt;br&gt;java客户端&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;44&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;45&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;46&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;47&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;48&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;49&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; tcpclient;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.io.IOException;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.io.InputStream;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.io.OutputStream;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.net.Socket;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.net.SocketException;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TCPEchoClient&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	 *&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	 * &lt;span class=&quot;doctag&quot;&gt;@author&lt;/span&gt; lxh&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	 * &lt;span class=&quot;doctag&quot;&gt;@param&lt;/span&gt; args&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	 * &lt;span class=&quot;doctag&quot;&gt;@throws&lt;/span&gt; IOException&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	 * &lt;span class=&quot;doctag&quot;&gt;@version&lt;/span&gt; 1.0&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	 * &lt;span class=&quot;doctag&quot;&gt;@throws&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	 */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt;  IOException &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//判断输入的参数&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;((args.length&amp;lt;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)||(args.length&amp;gt;&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; IllegalArgumentException(&lt;span class=&quot;string&quot;&gt;&quot;Parameter(s):&amp;lt;Server&amp;gt;&amp;lt;word&amp;gt;[&amp;lt;Port&amp;gt;]&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//转换为数组，&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	String server=args[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;[] data=args[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;].getBytes();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; servPort=(args.length==&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;)?Integer.parseInt(args[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;]):&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	Socket socket=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Socket(server,servPort);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;Connected to server...sending echo string&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//获取套接字的输入输出流&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	InputStream in=socket.getInputStream();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	OutputStream out=socket.getOutputStream();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	out.write(data);&lt;span class=&quot;comment&quot;&gt;//读写数据&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; totalBytesRcvd=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; bytesRcvd;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//接受服务器返回的数据&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(totalBytesRcvd&amp;lt;data.length)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;((bytesRcvd=in.read(data, totalBytesRcvd, data.length-totalBytesRcvd))==-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; SocketException(&lt;span class=&quot;string&quot;&gt;&quot;Connection closed permaturely&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		totalBytesRcvd+=bytesRcvd;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;Received:&quot;&lt;/span&gt;+&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; String(data));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	socket.close();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;java的服务器端&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; tcpclient;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.io.IOException;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.io.InputStream;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.io.OutputStream;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.net.ServerSocket;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.net.Socket;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.net.SocketAddress;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TCPEchoServer&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; BUFSIZE = &lt;span class=&quot;number&quot;&gt;32&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; IOException &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(args.length!=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; IllegalArgumentException(&lt;span class=&quot;string&quot;&gt;&quot;Parameter(s):&amp;lt;Port&amp;gt;&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; servPort=Integer.parseInt(args[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		ServerSocket servsock=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ServerSocket(servPort);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; recvMsgSize;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;[] receiveBuf=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;[BUFSIZE];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			Socket clntSock=servsock.accept();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			SocketAddress clientAddress=clntSock.getRemoteSocketAddress();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;Handing clinet at&quot;&lt;/span&gt;+clientAddress);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		InputStream in=clntSock.getInputStream();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		OutputStream out=clntSock.getOutputStream();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;((recvMsgSize=in.read(receiveBuf))!=-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			out.write(receiveBuf,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,recvMsgSize);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		clntSock.close();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;tcp的定义&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;TCP/IP协议族按照层次由上到下，层层包装。&lt;/p&gt;
&lt;h5 id=&quot;应用层&quot;&gt;&lt;a href=&quot;#应用层&quot; class=&quot;headerlink&quot; title=&quot;应用层&quot;&gt;&lt;/a&gt;应用层&lt;/h5&gt;&lt;p&gt;这里面有http，ftp,等等我们熟悉的协议。&lt;/p&gt;
&lt;h5 id=&quot;传输层&quot;&gt;&lt;a href=&quot;#传输层&quot; class=&quot;headerlink&quot; title=&quot;传输层&quot;&gt;&lt;/a&gt;传输层&lt;/h5&gt;&lt;p&gt;著名的TCP和UDP协议就在这个层次&lt;/p&gt;
&lt;h5 id=&quot;网络层&quot;&gt;&lt;a href=&quot;#网络层&quot; class=&quot;headerlink&quot; title=&quot;网络层&quot;&gt;&lt;/a&gt;网络层&lt;/h5&gt;&lt;p&gt;IP协议,它负责对数据加上IP地址和其他的数据（后面会讲到）以确定传输的目标。&lt;/p&gt;
&lt;h5 id=&quot;数据链路层&quot;&gt;&lt;a href=&quot;#数据链路层&quot; class=&quot;headerlink&quot; title=&quot;数据链路层&quot;&gt;&lt;/a&gt;数据链路层&lt;/h5&gt;&lt;p&gt;这个层次为待传送的数据加入一个以太网协议头，并进行CRC编码，为最后的数据传输做准备。&lt;br&gt;发送协议的主机从上自下将数据按照协议封装，而接收数据的主机则按照协议从得到的数据包解开，最后拿到需要的数据。这种结构非常有栈的味道，所以某些文章也把tcp/ip协议族称为tcp/ip协议栈。&lt;br&gt;而我现在要学习的就是tcp的简单实用&lt;br&gt;
    
    </summary>
    
      <category term="tcp" scheme="http://lxh5431.github.io/categories/tcp/"/>
    
    
      <category term="编程" scheme="http://lxh5431.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>简单的socket应用</title>
    <link href="http://lxh5431.github.io/2016/07/01/%E7%AE%80%E5%8D%95%E7%9A%84socket%E5%BA%94%E7%94%A8/"/>
    <id>http://lxh5431.github.io/2016/07/01/简单的socket应用/</id>
    <published>2016-07-01T13:44:13.000Z</published>
    <updated>2016-07-06T09:50:26.230Z</updated>
    
    <content type="html">&lt;p&gt;&lt;strong&gt;socket的定义&lt;/strong&gt;&lt;br&gt;&lt;em&gt;socket是在应用层和传输层之间的一个抽象层，它把TCP/IP层复杂的操作抽象为几个简单的接口供应用层调用已实现进程在网络中通信。&lt;/em&gt;&lt;br&gt;socket要理解的几点知识点&lt;br&gt;&lt;strong&gt;tcp/udp的传输&lt;/strong&gt;&lt;br&gt;&lt;img src=&quot;http://o94r16s1l.bkt.clouddn.com/%E5%8D%8F%E8%AE%AE.png&quot; alt=&quot;tcpudp传输图&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://o94r16s1l.bkt.clouddn.com/tcpip%E7%BD%91%E7%BB%9C.png&quot; alt=&quot;tcpip网络交互图&quot;&gt;&lt;br&gt;&lt;strong&gt;进程的通信&lt;/strong&gt;&lt;br&gt;我们知道两个进程如果需要进行通讯最基本的一个前提能能够唯一的标示一个进程，在本地进程通讯中我们可以使用PID来唯一标示一个进程，但PID只在本地唯一，网络中的两个进程PID冲突几率很大，这时候我们需要另辟它径了，我们知道IP层的ip地址可以唯一标示主机，而TCP层协议和端口号可以唯一标示主机的一个进程，这样我们可以利用ip地址＋协议＋端口号唯一标示网络中的一个进程。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;基本套接字的使用&lt;br&gt;&lt;img src=&quot;http://o94r16s1l.bkt.clouddn.com/%E5%A5%97%E6%8E%A5%E5%AD%97%E5%92%8C%E5%8D%8F%E8%AE%AE%E7%9A%84%E5%85%B3%E7%B3%BB.png&quot; alt=&quot;套接字额和协议的关系&quot;&gt;&lt;br&gt;1.获取主机的网络接口列表&lt;br&gt;2.空列表检查&lt;br&gt;3.获取并打印出列表的每个接口的地址&lt;br&gt;4.打印接口名&lt;br&gt;5.获取与接口相关联的地址&lt;br&gt;6.空列表检测&lt;br&gt;7.列表的迭代&lt;br&gt;8.捕获异常&lt;/p&gt;
&lt;p&gt;关于socket的练习，要着重与实践才能够体会到这个过程使用了那些对象，如何设计和传输数据的，如何去封装和序列化，套接字的处理等都是我接下来要总结和学习的地方&lt;/p&gt;
&lt;p&gt; java tcp/ip soket 编程这本书比较详尽地介绍socket的知识。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;socket的定义&lt;/strong&gt;&lt;br&gt;&lt;em&gt;socket是在应用层和传输层之间的一个抽象层，它把TCP/IP层复杂的操作抽象为几个简单的接口供应用层调用已实现进程在网络中通信。&lt;/em&gt;&lt;br&gt;socket要理解的几点知识点&lt;br&gt;&lt;strong&gt;tcp/udp的传输&lt;/strong&gt;&lt;br&gt;&lt;img src=&quot;http://o94r16s1l.bkt.clouddn.com/%E5%8D%8F%E8%AE%AE.png&quot; alt=&quot;tcpudp传输图&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://o94r16s1l.bkt.clouddn.com/tcpip%E7%BD%91%E7%BB%9C.png&quot; alt=&quot;tcpip网络交互图&quot;&gt;&lt;br&gt;&lt;strong&gt;进程的通信&lt;/strong&gt;&lt;br&gt;我们知道两个进程如果需要进行通讯最基本的一个前提能能够唯一的标示一个进程，在本地进程通讯中我们可以使用PID来唯一标示一个进程，但PID只在本地唯一，网络中的两个进程PID冲突几率很大，这时候我们需要另辟它径了，我们知道IP层的ip地址可以唯一标示主机，而TCP层协议和端口号可以唯一标示主机的一个进程，这样我们可以利用ip地址＋协议＋端口号唯一标示网络中的一个进程。&lt;br&gt;
    
    </summary>
    
      <category term="socket" scheme="http://lxh5431.github.io/categories/socket/"/>
    
    
      <category term="编程" scheme="http://lxh5431.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>面向对象的三种关系</title>
    <link href="http://lxh5431.github.io/2016/07/01/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E4%B8%89%E7%A7%8D%E5%85%B3%E7%B3%BB/"/>
    <id>http://lxh5431.github.io/2016/07/01/面向对象的三种关系/</id>
    <published>2016-07-01T07:04:35.000Z</published>
    <updated>2016-07-06T09:50:26.251Z</updated>
    
    <content type="html">&lt;p&gt;[TOC]&lt;br&gt;面向对象的三种关系&lt;/p&gt;
&lt;h2 id=&quot;is-a，顾名思义，是一个，代表继承关系。&quot;&gt;&lt;a href=&quot;#is-a，顾名思义，是一个，代表继承关系。&quot; class=&quot;headerlink&quot; title=&quot;is-a，顾名思义，是一个，代表继承关系。&quot;&gt;&lt;/a&gt;is-a，顾名思义，是一个，代表继承关系。&lt;/h2&gt;&lt;p&gt;一个类中包含了另一个类的所有属性和方法&lt;br&gt;比如正方形和长方形继承于图形，可以继承图形的边长的属性和周长和面积的方法如图所示&lt;br&gt;&lt;img src=&quot;http://o94r16s1l.bkt.clouddn.com/xx%20is.jpg&quot; alt=&quot;is-a&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;has-a，顾名思义，有一个，代表从属关系。&quot;&gt;&lt;a href=&quot;#has-a，顾名思义，有一个，代表从属关系。&quot; class=&quot;headerlink&quot; title=&quot;has-a，顾名思义，有一个，代表从属关系。&quot;&gt;&lt;/a&gt;has-a，顾名思义，有一个，代表从属关系。&lt;/h2&gt;&lt;p&gt;一个学校里有学生成绩的可以开发学生管理系统，有老师职称的可以开发教师录入系统，把类之间的关系分离，高内聚，低耦合。&lt;br&gt;&lt;img src=&quot;http://o94r16s1l.bkt.clouddn.com/xx%20has.jpg&quot; alt=&quot;has1-a&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;ike-a，顾名思义，像一个，代表组合关系。&quot;&gt;&lt;a href=&quot;#ike-a，顾名思义，像一个，代表组合关系。&quot; class=&quot;headerlink&quot; title=&quot;ike-a，顾名思义，像一个，代表组合关系。&quot;&gt;&lt;/a&gt;ike-a，顾名思义，像一个，代表组合关系。&lt;/h2&gt;&lt;p&gt;实现了某个接口的功能，继承某个类 的属性和方法。比如说手机实现了通话和发短信的功能，继承了微机的娱乐功能。&lt;br&gt;&lt;img src=&quot;http://o94r16s1l.bkt.clouddn.com/xx%20like.jpg&quot; alt=&quot;like-a&quot;&gt;&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;is-a，has-a，like-a如何应用&lt;br&gt;如果你确定两件对象之间是is-a的关系，&lt;br&gt;那么此时你应该使用继承；比如菱形、圆形和方形都是形状的一种，那么他们都应该从形状类继承。&lt;br&gt;如果你确定两件对象之间是has-a的关系，&lt;br&gt;那么此时你应该使用聚合；比如电脑是由显示器、CPU、硬盘等组成的，那么你应该把显示器、CPU、硬盘这些类聚合成电脑类。&lt;br&gt;如果你确定两件对象之间是like-a的关系，&lt;br&gt;那么此时你应该使用组合；比如空调继承于制冷机，但它同时有加热功能，那么你应该把让空调继承制冷机类，并实现加热接口。&lt;br&gt;在学习和使用的过程中遁寻高内聚，低耦合的设计原则，先对整个系统做简单的分析，然后书写文档建立类之间的关联，在数据出错的时候记得梳理自己的知识结构，在不一样的世界想象，系统设计与现实，而高于现实的应用，希望在接下来的学习中能够学到更多的东西。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;br&gt;面向对象的三种关系&lt;/p&gt;
&lt;h2 id=&quot;is-a，顾名思义，是一个，代表继承关系。&quot;&gt;&lt;a href=&quot;#is-a，顾名思义，是一个，代表继承关系。&quot; class=&quot;headerlink&quot; title=&quot;is-a，顾名思义，是一个，代表继承关系。&quot;&gt;&lt;/a&gt;is-a，顾名思义，是一个，代表继承关系。&lt;/h2&gt;&lt;p&gt;一个类中包含了另一个类的所有属性和方法&lt;br&gt;比如正方形和长方形继承于图形，可以继承图形的边长的属性和周长和面积的方法如图所示&lt;br&gt;&lt;img src=&quot;http://o94r16s1l.bkt.clouddn.com/xx%20is.jpg&quot; alt=&quot;is-a&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;has-a，顾名思义，有一个，代表从属关系。&quot;&gt;&lt;a href=&quot;#has-a，顾名思义，有一个，代表从属关系。&quot; class=&quot;headerlink&quot; title=&quot;has-a，顾名思义，有一个，代表从属关系。&quot;&gt;&lt;/a&gt;has-a，顾名思义，有一个，代表从属关系。&lt;/h2&gt;&lt;p&gt;一个学校里有学生成绩的可以开发学生管理系统，有老师职称的可以开发教师录入系统，把类之间的关系分离，高内聚，低耦合。&lt;br&gt;&lt;img src=&quot;http://o94r16s1l.bkt.clouddn.com/xx%20has.jpg&quot; alt=&quot;has1-a&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;ike-a，顾名思义，像一个，代表组合关系。&quot;&gt;&lt;a href=&quot;#ike-a，顾名思义，像一个，代表组合关系。&quot; class=&quot;headerlink&quot; title=&quot;ike-a，顾名思义，像一个，代表组合关系。&quot;&gt;&lt;/a&gt;ike-a，顾名思义，像一个，代表组合关系。&lt;/h2&gt;&lt;p&gt;实现了某个接口的功能，继承某个类 的属性和方法。比如说手机实现了通话和发短信的功能，继承了微机的娱乐功能。&lt;br&gt;&lt;img src=&quot;http://o94r16s1l.bkt.clouddn.com/xx%20like.jpg&quot; alt=&quot;like-a&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="面向对象" scheme="http://lxh5431.github.io/categories/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
    
      <category term="编程" scheme="http://lxh5431.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>七月，沉淀的激情</title>
    <link href="http://lxh5431.github.io/2016/07/01/%E4%B8%83%E6%9C%88%EF%BC%8C%E6%B2%89%E6%B7%80%E7%9A%84%E6%BF%80%E6%83%85/"/>
    <id>http://lxh5431.github.io/2016/07/01/七月，沉淀的激情/</id>
    <published>2016-06-30T16:29:00.000Z</published>
    <updated>2016-06-30T17:37:53.759Z</updated>
    
    <content type="html">&lt;p&gt;&lt;strong&gt;记忆没有线&lt;/strong&gt;&lt;br&gt; 随着大学的最后一节课的落幕铃声落下，我知道我的大学只剩下一种形式，毕业论文与毕业照，我用三年来读大学，用一年去保留记忆，有时候我回想，三年里我学到了什么？沉稳的性格，开朗的性情，还是诚实到无人可敌的品质，或者是我无所抗拒的堕落，大一的迷茫是装给大三的老腊肉听的，那时候我们还有梦，至少青春总是那么仓促，连我等下来歇脚的地方都是一片海洋，我该如何去对自己未来的路，未来的选择做出我自己的判断，很多人说大学就是为了学会思考，学会独立，学会面对所有发生的或者即将发生的厄运，你有一个深刻的印象和解决方案，而不是等待命运的安排，也许这就是我写这篇文章的意义，寻找生活的意义，追逐世界融合的文化，思想和创意，达到自己的心中的期待，然后继续向前走，开辟自己的人生的路，我希望在下一站到来之前，有了下车的勇气，毕竟每一站都有别样的精彩。正如我不曾历经沧桑，我还在路上。视察这世界的冷漠与嘲笑。生活总在我的心中划伤我的记忆，照亮前景的蓝图。&lt;br&gt; &lt;img src=&quot;http://o94r16s1l.bkt.clouddn.com/%E5%A6%B9%E7%BA%B8.jpg&quot; alt=&quot;我的笔触在我心中&quot;&gt;&lt;br&gt; &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt; &lt;strong&gt;青春里没有返程的旅行开始了&lt;/strong&gt;&lt;br&gt; 校门的风依旧那么温柔，就像来时那么慌张忽然遇到了一个机遇，遇到游子，遇到心灵的归宿的地方，暂时忘怀了过去，已经逝去的不再是我的青春，而是一种发自内心的感悟，当我已经离青春远去，我要试着找到自己的木筏，在即将到来的暴风雨之前加固我的木筏，锻炼我的内在的功力，为了继续前行而努力，不再为了昨天的迷失而找借口，人生没有借口，只有对自己的一种缺少的关怀，我需要试着找到属于自己的方法，去努力，去规划，去获取一段不一样的时光，开始一段征程。我只希望不坐回程车，即使最后我被赶下车，我依然沿着铁道走向远方，远方不止有诗歌，还有技术的海洋，我知道我不能把所有的事物抽象，当我希望在我手中刻画我自己心目中的世界，让我为世界的一点点去润色，即使为了自己的远方，我也需要不一样的知识，学到老，我希望在我最好的年华去书写我自己的路途。&lt;/p&gt;
&lt;h3 id=&quot;放下的不是梦想，拿起的是未来&quot;&gt;&lt;a href=&quot;#放下的不是梦想，拿起的是未来&quot; class=&quot;headerlink&quot; title=&quot;放下的不是梦想，拿起的是未来&quot;&gt;&lt;/a&gt;放下的不是梦想，拿起的是未来&lt;/h3&gt;&lt;p&gt;七月荏苒，岁月如歌，音符不知构造世界的最初的沃土，还需要我们去适应，去改造，去感受，我不知道我还有多久的时间去收拾我的行囊，当我希望我把智慧与勇气带上，当在过河的时候我我希望一直坚守我心中的防线，即使最后我敢下河，依然有我的一技之长，路千万，思想的高度却又不一样的感受，我只希望有一个路标，在七月里我希望能够对未来的路更加清晰，对知识更好的总计，对自己的各个方面再次的审视自己，让自己适应，而不是被社会融化，坚持我所坚持的，放弃我所放弃的，自爱爱人，我只希望我就是榕树下的哪一个读书人，读一本书，经历一个人生，沧桑与否，其实一直在我心中，当我心中还有梦和远方，我想我一直保留了我那颗心，不将就过去，不畏将来的心。&lt;br&gt;关于爱情&lt;/p&gt;
&lt;h2 id=&quot;如果你要提前下车，请别推行装睡的我，这样我可以睡到终点，假装不知道你已离开。&quot;&gt;&lt;a href=&quot;#如果你要提前下车，请别推行装睡的我，这样我可以睡到终点，假装不知道你已离开。&quot; class=&quot;headerlink&quot; title=&quot;如果你要提前下车，请别推行装睡的我，这样我可以睡到终点，假装不知道你已离开。&quot;&gt;&lt;/a&gt;如果你要提前下车，请别推行装睡的我，这样我可以睡到终点，假装不知道你已离开。&lt;/h2&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;记忆没有线&lt;/strong&gt;&lt;br&gt; 随着大学的最后一节课的落幕铃声落下，我知道我的大学只剩下一种形式，毕业论文与毕业照，我用三年来读大学，用一年去保留记忆，有时候我回想，三年里我学到了什么？沉稳的性格，开朗的性情，还是诚实到无人可敌的品质，或者是我无所抗拒的堕落，大一的迷茫是装给大三的老腊肉听的，那时候我们还有梦，至少青春总是那么仓促，连我等下来歇脚的地方都是一片海洋，我该如何去对自己未来的路，未来的选择做出我自己的判断，很多人说大学就是为了学会思考，学会独立，学会面对所有发生的或者即将发生的厄运，你有一个深刻的印象和解决方案，而不是等待命运的安排，也许这就是我写这篇文章的意义，寻找生活的意义，追逐世界融合的文化，思想和创意，达到自己的心中的期待，然后继续向前走，开辟自己的人生的路，我希望在下一站到来之前，有了下车的勇气，毕竟每一站都有别样的精彩。正如我不曾历经沧桑，我还在路上。视察这世界的冷漠与嘲笑。生活总在我的心中划伤我的记忆，照亮前景的蓝图。&lt;br&gt; &lt;img src=&quot;http://o94r16s1l.bkt.clouddn.com/%E5%A6%B9%E7%BA%B8.jpg&quot; alt=&quot;我的笔触在我心中&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="http://lxh5431.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title> 面向对象的几个基本关键字（二）</title>
    <link href="http://lxh5431.github.io/2016/06/29/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%87%A0%E4%B8%AA%E5%9F%BA%E6%9C%AC%E5%85%B3%E9%94%AE%E5%AD%97%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://lxh5431.github.io/2016/06/29/面向对象的几个基本关键字（二）/</id>
    <published>2016-06-29T06:42:34.000Z</published>
    <updated>2016-07-06T09:50:26.269Z</updated>
    
    <content type="html">&lt;h2 id=&quot;static关键字&quot;&gt;&lt;a href=&quot;#static关键字&quot; class=&quot;headerlink&quot; title=&quot;static关键字&quot;&gt;&lt;/a&gt;static关键字&lt;/h2&gt;&lt;p&gt;定义：&lt;br&gt;static表示全局或者静态，用来修饰成员变量和成员方法，也可以形成静态static代码块。&lt;br&gt;1、static变量&lt;br&gt;        按照是否静态的对类成员变量进行分类可分两种：一种是被static修饰的变量，叫静态变量或类变量；另一种是没有被static修饰的变量，叫实例变量。两者的区别是：&lt;br&gt;        对于静态变量在内存中只有一个拷贝（节省内存），JVM只为静态分配一次内存，在加载类的过程中完成静态变量的内存分配，可用类名直接访问（方便），当然也可以通过对象来访问（但是这是不推荐的）。&lt;br&gt;        对于实例变量，没创建一个实例，就会为实例变量分配一次内存，实例变量可以在内存中有多个拷贝，互不影响（灵活）。&lt;/p&gt;
&lt;p&gt;2、静态方法&lt;br&gt;        静态方法可以直接通过类名调用，任何的实例也都可以调用，因此静态方法中不能用this和super关键字，不能直接访问所属类的实例变量和实例方法(就是不带static的成员变量和成员成员方法)，只能访问所属类的静态成员变量和成员方法。因为实例成员与特定的对象关联！这个需要去理解，想明白其中的道理，不是记忆！！！&lt;br&gt;        因为static方法独立于任何实例，因此static方法必须被实现，而不能是抽象的abstract。&lt;/p&gt;
&lt;p&gt;3、static代码块&lt;br&gt;        static代码块也叫静态代码块，是在类中独立于类成员的static语句块，可以有多个，位置可以随便放，它不在任何的方法体内，JVM加载类时会执行这些静态的代码块，如果static代码块有多个，JVM将按照它们在类中出现的先后顺序依次执行它们，每个代码块只会被执行一次。&lt;br&gt;        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;final关键字&quot;&gt;&lt;a href=&quot;#final关键字&quot; class=&quot;headerlink&quot; title=&quot;final关键字&quot;&gt;&lt;/a&gt;final关键字&lt;/h2&gt;&lt;p&gt;final类不能被继承，没有子类，final类中的方法默认是final的。&lt;br&gt;       final方法不能被子类的方法覆盖，但可以被继承。&lt;br&gt;       final成员变量表示常量，只能被赋值一次，赋值后值不再改变。&lt;br&gt;       final不能用于修饰构造方法。&lt;br&gt;       注意：父类的private成员方法是不能被子类方法覆盖的，因此private类型的方法默认是final类型的。&lt;/p&gt;
&lt;p&gt;1、final类&lt;br&gt;       final类不能被继承，因此final类的成员方法没有机会被覆盖，默认都是final的。在设计类时候，如果这个类不需要有子类，类的实现细节不允许改变，并且确信这个类不会载被扩展，那么就设计为final类。&lt;br&gt;2、final方法&lt;br&gt;       如果一个类不允许其子类覆盖某个方法，则可以把这个方法声明为final方法。&lt;br&gt;       使用final方法的原因有二：&lt;br&gt;       第一、把方法锁定，防止任何继承类修改它的意义和实现。&lt;br&gt;       第二、高效。编译器在遇到调用final方法时候会转入内嵌机制，大大提高执行效率。&lt;br&gt;       public class Test1 {&lt;br&gt;public static void main(String[] args) {&lt;br&gt;    // TODO 自动生成方法存根&lt;br&gt;}&lt;br&gt;public void f1() {&lt;br&gt;    System.out.println(“f1”);&lt;br&gt;}&lt;br&gt;//无法被子类覆盖的方法&lt;br&gt;public final void f2() {&lt;br&gt;    System.out.println(“f2”);&lt;br&gt;}&lt;br&gt;public void f3() {&lt;br&gt;    System.out.println(“f3”);&lt;br&gt;}&lt;br&gt;private void f4() {&lt;br&gt;    System.out.println(“f4”);&lt;br&gt;}&lt;br&gt;}&lt;br&gt;public class Test2 extends Test1 {&lt;/p&gt;
&lt;p&gt;public void f1(){&lt;br&gt;    System.out.println(“Test1父类方法f1被覆盖!”);&lt;br&gt;}&lt;br&gt;public static void main(String[] args) {&lt;br&gt;    Test2 t=new Test2();&lt;br&gt;    t.f1();&lt;br&gt;    t.f2(); //调用从父类继承过来的final方法&lt;br&gt;    t.f3(); //调用从父类继承过来的方法&lt;br&gt;    //t.f4(); //调用失败，无法从父类继承获得&lt;br&gt;}&lt;br&gt;}&lt;br&gt;、final变量（常量）&lt;br&gt;        用final修饰的成员变量表示常量，值一旦给定就无法改变！&lt;br&gt;        final修饰的变量有三种：静态变量、实例变量和局部变量，分别表示三种类型的常量。&lt;br&gt;        从下面的例子中可以看出，一旦给final变量初值后，值就不能再改变了。&lt;br&gt;        另外，final变量定义的时候，可以先声明，而不给初值，这中变量也称为final空白，无论什么情况，编译器都确保空白final在使用之前必须被初始化。但是，final空白在final关键字final的使用上提供了更大的灵活性，为此，一个类中的final数据成员就可以实现依对象而有所不同，却有保持其恒定不变的特征。&lt;/p&gt;
&lt;p&gt;package org.leizhimin;&lt;/p&gt;
&lt;p&gt;public class Test3 {&lt;br&gt;        private final String S = “final实例变量S”;&lt;br&gt;        private final int A = 100;&lt;br&gt;        public final int B = 90;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public static final int C = 80;
private static final int D = 70;

public final int E; //final空白,必须在初始化对象的时候赋初值

public Test3(int x) {
        E = x;
}

/**
 * @param args

public static void main(String[] args) {
        Test3 t = new Test3(2);
        //t.A=101;    //出错,final变量的值一旦给定就无法改变
        //t.B=91; //出错,final变量的值一旦给定就无法改变
        //t.C=81; //出错,final变量的值一旦给定就无法改变
        //t.D=71; //出错,final变量的值一旦给定就无法改变

        System.out.println(t.A);
        System.out.println(t.B);
        System.out.println(t.C); //不推荐用对象方式访问静态字段
        System.out.println(t.D); //不推荐用对象方式访问静态字段
        System.out.println(Test3.C);
        System.out.println(Test3.D);
        //System.out.println(Test3.E); //出错,因为E为final空白,依据不同对象值有所不同.
        System.out.println(t.E);

        Test3 t1 = new Test3(3);
        System.out.println(t1.E); //final空白变量E依据对象的不同而不同
}

private void test() {
        System.out.println(new Test3(1).A);
        System.out.println(Test3.C);
        System.out.println(Test3.D);
}

public void test2() {
        final int a;     //final空白,在需要的时候才赋值
        final int b = 4;    //局部常量--final用于局部变量的情形
        final int c;    //final空白,一直没有给赋值.    
        a = 3;
        //a=4;    出错,已经给赋过值了.
        //b=2; 出错,已经给赋过值了.
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;4、final参数&lt;br&gt;        当函数参数为final类型时，你可以读取使用该参数，但是无法改变该参数的值。&lt;/p&gt;
&lt;p&gt;public class Test4 {&lt;br&gt;        public static void main(String[] args) {&lt;br&gt;                new Test4().f1(2);&lt;br&gt;        }&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public void f1(final int i) {
        //i++;    //i是final类型的,值不允许改变的.
        System.out.print(i);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;}&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;static关键字&quot;&gt;&lt;a href=&quot;#static关键字&quot; class=&quot;headerlink&quot; title=&quot;static关键字&quot;&gt;&lt;/a&gt;static关键字&lt;/h2&gt;&lt;p&gt;定义：&lt;br&gt;static表示全局或者静态，用来修饰成员变量和成员方法，也可以形成静态static代码块。&lt;br&gt;1、static变量&lt;br&gt;        按照是否静态的对类成员变量进行分类可分两种：一种是被static修饰的变量，叫静态变量或类变量；另一种是没有被static修饰的变量，叫实例变量。两者的区别是：&lt;br&gt;        对于静态变量在内存中只有一个拷贝（节省内存），JVM只为静态分配一次内存，在加载类的过程中完成静态变量的内存分配，可用类名直接访问（方便），当然也可以通过对象来访问（但是这是不推荐的）。&lt;br&gt;        对于实例变量，没创建一个实例，就会为实例变量分配一次内存，实例变量可以在内存中有多个拷贝，互不影响（灵活）。&lt;/p&gt;
&lt;p&gt;2、静态方法&lt;br&gt;        静态方法可以直接通过类名调用，任何的实例也都可以调用，因此静态方法中不能用this和super关键字，不能直接访问所属类的实例变量和实例方法(就是不带static的成员变量和成员成员方法)，只能访问所属类的静态成员变量和成员方法。因为实例成员与特定的对象关联！这个需要去理解，想明白其中的道理，不是记忆！！！&lt;br&gt;        因为static方法独立于任何实例，因此static方法必须被实现，而不能是抽象的abstract。&lt;/p&gt;
&lt;p&gt;3、static代码块&lt;br&gt;        static代码块也叫静态代码块，是在类中独立于类成员的static语句块，可以有多个，位置可以随便放，它不在任何的方法体内，JVM加载类时会执行这些静态的代码块，如果static代码块有多个，JVM将按照它们在类中出现的先后顺序依次执行它们，每个代码块只会被执行一次。&lt;br&gt;
    
    </summary>
    
      <category term="面向对象" scheme="http://lxh5431.github.io/categories/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
    
      <category term="编程" scheme="http://lxh5431.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>面向对象的几个基本关键字（一）</title>
    <link href="http://lxh5431.github.io/2016/06/29/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%87%A0%E4%B8%AA%E5%9F%BA%E6%9C%AC%E5%85%B3%E9%94%AE%E5%AD%97%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://lxh5431.github.io/2016/06/29/面向对象的几个基本关键字（一）/</id>
    <published>2016-06-28T16:00:00.000Z</published>
    <updated>2016-07-06T09:50:26.207Z</updated>
    
    <content type="html">&lt;h2 id=&quot;类变量：类变量在类中用static关键字声明，在任意的方法，构造函数和代码块外部&quot;&gt;&lt;a href=&quot;#类变量：类变量在类中用static关键字声明，在任意的方法，构造函数和代码块外部&quot; class=&quot;headerlink&quot; title=&quot;类变量：类变量在类中用static关键字声明，在任意的方法，构造函数和代码块外部&quot;&gt;&lt;/a&gt;类变量：类变量在类中用static关键字声明，在任意的方法，构造函数和代码块外部&lt;/h2&gt;&lt;p&gt;类变量在程序启动时被创建，在程序结束时被销毁&lt;/p&gt;
&lt;h2 id=&quot;常量：&quot;&gt;&lt;a href=&quot;#常量：&quot; class=&quot;headerlink&quot; title=&quot;常量：&quot;&gt;&lt;/a&gt;常量：&lt;/h2&gt;&lt;p&gt;常量是标记为final关键字的类变量，类变量的特性常量均有，再次列出与类变量的区别。&lt;br&gt;声明常量时必须赋值，且赋值后不能改变其值。&lt;br&gt;常量名称一般都需要大写。&lt;br&gt; 类变量被存储在常量存储器中。&lt;/p&gt;
&lt;h2 id=&quot;实例变量：实例变量在类中被声明，在任意方法，构造函数和代码块外部&quot;&gt;&lt;a href=&quot;#实例变量：实例变量在类中被声明，在任意方法，构造函数和代码块外部&quot; class=&quot;headerlink&quot; title=&quot;实例变量：实例变量在类中被声明，在任意方法，构造函数和代码块外部&quot;&gt;&lt;/a&gt;实例变量：实例变量在类中被声明，在任意方法，构造函数和代码块外部&lt;/h2&gt;&lt;p&gt;在new一个对象的时候创建，在对象销毁时销毁&lt;/p&gt;
&lt;h2 id=&quot;局部变量：&quot;&gt;&lt;a href=&quot;#局部变量：&quot; class=&quot;headerlink&quot; title=&quot;局部变量：&quot;&gt;&lt;/a&gt;局部变量：&lt;/h2&gt;&lt;p&gt;在方法，构造函数，代码块声明&lt;br&gt;在进入方法，构造函数时创建，退出时被销毁&lt;br&gt;ava修饰符是用来修饰Java中的标识符（包括变量名、方法名、类名、包名和参数名等等）的，用来改变它们的含义的关键词。 Java语言有各种各样修饰符，大体分为两类：访问控制修饰符、非访问控制修饰符。&lt;br&gt;&lt;strong&gt;public&lt;/strong&gt;&lt;br&gt;公共的。Java语言中访问限制最宽的修饰符，被其修饰的类、属性以及方法不仅可以跨类访问，而且允许跨包（package）访问。​&lt;br&gt;&lt;strong&gt;private&lt;/strong&gt;&lt;br&gt;私有的。Java语言中对访问权限限制的最窄的修饰符，被其修饰的类、属性以及方法只能被该类的对象访问，其子类不能访问，更不能允许跨包访问。&lt;br&gt;&lt;strong&gt;protected&lt;/strong&gt;&lt;br&gt;被保护的。介于public和private之间的一种访问修饰符。被其修饰的类、属性以及方法只能被类本身的方法及子类访问，即使子类在不同的包中也可以访问。&lt;br&gt;default：&lt;br&gt;默认的。即不加任何访问修饰符。该模式下，只允许在同一个包中进行访问。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;static：&lt;br&gt;用来修饰静态类、方法和变量。&lt;br&gt;final：&lt;br&gt;用来修饰不会被修改的方法和变量。&lt;br&gt;abstract：&lt;br&gt;用来修饰抽象类和方法。&lt;br&gt;synchronized：&lt;br&gt;表明一个方法或一段代码需要同步执行。&lt;br&gt;volatile：&lt;br&gt;修饰被不同线程访问和修改的变量，都会直接读取原值，而不会因编译器的优化而读取备份。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;类变量：类变量在类中用static关键字声明，在任意的方法，构造函数和代码块外部&quot;&gt;&lt;a href=&quot;#类变量：类变量在类中用static关键字声明，在任意的方法，构造函数和代码块外部&quot; class=&quot;headerlink&quot; title=&quot;类变量：类变量在类中用static关键字声明，在任意的方法，构造函数和代码块外部&quot;&gt;&lt;/a&gt;类变量：类变量在类中用static关键字声明，在任意的方法，构造函数和代码块外部&lt;/h2&gt;&lt;p&gt;类变量在程序启动时被创建，在程序结束时被销毁&lt;/p&gt;
&lt;h2 id=&quot;常量：&quot;&gt;&lt;a href=&quot;#常量：&quot; class=&quot;headerlink&quot; title=&quot;常量：&quot;&gt;&lt;/a&gt;常量：&lt;/h2&gt;&lt;p&gt;常量是标记为final关键字的类变量，类变量的特性常量均有，再次列出与类变量的区别。&lt;br&gt;声明常量时必须赋值，且赋值后不能改变其值。&lt;br&gt;常量名称一般都需要大写。&lt;br&gt; 类变量被存储在常量存储器中。&lt;/p&gt;
&lt;h2 id=&quot;实例变量：实例变量在类中被声明，在任意方法，构造函数和代码块外部&quot;&gt;&lt;a href=&quot;#实例变量：实例变量在类中被声明，在任意方法，构造函数和代码块外部&quot; class=&quot;headerlink&quot; title=&quot;实例变量：实例变量在类中被声明，在任意方法，构造函数和代码块外部&quot;&gt;&lt;/a&gt;实例变量：实例变量在类中被声明，在任意方法，构造函数和代码块外部&lt;/h2&gt;&lt;p&gt;在new一个对象的时候创建，在对象销毁时销毁&lt;/p&gt;
&lt;h2 id=&quot;局部变量：&quot;&gt;&lt;a href=&quot;#局部变量：&quot; class=&quot;headerlink&quot; title=&quot;局部变量：&quot;&gt;&lt;/a&gt;局部变量：&lt;/h2&gt;&lt;p&gt;在方法，构造函数，代码块声明&lt;br&gt;在进入方法，构造函数时创建，退出时被销毁&lt;br&gt;ava修饰符是用来修饰Java中的标识符（包括变量名、方法名、类名、包名和参数名等等）的，用来改变它们的含义的关键词。 Java语言有各种各样修饰符，大体分为两类：访问控制修饰符、非访问控制修饰符。&lt;br&gt;&lt;strong&gt;public&lt;/strong&gt;&lt;br&gt;公共的。Java语言中访问限制最宽的修饰符，被其修饰的类、属性以及方法不仅可以跨类访问，而且允许跨包（package）访问。​&lt;br&gt;&lt;strong&gt;private&lt;/strong&gt;&lt;br&gt;私有的。Java语言中对访问权限限制的最窄的修饰符，被其修饰的类、属性以及方法只能被该类的对象访问，其子类不能访问，更不能允许跨包访问。&lt;br&gt;&lt;strong&gt;protected&lt;/strong&gt;&lt;br&gt;被保护的。介于public和private之间的一种访问修饰符。被其修饰的类、属性以及方法只能被类本身的方法及子类访问，即使子类在不同的包中也可以访问。&lt;br&gt;default：&lt;br&gt;默认的。即不加任何访问修饰符。该模式下，只允许在同一个包中进行访问。&lt;br&gt;
    
    </summary>
    
      <category term="面向对象" scheme="http://lxh5431.github.io/categories/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
    
      <category term="编程" scheme="http://lxh5431.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>jvm知识总结（二）</title>
    <link href="http://lxh5431.github.io/2016/06/28/jvm%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://lxh5431.github.io/2016/06/28/jvm知识总结（二）/</id>
    <published>2016-06-28T15:54:25.000Z</published>
    <updated>2016-06-28T16:33:42.828Z</updated>
    
    <content type="html">&lt;h4 id=&quot;垃圾回收机制&quot;&gt;&lt;a href=&quot;#垃圾回收机制&quot; class=&quot;headerlink&quot; title=&quot;垃圾回收机制&quot;&gt;&lt;/a&gt;垃圾回收机制&lt;/h4&gt;&lt;p&gt;如何判断垃圾回收对象&lt;br&gt;1.引用计数算法&lt;br&gt;2.根搜索算法&lt;br&gt;基本原理：&lt;strong&gt;GCRoot对象作为起始点（根）。如果从根到某个对象是可达的，则该对象称为可达对象（存活对象，不可回收对象）。否则就是不可达对象，可以被回收。&lt;/strong&gt;&lt;br&gt;新生代的垃圾收集器通常使用复制算法，将没有被引用的对象清理掉然后即将存活的对象放入老生代&lt;br&gt;&lt;img src=&quot;http://o94r16s1l.bkt.clouddn.com/%E5%A4%8D%E5%88%B6%E7%AE%97%E6%B3%95&quot; alt=&quot;复制算法&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;触发条件：新生代采用“空闲指针”的方式来控制GC触发，指针保持最后一个在新生代分配的对象位置，当有新的对象要分配内存时，用于检查空间是否足够，不够就触发GC。新生代的GC通常叫做young-GC，有时候也叫minor-GC。&quot;&gt;&lt;a href=&quot;#触发条件：新生代采用“空闲指针”的方式来控制GC触发，指针保持最后一个在新生代分配的对象位置，当有新的对象要分配内存时，用于检查空间是否足够，不够就触发GC。新生代的GC通常叫做young-GC，有时候也叫minor-GC。&quot; class=&quot;headerlink&quot; title=&quot;触发条件：新生代采用“空闲指针”的方式来控制GC触发，指针保持最后一个在新生代分配的对象位置，当有新的对象要分配内存时，用于检查空间是否足够，不够就触发GC。新生代的GC通常叫做young GC，有时候也叫minor GC。&quot;&gt;&lt;/a&gt;触发条件：新生代采用“空闲指针”的方式来控制GC触发，指针保持最后一个在新生代分配的对象位置，当有新的对象要分配内存时，用于检查空间是否足够，不够就触发GC。新生代的GC通常叫做young GC，有时候也叫minor GC。&lt;/h2&gt;&lt;p&gt;老生代与新生代不同，对象存活的时间比较长，比较稳定，因此采用标记/整理（也叫标记-紧凑，Mark-Compact）算法。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;老生代的GC，通常叫做full-GC，也叫major-GC。老生代有多情况会触发GC，不过一般来说发生频率不高：&quot;&gt;&lt;a href=&quot;#老生代的GC，通常叫做full-GC，也叫major-GC。老生代有多情况会触发GC，不过一般来说发生频率不高：&quot; class=&quot;headerlink&quot; title=&quot;老生代的GC，通常叫做full GC，也叫major GC。老生代有多情况会触发GC，不过一般来说发生频率不高：&quot;&gt;&lt;/a&gt;老生代的GC，通常叫做full GC，也叫major GC。老生代有多情况会触发GC，不过一般来说发生频率不高：&lt;/h2&gt;&lt;p&gt;1.旧生代空间不足&lt;br&gt;2.PemanetGeneration空间不足&lt;br&gt;3.GC晋升老生代的平均大小大于老生代剩余空间大小&lt;br&gt;4.手动调用system.gc()&lt;/p&gt;
&lt;p&gt;##垃圾回收方式：&lt;br&gt;串行垃圾回收器（Serial Garbage Collector）&lt;br&gt;并行垃圾回收器（Parallel Garbage Collector）&lt;br&gt;并发标记扫描垃圾回收器（CMS Garbage Collector）&lt;br&gt;G1垃圾回收器（G1 Garbage Collector）&lt;/p&gt;
&lt;h2 id=&quot;优化的复制算法&quot;&gt;&lt;a href=&quot;#优化的复制算法&quot; class=&quot;headerlink&quot; title=&quot;优化的复制算法&quot;&gt;&lt;/a&gt;优化的复制算法&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://o94r16s1l.bkt.clouddn.com/%E4%BC%98%E5%8C%96%E7%9A%84%E5%A4%8D%E5%88%B6%E7%AE%97%E6%B3%95.png&quot; alt=&quot;优化的复制算法&quot;&gt;&lt;br&gt;解释：&lt;br&gt;Eden+S0可分配新生对象；&lt;br&gt;对Eden+S0进行垃圾收集，存活对象复制到S1。清理Eden+S0。一次新生代GC结束。&lt;br&gt;Eden+S1可分配新生对象；&lt;br&gt;对Eden+S1进行垃圾收集，存活对象复制到S0。清理Eden+S1。二次新生代GC结束。&lt;br&gt;循环1。&lt;br&gt;fullGC、minorGC、magorGC还有youngGC是Java垃圾处理机制（GC）的名词，区分这几个概念非常简单：&lt;/p&gt;
&lt;p&gt;老生代进行一次垃圾清理，被称为fullGC或者magorGC。&lt;/p&gt;
&lt;p&gt;新生代进行一次垃圾清理，被称为youngGC或者minorGC。&lt;br&gt;原则：&lt;br&gt;降低youngGC的频率、减少fullGC的次数。&lt;br&gt;java内存的优化主要是通过合理的控制GC来实现，主要原则：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;不能只看操作系统级别Java进程所占用的内存，这个数值不能准确的反应堆内存的真实占用情况（因为GC过后这个值是不会变化的）。&lt;/li&gt;
&lt;li&gt;使用JDK提供的内存查看工具，比如JConsole和Java VisualVM。&lt;/li&gt;
&lt;li&gt;优化内存主要的目的是降低youngGC的频率、减少fullGC的次数 ，过多的youngGC和fullGC是会占用很多的系统资源（主要是CPU），影响系统的吞吐量。&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;垃圾回收机制&quot;&gt;&lt;a href=&quot;#垃圾回收机制&quot; class=&quot;headerlink&quot; title=&quot;垃圾回收机制&quot;&gt;&lt;/a&gt;垃圾回收机制&lt;/h4&gt;&lt;p&gt;如何判断垃圾回收对象&lt;br&gt;1.引用计数算法&lt;br&gt;2.根搜索算法&lt;br&gt;基本原理：&lt;strong&gt;GCRoot对象作为起始点（根）。如果从根到某个对象是可达的，则该对象称为可达对象（存活对象，不可回收对象）。否则就是不可达对象，可以被回收。&lt;/strong&gt;&lt;br&gt;新生代的垃圾收集器通常使用复制算法，将没有被引用的对象清理掉然后即将存活的对象放入老生代&lt;br&gt;&lt;img src=&quot;http://o94r16s1l.bkt.clouddn.com/%E5%A4%8D%E5%88%B6%E7%AE%97%E6%B3%95&quot; alt=&quot;复制算法&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;触发条件：新生代采用“空闲指针”的方式来控制GC触发，指针保持最后一个在新生代分配的对象位置，当有新的对象要分配内存时，用于检查空间是否足够，不够就触发GC。新生代的GC通常叫做young-GC，有时候也叫minor-GC。&quot;&gt;&lt;a href=&quot;#触发条件：新生代采用“空闲指针”的方式来控制GC触发，指针保持最后一个在新生代分配的对象位置，当有新的对象要分配内存时，用于检查空间是否足够，不够就触发GC。新生代的GC通常叫做young-GC，有时候也叫minor-GC。&quot; class=&quot;headerlink&quot; title=&quot;触发条件：新生代采用“空闲指针”的方式来控制GC触发，指针保持最后一个在新生代分配的对象位置，当有新的对象要分配内存时，用于检查空间是否足够，不够就触发GC。新生代的GC通常叫做young GC，有时候也叫minor GC。&quot;&gt;&lt;/a&gt;触发条件：新生代采用“空闲指针”的方式来控制GC触发，指针保持最后一个在新生代分配的对象位置，当有新的对象要分配内存时，用于检查空间是否足够，不够就触发GC。新生代的GC通常叫做young GC，有时候也叫minor GC。&lt;/h2&gt;&lt;p&gt;老生代与新生代不同，对象存活的时间比较长，比较稳定，因此采用标记/整理（也叫标记-紧凑，Mark-Compact）算法。&lt;br&gt;
    
    </summary>
    
    
      <category term="编程" scheme="http://lxh5431.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>给远方的你</title>
    <link href="http://lxh5431.github.io/2016/06/28/%E7%BB%99%E8%BF%9C%E6%96%B9%E7%9A%84%E4%BD%A0/"/>
    <id>http://lxh5431.github.io/2016/06/28/给远方的你/</id>
    <published>2016-06-28T10:33:28.000Z</published>
    <updated>2016-07-12T15:20:05.225Z</updated>
    
    <content type="html">&lt;p&gt;最近在学ps随意的一张小照，让我觉得该给你送一点不一样的七月，我就是你那最不可留下来的欣赏，我知道我还在路上你，不知道在远方。&lt;br&gt;&lt;img src=&quot;http://o94r16s1l.bkt.clouddn.com/%E5%94%90%E5%A6%B9%E5%A6%B9%E6%94%B6.jpg&quot; alt=&quot;思念是一首诗&quot;&gt;&lt;br&gt;当你还在徘徊的时候，我知道你心中无数，可是你还是向往远方，远方有你所爱，所想，所思，我只能继续在这里深造，当下一个晨曦到来，我也许才会走，我知道你会回来，可是是否在你之前呢，我不知道我也不保证，就像风，吹走了思念，却带不来你的脚步。我只是一个站在原地的人，天涯海角，天荒地老，我只希望我只是一个过客，愿为了不该等的人而等，为了不切实际的幻想也能拿出自己的抉择，我在，故生活才有存在的意义&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;最近在学ps随意的一张小照，让我觉得该给你送一点不一样的七月，我就是你那最不可留下来的欣赏，我知道我还在路上你，不知道在远方。&lt;br&gt;&lt;img src=&quot;http://o94r16s1l.bkt.clouddn.com/%E5%94%90%E5%A6%B9%E5%A6%B9
    
    </summary>
    
      <category term="诗词" scheme="http://lxh5431.github.io/categories/%E8%AF%97%E8%AF%8D/"/>
    
    
      <category term="随笔" scheme="http://lxh5431.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>深夜感想</title>
    <link href="http://lxh5431.github.io/2016/06/28/%E6%B7%B1%E5%A4%9C%E6%84%9F%E6%83%B3/"/>
    <id>http://lxh5431.github.io/2016/06/28/深夜感想/</id>
    <published>2016-06-27T17:25:25.000Z</published>
    <updated>2016-06-28T01:51:30.310Z</updated>
    
    <content type="html">&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ 如果还有一种信仰让我向前，那就是善良与追逐&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;很久以前我就一直坚定我的前进的事，当你很不懂如何解读自己的人生的时候，我只能摸着黑暗继续向前走，现在还是那么的杂乱无章的学习，现在还是缺少一个继续下去的勇气和魄力，也许我该转向另一种极端，然后继续探讨吧，我知道有一种成功就是把我自己先忘记，然后按照别人的方式去做，我知道我做不到，我还在这里站立，马上就要走到 大学与社会的路口，我知道我该做出我自己的选择，就像那时候我选择了继续学习那样，这次却更加的具有象征意义，也许我一直在追赶，不只是为了自己还有别人，那些逝去的岁月总让我不在心急气躁，我需要的不再是一个弱者，也许这就是我能够看透自己的一点奖励吧，但我知道路走要一个人走，前路还是那么的高深莫测，我需要勇气选择自己的路。&lt;br&gt;&lt;img src=&quot;http://o94r16s1l.bkt.clouddn.com/12951434912271.jpg&quot; alt=&quot;一路向前&quot;&gt;&lt;br&gt; &lt;strong&gt;既然选择了前方，便只顾风雨兼程。&lt;/strong&gt;&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;我知道你很勇敢，但我至少不会输于你，毕竟，我有我自己的想法&quot;&gt;&lt;a href=&quot;#我知道你很勇敢，但我至少不会输于你，毕竟，我有我自己的想法&quot; class=&quot;headerlink&quot; title=&quot;我知道你很勇敢，但我至少不会输于你，毕竟，我有我自己的想法&quot;&gt;&lt;/a&gt;我知道你很勇敢，但我至少不会输于你，毕竟，我有我自己的想法&lt;/h2&gt;&lt;p&gt;关于一个人的成长总是那么多的路在选择中成长，有时候我在想也许我该转变自己的思路去想每一件事，然后才能找到共同点，就像是书写自己的笔触，很久很久，然后继续去看一本我从来不从接触的书，我很想书，其实我一直在学习管理，管理自己的思想，管理自己的生活，管理自己的未来，也许危言微听，但我知道，我一直在自己的框里出不来，我也不想出去，我不想因为自己的人性去否认自己的一切，这就是我的信仰吧，哪是基于自己的梦，那不会醒的梦想，很多人都说得很多，为何做的却不多呢，我喜欢文学，喜欢不一样的文字，也许前提是我的想象力吧，我总是太在意每一件事，想到的每一种我不确定的想法，所以我一直在维护我的行动性，当我还能站着，我就不会坐下来，毕竟你站着的不止是人格还有你的精神和思想。&lt;br&gt;一个人总需要成长，总需要失去，我不知道我该逝去什么，也许梦想吧，也许我一直都该坚持自己的初心，开心的喔才是真的我，又何必因为一个环境把我改造呢，我需要思考自己，检讨自己，然后把自己的缺点，放在我够不到的地方，然后继续欣赏路上不一样的风景，这就是我，我要，我行，我能把自己放在更好的生活中，当我选择的时候，我希望我不要后悔。不要留一点虚幻的地方在人生的路上，因为我还有我自己，我就是我，不一样的吃货。失败–&amp;gt;&amp;gt;成功&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ 如果还有一种信仰让我向前，那就是善良与追逐&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;很久以前我就一直坚定我的前进的事，当你很不懂如何解读自己的人生的时候，我只能摸着黑暗继续向前走，现在还是那么的杂乱无章的学习，现在还是缺少一个继续下去的勇气和魄力，也许我该转向另一种极端，然后继续探讨吧，我知道有一种成功就是把我自己先忘记，然后按照别人的方式去做，我知道我做不到，我还在这里站立，马上就要走到 大学与社会的路口，我知道我该做出我自己的选择，就像那时候我选择了继续学习那样，这次却更加的具有象征意义，也许我一直在追赶，不只是为了自己还有别人，那些逝去的岁月总让我不在心急气躁，我需要的不再是一个弱者，也许这就是我能够看透自己的一点奖励吧，但我知道路走要一个人走，前路还是那么的高深莫测，我需要勇气选择自己的路。&lt;br&gt;&lt;img src=&quot;http://o94r16s1l.bkt.clouddn.com/12951434912271.jpg&quot; alt=&quot;一路向前&quot;&gt;&lt;br&gt; &lt;strong&gt;既然选择了前方，便只顾风雨兼程。&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="http://lxh5431.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>关于jvm的学习总结（二）</title>
    <link href="http://lxh5431.github.io/2016/06/28/%E5%85%B3%E4%BA%8Ejvm%E7%9A%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://lxh5431.github.io/2016/06/28/关于jvm的学习总结（一）/</id>
    <published>2016-06-27T16:00:00.000Z</published>
    <updated>2016-06-28T10:20:36.710Z</updated>
    
    <content type="html">&lt;h2 id=&quot;java内存模型&quot;&gt;&lt;a href=&quot;#java内存模型&quot; class=&quot;headerlink&quot; title=&quot;java内存模型&quot;&gt;&lt;/a&gt;java内存模型&lt;/h2&gt;&lt;p&gt;java平台自动集成了线程以及多处理技术。&lt;br&gt; &lt;strong&gt;定义&lt;/strong&gt;&lt;br&gt;JMM（Java内存模型，Java Memory Model的缩写）是控制Java线程之间、线程和主存之间通信的协议。&lt;br&gt;内存模型描述了程序中各个变量（实例域、静态域和数组元素）之间的关系，以及在实际计算机系统中将变量存储到内存、从内存中取出变量这样的底层细节。&lt;br&gt;内存模型的规则：&lt;br&gt;原子性&lt;br&gt;可见性&lt;br&gt;可排序性&lt;br&gt;jvm实例：&lt;br&gt;1.java虚拟机有一个类加载器作为jvm的子系统，类加载器针对class文件进行检测来加载对应的类接口&lt;br&gt;2，jvm内部有一个执行引擎，用来负责代码的解释和执行&lt;br&gt;3，程序运行，通过内存来存储字节码，附加信息，对象，方法参数，返回值，局部变量以及中间结果的很多内容&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;4，jvm的内存管理&quot;&gt;&lt;a href=&quot;#4，jvm的内存管理&quot; class=&quot;headerlink&quot; title=&quot;4，jvm的内存管理&quot;&gt;&lt;/a&gt;4，jvm的内存管理&lt;/h3&gt;&lt;p&gt;  静态存储&lt;br&gt;  栈式存储&lt;br&gt;  堆存储&lt;br&gt;&lt;strong&gt;jvm内存组成结构&lt;/strong&gt;&lt;br&gt;&lt;img src=&quot;http://o94r16s1l.bkt.clouddn.com/jvm%E5%9B%BE&quot; alt=&quot;结构分布图&quot;&gt;&lt;br&gt;1.pc寄存器&lt;br&gt;2.方法区&lt;br&gt;3.本地方法栈&lt;br&gt;4.栈&lt;br&gt;5.堆&lt;br&gt;&lt;strong&gt;栈和堆的区别&lt;/strong&gt;&lt;br&gt;&lt;img src=&quot;http://o94r16s1l.bkt.clouddn.com/%E6%A0%88%E5%A0%86.png&quot; alt=&quot;具体模型&quot;&gt;&lt;br&gt;1、栈区（stack）—   由编译器自动分配释放   ，存放函数的参数值，局部变量的值等。其&lt;br&gt;  操作方式类似于数据结构中的栈。&lt;br&gt;  2、堆区（heap）   —   一般由程序员分配释放，   若程序员不释放，程序结束时由GC处理&lt;br&gt;  收&lt;br&gt;&lt;img src=&quot;http://o94r16s1l.bkt.clouddn.com/%E6%A0%88%E5%A0%86%E7%9A%84%E5%8C%BA%E5%88%AB&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;java内存模型&quot;&gt;&lt;a href=&quot;#java内存模型&quot; class=&quot;headerlink&quot; title=&quot;java内存模型&quot;&gt;&lt;/a&gt;java内存模型&lt;/h2&gt;&lt;p&gt;java平台自动集成了线程以及多处理技术。&lt;br&gt; &lt;strong&gt;定义&lt;/strong&gt;&lt;br&gt;JMM（Java内存模型，Java Memory Model的缩写）是控制Java线程之间、线程和主存之间通信的协议。&lt;br&gt;内存模型描述了程序中各个变量（实例域、静态域和数组元素）之间的关系，以及在实际计算机系统中将变量存储到内存、从内存中取出变量这样的底层细节。&lt;br&gt;内存模型的规则：&lt;br&gt;原子性&lt;br&gt;可见性&lt;br&gt;可排序性&lt;br&gt;jvm实例：&lt;br&gt;1.java虚拟机有一个类加载器作为jvm的子系统，类加载器针对class文件进行检测来加载对应的类接口&lt;br&gt;2，jvm内部有一个执行引擎，用来负责代码的解释和执行&lt;br&gt;3，程序运行，通过内存来存储字节码，附加信息，对象，方法参数，返回值，局部变量以及中间结果的很多内容&lt;br&gt;
    
    </summary>
    
    
      <category term="编程" scheme="http://lxh5431.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>几个重要的注意点</title>
    <link href="http://lxh5431.github.io/2016/06/27/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%87%A0%E4%B8%AA%E9%87%8D%E8%A6%81%E7%9A%84%E6%B3%A8%E6%84%8F%E7%82%B9/"/>
    <id>http://lxh5431.github.io/2016/06/27/面向对象的几个重要的注意点/</id>
    <published>2016-06-26T16:00:00.000Z</published>
    <updated>2016-07-06T09:50:26.201Z</updated>
    
    <content type="html">&lt;h2 id=&quot;访问权限&quot;&gt;&lt;a href=&quot;#访问权限&quot; class=&quot;headerlink&quot; title=&quot;﻿访问权限&quot;&gt;&lt;/a&gt;﻿访问权限&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;private&lt;/strong&gt;&lt;br&gt;私有仅仅是封装的一种体现形式而已。&lt;br&gt;私有成员：其他类不能直接创建对象访问，所以只有通过本类对外提供具体的访问方式来完成对私有的访问，可以通过对外提供函数形式对其进行访问&lt;br&gt;好处：可以在函数中加入逻辑判断等操作，对数据进行判断等操作&lt;br&gt;总结：开发时，记住，属性是用于存储数据，直接被访问，容易出现安全隐患，所以，类中的属性通常被私有化，并对外提供公共的访问方法&lt;/p&gt;
&lt;h2 id=&quot;成员变量和局部变量的区别：&quot;&gt;&lt;a href=&quot;#成员变量和局部变量的区别：&quot; class=&quot;headerlink&quot; title=&quot;成员变量和局部变量的区别：&quot;&gt;&lt;/a&gt;成员变量和局部变量的区别：&lt;/h2&gt;&lt;p&gt;1：成员变量直接定义在类中。&lt;br&gt;   局部变量定义在方法中，参数上，语句中。&lt;br&gt;2：成员变量在这个类中有效。&lt;br&gt;局部变量只在自己所属的大括号内有效，大括号结束，局部变量失去作用域。&lt;br&gt;3：成员变量存在于堆内存中，随着对象的产生而存在，消失而消失。&lt;br&gt;局部变量存在于栈内存中，随着所属区域的运行而存在，结束而释放。&lt;br&gt;针对性，函数中的一种。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;特点：&lt;br&gt;1：该函数的名称和所在类的名称相同。&lt;br&gt;2：不需要定义返回值类型。&lt;br&gt;3：该函数没有具体的返回值。&lt;br&gt;记住：所有对象创建时，都需要初始化才可以使用。&lt;/p&gt;
&lt;h2 id=&quot;创建一个对象都在内存中做了什么事情？&quot;&gt;&lt;a href=&quot;#创建一个对象都在内存中做了什么事情？&quot; class=&quot;headerlink&quot; title=&quot;创建一个对象都在内存中做了什么事情？&quot;&gt;&lt;/a&gt;创建一个对象都在内存中做了什么事情？&lt;/h2&gt;&lt;p&gt;1：先将硬盘上指定位置的Person.class文件加载进内存。&lt;br&gt;2：执行main方法时，在栈内存中开辟了main方法的空间(压栈-进栈)，然后在main方法的栈区分配了一个变量p。&lt;br&gt;3：在堆内存中开辟一个实体空间，&lt;strong&gt;分配了一个内存首地址值&lt;/strong&gt;。new&lt;br&gt;4：在该实体空间中进行属性的空间分配，并进行了默认初始化。&lt;br&gt;5：对空间中的属性进行显示初始化。&lt;br&gt;6：进行实体的构造代码块初始化。&lt;br&gt;7：调用该实体对应的构造函数，进行构造函数初始化。（）&lt;br&gt;8：将 &lt;strong&gt;首地址&lt;/strong&gt; 赋值给p ，p变量就引用了该实体。(指向了该对象)&lt;/p&gt;
&lt;h3 id=&quot;this的使用&quot;&gt;&lt;a href=&quot;#this的使用&quot; class=&quot;headerlink&quot; title=&quot;this的使用&quot;&gt;&lt;/a&gt;this的使用&lt;/h3&gt;&lt;p&gt;this：代表对象，就是所在函数所属对象的引用。&lt;br&gt;1.访问当前对象的成员变量，this.成员变量&lt;br&gt;2.a访问当前对象的成员方法，其形式为&lt;br&gt;this.成员方法&lt;br&gt;当有重载的构造方法，用来引用同类的其他构造方法，this（参数）&lt;/p&gt;
&lt;h3 id=&quot;static：-关键字，是一个修饰符，用于修饰成员-成员变量和成员函数-。&quot;&gt;&lt;a href=&quot;#static：-关键字，是一个修饰符，用于修饰成员-成员变量和成员函数-。&quot; class=&quot;headerlink&quot; title=&quot;static： 关键字，是一个修饰符，用于修饰成员(成员变量和成员函数)。&quot;&gt;&lt;/a&gt;static： 关键字，是一个修饰符，用于修饰成员(成员变量和成员函数)。&lt;/h3&gt;&lt;p&gt;特点：&lt;br&gt;1，想要实现对象中的共性数据的对象共享，可以将这个数据进行静态修饰。&lt;br&gt;2，被静态修饰的成员，可以直接被类名所调用。也就是说，静态的成员多了一种调用方式。类名.静态方式。&lt;br&gt;3，静态随着类的加载而加载，而且优先于对象存在。&lt;/p&gt;
&lt;p&gt;弊端：&lt;br&gt;1，有些数据是对象特有的数据，是不可以被静态修饰的。因为那样的话，特有数据会变成对象的共享数据。这样对事物的描述就出了问题。所以，在定义静态时，必须要明确，这个数据是否是被对象所共享的。&lt;br&gt;2，静态方法只能访问静态成员，不可以访问非静态成员。&lt;br&gt;因为静态方法加载时，优先于对象存在，所以没有办法访问对象中的成员。&lt;br&gt;3，静态方法中不能使用this，super关键字。&lt;br&gt;因为this代表对象，而静态在时，有可能没有对象，所以this无法使用。&lt;br&gt;4，主函数是静态的。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;访问权限&quot;&gt;&lt;a href=&quot;#访问权限&quot; class=&quot;headerlink&quot; title=&quot;﻿访问权限&quot;&gt;&lt;/a&gt;﻿访问权限&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;private&lt;/strong&gt;&lt;br&gt;私有仅仅是封装的一种体现形式而已。&lt;br&gt;私有成员：其他类不能直接创建对象访问，所以只有通过本类对外提供具体的访问方式来完成对私有的访问，可以通过对外提供函数形式对其进行访问&lt;br&gt;好处：可以在函数中加入逻辑判断等操作，对数据进行判断等操作&lt;br&gt;总结：开发时，记住，属性是用于存储数据，直接被访问，容易出现安全隐患，所以，类中的属性通常被私有化，并对外提供公共的访问方法&lt;/p&gt;
&lt;h2 id=&quot;成员变量和局部变量的区别：&quot;&gt;&lt;a href=&quot;#成员变量和局部变量的区别：&quot; class=&quot;headerlink&quot; title=&quot;成员变量和局部变量的区别：&quot;&gt;&lt;/a&gt;成员变量和局部变量的区别：&lt;/h2&gt;&lt;p&gt;1：成员变量直接定义在类中。&lt;br&gt;   局部变量定义在方法中，参数上，语句中。&lt;br&gt;2：成员变量在这个类中有效。&lt;br&gt;局部变量只在自己所属的大括号内有效，大括号结束，局部变量失去作用域。&lt;br&gt;3：成员变量存在于堆内存中，随着对象的产生而存在，消失而消失。&lt;br&gt;局部变量存在于栈内存中，随着所属区域的运行而存在，结束而释放。&lt;br&gt;针对性，函数中的一种。&lt;br&gt;
    
    </summary>
    
      <category term="面向对象" scheme="http://lxh5431.github.io/categories/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
    
      <category term="编程" scheme="http://lxh5431.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>java基础知识</title>
    <link href="http://lxh5431.github.io/2016/06/27/%E5%9F%BA%E6%9C%AC%E7%9A%84java%E7%9F%A5%E8%AF%86/"/>
    <id>http://lxh5431.github.io/2016/06/27/基本的java知识/</id>
    <published>2016-06-26T16:00:00.000Z</published>
    <updated>2016-06-27T13:55:35.153Z</updated>
    
    <content type="html">&lt;h2 id=&quot;1，关键字：其实就是某种语言赋予了特殊的单词，&quot;&gt;&lt;a href=&quot;#1，关键字：其实就是某种语言赋予了特殊的单词，&quot; class=&quot;headerlink&quot; title=&quot;1，关键字：其实就是某种语言赋予了特殊的单词，&quot;&gt;&lt;/a&gt;1，关键字：其实就是某种语言赋予了特殊的单词，&lt;/h2&gt;&lt;p&gt;保留字：其实就是还没有赋予特殊含义，但是准备日后要使用的单词&lt;/p&gt;
&lt;h2 id=&quot;2-标示符：在程序中自定义的名词，比如类名，函数名，包含0-9，a-z&quot;&gt;&lt;a href=&quot;#2-标示符：在程序中自定义的名词，比如类名，函数名，包含0-9，a-z&quot; class=&quot;headerlink&quot; title=&quot;2.标示符：在程序中自定义的名词，比如类名，函数名，包含0-9，a-z,;&quot;&gt;&lt;/a&gt;2.标示符：在程序中自定义的名词，比如类名，函数名，包含0-9，a-z,;&lt;/h2&gt;&lt;p&gt;要点：1，数字不可以开头 2.不可以使用关键字&lt;br&gt;3.常量：是在程序中不会变的数据&lt;br&gt;4。变量：其实就是内存中的一个存储空间，用于存储常量数据&lt;br&gt;方便运算，特点：变量空间可以重复&lt;br&gt;变量的作用域：&lt;br&gt;作用域从变量定义位置开始，到该变量所在那对大括号结束&lt;br&gt;生命周期：&lt;br&gt; 变量从定义的位置开始在内存中活了&lt;br&gt; 变量到达它所在的作用域的时候从内存中消失&lt;br&gt; &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;数据类型：&lt;br&gt;基础数据类型：byte，short，int long float,double, char,boolean&lt;br&gt;引用类型：数组，类，接口&lt;br&gt;级别从低到高：byte char short–&amp;gt;int–&amp;gt;float–&amp;gt;long–&amp;gt;double&lt;br&gt;自动类型转换：从低级到高级，系用自动转换&lt;br&gt;强制类型转换：把一个高级别的数赋给一个别的数级别低的变量&lt;br&gt;运算符号：&lt;br&gt;    1）、算术运算符。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    + - * / %   %:任何整数模2不是0就是1，所以只要改变被模数就可以实现开关运算。
    +:连接符。
    ++,--
2）、赋值运算符。
    =  += -= *= /= %=
3）、比较运算符。
    特点：该运算符的特点是：运算完的结果，要么是true，要么是false。
4）、逻辑运算符。
    &amp;amp;  |  ^  !   &amp;amp;&amp;amp;   ||
    逻辑运算符除了 !  外都是用于连接两个boolean类型表达式。
    &amp;amp;: 只有两边都为true结果是true。否则就是false。
    |:只要两边都为false结果是false，否则就是true
    ^:异或：和或有点不一样。
         两边结果一样，就为false。
         两边结果不一样，就为true.
    &amp;amp; 和 &amp;amp;&amp;amp;区别： &amp;amp; ：无论左边结果是什么，右边都参与运算。
                  &amp;amp;&amp;amp;:短路与，如果左边为false，那么右边不参数与运算。
    | 和|| 区别：|：两边都运算。
                ||：短路或，如果左边为true，那么右边不参与运算。
5）、位运算符:用于操作二进制位的运算符。
    &amp;amp;  |  ^
    &amp;lt;&amp;lt;  &amp;gt;&amp;gt;   &amp;gt;&amp;gt;&amp;gt;(无符号右移)
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1，关键字：其实就是某种语言赋予了特殊的单词，&quot;&gt;&lt;a href=&quot;#1，关键字：其实就是某种语言赋予了特殊的单词，&quot; class=&quot;headerlink&quot; title=&quot;1，关键字：其实就是某种语言赋予了特殊的单词，&quot;&gt;&lt;/a&gt;1，关键字：其实就是某种语言赋予了特殊的单词，&lt;/h2&gt;&lt;p&gt;保留字：其实就是还没有赋予特殊含义，但是准备日后要使用的单词&lt;/p&gt;
&lt;h2 id=&quot;2-标示符：在程序中自定义的名词，比如类名，函数名，包含0-9，a-z&quot;&gt;&lt;a href=&quot;#2-标示符：在程序中自定义的名词，比如类名，函数名，包含0-9，a-z&quot; class=&quot;headerlink&quot; title=&quot;2.标示符：在程序中自定义的名词，比如类名，函数名，包含0-9，a-z,;&quot;&gt;&lt;/a&gt;2.标示符：在程序中自定义的名词，比如类名，函数名，包含0-9，a-z,;&lt;/h2&gt;&lt;p&gt;要点：1，数字不可以开头 2.不可以使用关键字&lt;br&gt;3.常量：是在程序中不会变的数据&lt;br&gt;4。变量：其实就是内存中的一个存储空间，用于存储常量数据&lt;br&gt;方便运算，特点：变量空间可以重复&lt;br&gt;变量的作用域：&lt;br&gt;作用域从变量定义位置开始，到该变量所在那对大括号结束&lt;br&gt;生命周期：&lt;br&gt; 变量从定义的位置开始在内存中活了&lt;br&gt; 变量到达它所在的作用域的时候从内存中消失&lt;br&gt;
    
    </summary>
    
    
      <category term="编程" scheme="http://lxh5431.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>java内存基础</title>
    <link href="http://lxh5431.github.io/2016/06/27/%E5%9F%BA%E6%9C%AC%E7%9A%84java%E5%86%85%E5%AD%98/"/>
    <id>http://lxh5431.github.io/2016/06/27/基本的java内存/</id>
    <published>2016-06-26T16:00:00.000Z</published>
    <updated>2016-06-27T13:55:35.141Z</updated>
    
    <content type="html">&lt;p&gt;java分了5片内存。&lt;/p&gt;
&lt;h3 id=&quot;1：寄存器。2：本地方法区。3：方法区。4：栈。5：堆。&quot;&gt;&lt;a href=&quot;#1：寄存器。2：本地方法区。3：方法区。4：栈。5：堆。&quot; class=&quot;headerlink&quot; title=&quot;1：寄存器。2：本地方法区。3：方法区。4：栈。5：堆。&quot;&gt;&lt;/a&gt;1：寄存器。2：本地方法区。3：方法区。4：栈。5：堆。&lt;/h3&gt;&lt;p&gt;栈：存储的都是局部变量 ( 函数中定义的变量，函数上的参数，语句中的变量 )；&lt;br&gt;    只要数据运算完成所在的区域结束，该数据就会被释放。&lt;br&gt;堆：用于存储数组和对象，也就是实体。啥是实体啊？就是用于封装多个数据的。&lt;br&gt;1：每一个实体都有内存首地址值。&lt;br&gt;2：堆内存中的变量都有默认初始化值。因为数据类型不同，值也不一样。&lt;br&gt;3：垃圾回收机制。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;java分了5片内存。&lt;/p&gt;
&lt;h3 id=&quot;1：寄存器。2：本地方法区。3：方法区。4：栈。5：堆。&quot;&gt;&lt;a href=&quot;#1：寄存器。2：本地方法区。3：方法区。4：栈。5：堆。&quot; class=&quot;headerlink&quot; title=&quot;1：寄存器。2：本地方法区。3：方
    
    </summary>
    
    
      <category term="编程" scheme="http://lxh5431.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>论古典文学和网络文学</title>
    <link href="http://lxh5431.github.io/2016/06/24/%E8%AE%BA%E5%8F%A4%E5%85%B8%E6%96%87%E5%AD%A6%E5%92%8C%E7%BD%91%E7%BB%9C%E6%96%87%E5%AD%A6/"/>
    <id>http://lxh5431.github.io/2016/06/24/论古典文学和网络文学/</id>
    <published>2016-06-24T15:09:31.000Z</published>
    <updated>2016-06-25T08:17:39.836Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;http://o94r16s1l.bkt.clouddn.com/QQ%E5%9B%BE%E7%89%8720160623194632.jpg&quot; alt=&quot;如果还在，我知道我要努力&quot;&gt;&lt;br&gt;近总算是从网络小说里解脱出来，感觉脱离了苦海，但又陷入了一种更加空虚的状态，姑且把它称为孤独的感觉，总之就是一种不想动的感觉，你要问我从小说里学到了什么，学到了想象，天马行空和不拘一格，还有就是对世界的重新定义，适者生存，主角的成功总能有诸多神助，这正说明了一个下层人民成就事业的一种磨砺，可是生活中哪有那么多的神助，你以为这世界围绕你转的吗，其实小说毕竟是小说，不以现在生活为基础，所以算是流行性，要算上是经典，我觉得有些小说还是有一点反应一个人的性格和环境的，但这并不能成为理由去追逐网络小说，所以网络小说的意义在于符合了大多数人的一种心里欲望，对人们超出自己局限的范围内的愿望得到了满足，可正是这种欲望却成为小说的买点，但也是缺点，这样会虚高了人的欲望，错误的评价自身的价值，从而产生不同的路径，另一点却是现在的经典小说过于深奥，很多人没有那么多的时间去认真的阅读一本厚重的书，从而现在的小型鸡汤更能吸引观众，不是经典小说不好，而不是贵，而是看一本经典小说著作要花时间去精读，去摸索所有塑造人物的性格和心理还有所处时代和政治的开明，当然一个文笔娴静或文笔有深度的人会让你收获更加多，因为书籍是传递知识的载体，文字是载重着思想，所以认真的去读书，你就能看到不一样的人生，而看电视和看网络小说你是看不到的，因为他们更注重的是场景的的描写和一些动作的描写，在刻画人物和心理上难免是粗糙的，不得不承认网络小说兴起是有他的道理，但要真正的去占领古典小说，这是几世纪也不可能完成的，也许现在的网络小说只能存在于我们这一代，下一代就会被另一种小说所替代，这是一个时代的产物。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;  网络小说带动了一个产业的发展，所以其存在意义是不言而喻的，但我现在更喜欢去阅读一本厚重的书，因为当你经历过一种东西，或者等你视野到达不同层次的时候就能够从不同方面去了解未来的趋势，预测世界变革的历程，感悟不一样的思路和设计思想，这正是现代人需要的一种状况，不是我们不去发现，有时候我们更应该去亲自去走一走，因为未来的路还需要自己走。走多少路，看多少风景，经历多少人生，当你沉溺在古典小说的世界里，你已经又到达另一个世界了，当你认真的去观察和了解不同的东西，才发现我们一直在发现世界，从哪里来，到哪里去，尘世沉浮，我在路上。&lt;/p&gt;
&lt;p&gt;看过那么多小说真正存在我记忆的估计也就那几本刚开始的基本小说，建立了我对于网络小说的圆心，然后就是在此基础之上扩展，万变不离其中的套路，感觉心好累，因为我总感觉一直在一个圈子里出不来了，看古典小说就不一样，因为你在每一本小说都能找到一种性格，那时候读四大喜剧时感觉都是悲剧，这就是读哈姆雷特有一千个哈姆雷特，因为你所处的环境不同，感受到的境遇是不一样的，读经典小说正是塑造了这样一种魅力的独到之处，很多人怀念那时候在读书馆的那种从天明看到天黑的日子，因为那时候我们可以说在经历不一样的人生，然后变成你的人生阅历，伴随你一生，所以很多人问我读什么书的时候，我不再会向他推介网络小说，因为假如时间足够就去读一些觉得重要的书吧，毕竟经历需要时间，而我们最宝贵的莫过于时间。书还在，人未老，当你心还在。&lt;/p&gt;
&lt;p&gt;我就不去辨别那种书好，我只是觉得在不一样的年纪去看不一样的书，然后认真过，我觉得就是胜利，我们不奢求读一本书就去决定我们的人生，读书，修身，然后才能活出精彩的自己                                          ———————榕树下&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://o94r16s1l.bkt.clouddn.com/QQ%E5%9B%BE%E7%89%8720160623194632.jpg&quot; alt=&quot;如果还在，我知道我要努力&quot;&gt;&lt;br&gt;近总算是从网络小说里解脱出来，感觉脱离了苦海，但又陷入了一种更加空虚的状态，姑且把它称为孤独的感觉，总之就是一种不想动的感觉，你要问我从小说里学到了什么，学到了想象，天马行空和不拘一格，还有就是对世界的重新定义，适者生存，主角的成功总能有诸多神助，这正说明了一个下层人民成就事业的一种磨砺，可是生活中哪有那么多的神助，你以为这世界围绕你转的吗，其实小说毕竟是小说，不以现在生活为基础，所以算是流行性，要算上是经典，我觉得有些小说还是有一点反应一个人的性格和环境的，但这并不能成为理由去追逐网络小说，所以网络小说的意义在于符合了大多数人的一种心里欲望，对人们超出自己局限的范围内的愿望得到了满足，可正是这种欲望却成为小说的买点，但也是缺点，这样会虚高了人的欲望，错误的评价自身的价值，从而产生不同的路径，另一点却是现在的经典小说过于深奥，很多人没有那么多的时间去认真的阅读一本厚重的书，从而现在的小型鸡汤更能吸引观众，不是经典小说不好，而不是贵，而是看一本经典小说著作要花时间去精读，去摸索所有塑造人物的性格和心理还有所处时代和政治的开明，当然一个文笔娴静或文笔有深度的人会让你收获更加多，因为书籍是传递知识的载体，文字是载重着思想，所以认真的去读书，你就能看到不一样的人生，而看电视和看网络小说你是看不到的，因为他们更注重的是场景的的描写和一些动作的描写，在刻画人物和心理上难免是粗糙的，不得不承认网络小说兴起是有他的道理，但要真正的去占领古典小说，这是几世纪也不可能完成的，也许现在的网络小说只能存在于我们这一代，下一代就会被另一种小说所替代，这是一个时代的产物。&lt;br&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="http://lxh5431.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>xml在java中的解析</title>
    <link href="http://lxh5431.github.io/2016/06/24/xml%E5%9C%A8java%E4%B8%AD%E7%9A%84%E8%A7%A3%E6%9E%90/"/>
    <id>http://lxh5431.github.io/2016/06/24/xml在java中的解析/</id>
    <published>2016-06-24T15:01:11.000Z</published>
    <updated>2016-06-25T08:17:39.784Z</updated>
    
    <content type="html">&lt;h3 id=&quot;基于xml解析存储的java应用系统的分析&quot;&gt;&lt;a href=&quot;#基于xml解析存储的java应用系统的分析&quot; class=&quot;headerlink&quot; title=&quot;基于xml解析存储的java应用系统的分析&quot;&gt;&lt;/a&gt;基于xml解析存储的java应用系统的分析&lt;/h3&gt;&lt;p&gt;概念：&lt;br&gt;可扩展标记语言（英语：eXtensible Markup Language，简称: XML），是一种标记语言。标记指计算机所能理解的信息符号，通过此种标记，计算机之间可以处理包含各种信息的文章等。如何定义这些标记，既可以选择国际通用的标记语言，比如HTML，也可以使用像XML这样由相关人士自由决定的标记语言，这就是语言的可扩展性。XML是从标准通用标记语言（SGML）中简化修改出来的。它主要用到的有可扩展标记语言、可扩展样式语言（XSL）、XBRL和XPath等。&lt;br&gt;Xml的作用&lt;br&gt;XML设计用来传送及携带数据信息，不用来表现或展示数据，HTML语言则用来表现数据，所以XML用途的焦点是它说明数据是什么，以及携带数据信息。&lt;br&gt;•    丰富文件（Rich Documents）- 自定文件描述并使其更丰富&lt;br&gt;•    属于文件为主的XML技术应用&lt;br&gt;•    标记是用来定义一份资料应该如何呈现&lt;br&gt;•    元数据（Metadata）- 描述其它文件或网络资讯&lt;br&gt;•    属于资料为主的XML技术应用&lt;br&gt;•    标记是用来说明一份资料的意义&lt;br&gt;•    配置文档（Configuration Files）- 描述软件设置的参数&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Xml在java应用中的应用&quot;&gt;&lt;a href=&quot;#Xml在java应用中的应用&quot; class=&quot;headerlink&quot; title=&quot;Xml在java应用中的应用&quot;&gt;&lt;/a&gt;Xml在java应用中的应用&lt;/h3&gt;&lt;p&gt;java对xml有四种解析方式&lt;/p&gt;
&lt;h4 id=&quot;1-DOM（Document-Object-Model&quot;&gt;&lt;a href=&quot;#1-DOM（Document-Object-Model&quot; class=&quot;headerlink&quot; title=&quot;1. DOM（Document Object Model)&quot;&gt;&lt;/a&gt;1. DOM（Document Object Model)&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;DOM是用与平台和语言无关的方式表示XML文档的官方W3C标准。DOM是以层次结构组织的节点或信息片断的集合。这个层次结构允许开发人员在树中寻找特定信息。分析该结构通常需要加载整个文档和构造层次结构，然后才能做任何工作。由于它是基于信息层次的，因而DOM被认为是基于树或基于对象的。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;【优点】&lt;br&gt;      ①允许应用程序对数据和结构做出更改。&lt;br&gt;      ②访问是双向的，可以在任何时候在树中上下导航，获取和操作任意部分的数据。&lt;br&gt;【缺点】&lt;br&gt;      ①通常需要加载整个XML文档来构造层次结构，消耗资源大。&lt;br&gt;例子：&lt;br&gt;Xml代码：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ DOM&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;?xml version=”1.0” encoding=”UTF-8”?&amp;gt;&lt;/p&gt;
&lt;p&gt;&lt;users&gt;&lt;br&gt;    &lt;user id=&quot;0&quot;&gt;&lt;br&gt;        &lt;name&gt;Alexia&lt;/name&gt;&lt;br&gt;        &lt;age&gt;23&lt;/age&gt;&lt;br&gt;        &lt;sex&gt;Female&lt;/sex&gt;&lt;br&gt;    &lt;/user&gt;&lt;br&gt;    &lt;user id=&quot;1&quot;&gt;&lt;br&gt;        &lt;name&gt;Edward&lt;/name&gt;&lt;br&gt;        &lt;age&gt;24&lt;/age&gt;&lt;br&gt;        &lt;sex&gt;Male&lt;/sex&gt;&lt;br&gt;    &lt;/user&gt;&lt;br&gt;    &lt;user id=&quot;2&quot;&gt;&lt;br&gt;        &lt;name&gt;wjm&lt;/name&gt;&lt;br&gt;        &lt;age&gt;23&lt;/age&gt;&lt;br&gt;        &lt;sex&gt;Female&lt;/sex&gt;&lt;br&gt;    &lt;/user&gt;&lt;br&gt;    &lt;user id=&quot;3&quot;&gt;&lt;br&gt;        &lt;name&gt;wh&lt;/name&gt;&lt;br&gt;        &lt;age&gt;24&lt;/age&gt;&lt;br&gt;        &lt;sex&gt;Male&lt;/sex&gt;&lt;br&gt;    &lt;/user&gt;&lt;br&gt;&lt;/users&gt;&lt;br&gt;package com.xml;&lt;/p&gt;
&lt;p&gt;import java.io.FileNotFoundException;&lt;br&gt;import java.io.FileOutputStream;&lt;br&gt;import java.io.IOException;&lt;br&gt;import java.io.PrintWriter;&lt;br&gt;import javax.xml.parsers.DocumentBuilder;&lt;br&gt;import javax.xml.parsers.DocumentBuilderFactory;&lt;br&gt;import javax.xml.parsers.ParserConfigurationException;&lt;br&gt;import javax.xml.transform.OutputKeys;&lt;br&gt;import javax.xml.transform.Transformer;&lt;br&gt;import javax.xml.transform.TransformerConfigurationException;&lt;br&gt;import javax.xml.transform.TransformerException;&lt;br&gt;import javax.xml.transform.TransformerFactory;&lt;br&gt;import javax.xml.transform.dom.DOMSource;&lt;br&gt;import javax.xml.transform.stream.StreamResult;&lt;br&gt;import org.w3c.dom.Document;&lt;br&gt;import org.w3c.dom.Element;&lt;br&gt;import org.w3c.dom.Node;&lt;br&gt;import org.w3c.dom.NodeList;&lt;br&gt;import org.xml.sax.SAXException;&lt;/p&gt;
&lt;p&gt;/**&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;@author lxh&lt;br&gt;*&lt;/li&gt;
&lt;li&gt;DOM 解析XML文档&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;public class DomDemo implements XmlDocument {&lt;br&gt;    private Document document;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public void parserXml(String fileName) {
    try {
        DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
        DocumentBuilder db = dbf.newDocumentBuilder();
        Document document = db.parse(fileName);
        NodeList users = document.getChildNodes();

        for (int i = 0; i &amp;lt; users.getLength(); i++) {
            Node user = users.item(i);
            NodeList userInfo = user.getChildNodes();

            for (int j = 0; j &amp;lt; userInfo.getLength(); j++) {
                Node node = userInfo.item(j);
                NodeList userMeta = node.getChildNodes();

                for (int k = 0; k &amp;lt; userMeta.getLength(); k++) {
                    if(userMeta.item(k).getNodeName() != &amp;quot;#text&amp;quot;)
                        System.out.println(userMeta.item(k).getNodeName()
                                + &amp;quot;:&amp;quot; + userMeta.item(k).getTextContent());
                }

                System.out.println();
            }
        }

    } catch (FileNotFoundException e) {
        e.printStackTrace();
    } catch (ParserConfigurationException e) {
        e.printStackTrace();
    } catch (SAXException e) {
        e.printStackTrace();
    } catch (IOException e) {
        e.printStackTrace();
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;}&lt;/p&gt;
&lt;h2 id=&quot;2-SAX（Simple-API-for-XML&quot;&gt;&lt;a href=&quot;#2-SAX（Simple-API-for-XML&quot; class=&quot;headerlink&quot; title=&quot;2. SAX（Simple API for XML)&quot;&gt;&lt;/a&gt;2. SAX（Simple API for XML)&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;SAX处理的优点非常类似于流媒体的优点。分析能够立即开始，而不是等待所有的数据被处理。而且，由于应用程序只是在读取数据时检查数据，因此不需要将数据存储在内存中。这对于大型文档来说是个巨大的优点。事实上，应用程序甚至不必解析整个文档；它可以在某个条件得到满足时停止解析。一般来说，SAX还比它的替代者DOM快许多。
选择DOM还是选择SAX？ 对于需要自己编写代码来处理XML文档的开发人员来说， 选择DOM还是SAX解析模型是一个非常重要的设计决策。 DOM采用建立树形结构的方式访问XML文档，而SAX采用的是事件模型。
DOM解析器把XML文档转化为一个包含其内容的树，并可以对树进行遍历。用DOM解析模型的优点是编程容易，开发人员只需要调用建树的指令，然后利用navigation APIs访问所需的树节点来完成任务。可以很容易的添加和修改树中的元素。然而由于使用DOM解析器的时候需要处理整个XML文档，所以对性能和内存的要求比较高，尤其是遇到很大的XML文件的时候。由于它的遍历能力，DOM解析器常用于XML文档需要频繁的改变的服务中。
SAX解析器采用了基于事件的模型，它在解析XML文档的时候可以触发一系列的事件，当发现给定的tag的时候，它可以激活一个回调方法，告诉该方法制定的标签已经找到。SAX对内存的要求通常会比较低，因为它让开发人员自己来决定所要处理的tag.特别是当开发人员只需要处理文档中所包含的部分数据时，SAX这种扩展能力得到了更好的体现。但用SAX解析器的时候编码工作会比较困难，而且很难同时访问同一个文档中的多处不同数据。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;【优势】&lt;br&gt;     ①不需要等待所有数据都被处理，分析就能立即开始。&lt;br&gt;     ②只在读取数据时检查数据，不需要保存在内存中。&lt;br&gt;     ③可以在某个条件得到满足时停止解析，不必解析整个文档。&lt;br&gt;     ④效率和性能较高，能解析大于系统内存的文档。&lt;br&gt;【缺点】&lt;br&gt;     ①需要应用程序自己负责TAG的处理逻辑（例如维护父/子关系等），文档越复杂程序就越复杂。&lt;br&gt;     ②单向导航，无法定位文档层次，很难同时访问同一文档的不同部分数据，不支持XPath。&lt;br&gt;     &lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ SAX&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;package com.xml;&lt;/p&gt;
&lt;p&gt;import java.io.FileInputStream;&lt;br&gt;import java.io.FileNotFoundException;&lt;br&gt;import java.io.FileOutputStream;&lt;br&gt;import java.io.IOException;&lt;br&gt;import java.io.InputStream;&lt;br&gt;import java.io.OutputStream;&lt;br&gt;import java.io.StringWriter;&lt;/p&gt;
&lt;p&gt;import javax.xml.parsers.ParserConfigurationException;&lt;br&gt;import javax.xml.parsers.SAXParser;&lt;br&gt;import javax.xml.parsers.SAXParserFactory;&lt;br&gt;import javax.xml.transform.OutputKeys;&lt;br&gt;import javax.xml.transform.Result;&lt;br&gt;import javax.xml.transform.Transformer;&lt;br&gt;import javax.xml.transform.TransformerConfigurationException;&lt;br&gt;import javax.xml.transform.sax.SAXTransformerFactory;&lt;br&gt;import javax.xml.transform.sax.TransformerHandler;&lt;br&gt;import javax.xml.transform.stream.StreamResult;&lt;/p&gt;
&lt;p&gt;import org.xml.sax.Attributes;&lt;br&gt;import org.xml.sax.SAXException;&lt;br&gt;import org.xml.sax.helpers.AttributesImpl;&lt;br&gt;import org.xml.sax.helpers.DefaultHandler;&lt;/p&gt;
&lt;p&gt;/**&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;@author lxh&lt;br&gt;*&lt;/li&gt;
&lt;li&gt;SAX 解析XML文档&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;public class SaxDemo implements XmlDocument {&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public void parserXml(String fileName) {
    SAXParserFactory saxfac = SAXParserFactory.newInstance();

    try {
        SAXParser saxparser = saxfac.newSAXParser();
        InputStream is = new FileInputStream(fileName);
        saxparser.parse(is, new MySAXHandler());
    } catch (ParserConfigurationException e) {
        e.printStackTrace();
    } catch (SAXException e) {
        e.printStackTrace();
    } catch (FileNotFoundException e) {
        e.printStackTrace();
    } catch (IOException e) {
        e.printStackTrace();
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;class MySAXHandler extends DefaultHandler {&lt;br&gt;    boolean hasAttribute = false;&lt;br&gt;    Attributes attributes = null;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public void startDocument() throws SAXException {
    // System.out.println(&amp;quot;文档开始打印了&amp;quot;);
}

public void endDocument() throws SAXException {
    // System.out.println(&amp;quot;文档打印结束了&amp;quot;);
}

public void startElement(String uri, String localName, String qName,
        Attributes attributes) throws SAXException {
    if (qName.equals(&amp;quot;users&amp;quot;)) {
        return;
    }
    if (qName.equals(&amp;quot;user&amp;quot;)) {
        return;
    }
    if (attributes.getLength() &amp;gt; 0) {
        this.attributes = attributes;
        this.hasAttribute = true;
    }
}

public void endElement(String uri, String localName, String qName)
        throws SAXException {
    if (hasAttribute &amp;amp;&amp;amp; (attributes != null)) {
        for (int i = 0; i &amp;lt; attributes.getLength(); i++) {
            System.out.print(attributes.getQName(0) + &amp;quot;:&amp;quot;
                    + attributes.getValue(0));
        }
    }
}

public void characters(char[] ch, int start, int length)
        throws SAXException {
    System.out.print(new String(ch, start, length));
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;}&lt;/p&gt;
&lt;h2 id=&quot;3-JDOM-Java-based-Document-Object-Model&quot;&gt;&lt;a href=&quot;#3-JDOM-Java-based-Document-Object-Model&quot; class=&quot;headerlink&quot; title=&quot;3. JDOM(Java-based Document Object Model)&quot;&gt;&lt;/a&gt;3. JDOM(Java-based Document Object Model)&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;JDOM的目的是成为Java特定文档模型，它简化与XML的交互并且比使用DOM实现更快。由于是第一个Java特定模型，JDOM一直得到大力推广和促进。正在考虑通过“Java规范请求JSR-102”将它最终用作“Java标准扩展”。从2000年初就已经开始了JDOM开发。
JDOM与DOM主要有两方面不同。首先，JDOM仅使用具体类而不使用接口。这在某些方面简化了API，但是也限制了灵活性。第二，API大量使用了Collections类，简化了那些已经熟悉这些类的Java开发者的使用。
JDOM文档声明其目的是“使用20%（或更少）的精力解决80%（或更多）Java/XML问题”（根据学习曲线假定为20%）。JDOM对于大多数Java/XML应用程序来说当然是有用的，并且大多数开发者发现API比DOM容易理解得多。JDOM还包括对程序行为的相当广泛检查以防止用户做任何在XML中无意义的事。然而，它仍需要您充分理解XML以便做一些超出基本的工作（或者甚至理解某些情况下的错误）。这也许是比学习DOM或JDOM接口都更有意义的工作。
JDOM自身不包含解析器。它通常使用SAX2解析器来解析和验证输入XML文档（尽管它还可以将以前构造的DOM表示作为输入）。它包含一些转换器以将JDOM表示输出成SAX2事件流、DOM模型或XML文本文档。JDOM是在Apache许可证变体下发布的开放源码。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;【优点】&lt;br&gt;     ①使用具体类而不是接口，简化了DOM的API。&lt;br&gt;     ②大量使用了Java集合类，方便了Java开发人员。&lt;br&gt;【缺点】&lt;br&gt;     ①没有较好的灵活性。&lt;br&gt;     ②性能较差。&lt;br&gt;例子：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ JDOM&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;package com.xml;&lt;/p&gt;
&lt;p&gt;import java.io.FileNotFoundException;&lt;br&gt;import java.io.FileOutputStream;&lt;br&gt;import java.io.IOException;&lt;br&gt;import java.util.List;&lt;/p&gt;
&lt;p&gt;import org.jdom2.Document;&lt;br&gt;import org.jdom2.Element;&lt;br&gt;import org.jdom2.JDOMException;&lt;br&gt;import org.jdom2.input.SAXBuilder;&lt;br&gt;import org.jdom2.output.XMLOutputter;&lt;/p&gt;
&lt;p&gt;/**&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;@author Alexia&lt;br&gt;*&lt;/li&gt;
&lt;li&gt;JDOM 解析XML文档&lt;br&gt;*&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;public class JDomDemo implements XmlDocument {&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public void parserXml(String fileName) {
    SAXBuilder builder = new SAXBuilder();

    try {
        Document document = builder.build(fileName);
        Element users = document.getRootElement();
        List userList = users.getChildren(&amp;quot;user&amp;quot;);

        for (int i = 0; i &amp;lt; userList.size(); i++) {
            Element user = (Element) userList.get(i);
            List userInfo = user.getChildren();

            for (int j = 0; j &amp;lt; userInfo.size(); j++) {
                System.out.println(((Element) userInfo.get(j)).getName()
                        + &amp;quot;:&amp;quot; + ((Element) userInfo.get(j)).getValue());

            }
            System.out.println();
        }
    } catch (JDOMException e) {
        e.printStackTrace();
    } catch (IOException e) {
        e.printStackTrace();
    }

}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;}&lt;/p&gt;
&lt;h3 id=&quot;4-DOM4J-Document-Object-Model-for-Java&quot;&gt;&lt;a href=&quot;#4-DOM4J-Document-Object-Model-for-Java&quot; class=&quot;headerlink&quot; title=&quot;4. DOM4J(Document Object Model for Java)&quot;&gt;&lt;/a&gt;4. DOM4J(Document Object Model for Java)&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;虽然DOM4J代表了完全独立的开发结果，但最初，它是JDOM的一种智能分支。它合并了许多超出基本XML文档表示的功能，包括集成的XPath支持、XML Schema支持以及用于大文档或流化文档的基于事件的处理。它还提供了构建文档表示的选项，它通过DOM4J API和标准DOM接口具有并行访问功能。从2000下半年开始，它就一直处于开发之中。
为支持所有这些功能，DOM4J使用接口和抽象基本类方法。DOM4J大量使用了API中的Collections类，但是在许多情况下，它还提供一些替代方法以允许更好的性能或更直接的编码方法。直接好处是，虽然DOM4J付出了更复杂的API的代价，但是它提供了比JDOM大得多的灵活性。
在添加灵活性、XPath集成和对大文档处理的目标时，DOM4J的目标与JDOM是一样的：针对Java开发者的易用性和直观操作。它还致力于成为比JDOM更完整的解决方案，实现在本质上处理所有Java/XML问题的目标。在完成该目标时，它比JDOM更少强调防止不正确的应用程序行为。
DOM4J是一个非常非常优秀的Java XML API，具有性能优异、功能强大和极端易用使用的特点，同时它也是一个开放源代码的软件。如今你可以看到越来越多的Java软件都在使用DOM4J来读写XML，特别值得一提的是连Sun的JAXM也在用DOM4J.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;【优点】&lt;br&gt;     ①大量使用了Java集合类，方便Java开发人员，同时提供一些提高性能的替代方法。&lt;br&gt;     ②支持XPath。&lt;br&gt;     ③有很好的性能。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ DOM4J&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;package com.xml;&lt;/p&gt;
&lt;p&gt;import java.io.File;&lt;br&gt;import java.io.FileWriter;&lt;br&gt;import java.io.IOException;&lt;br&gt;import java.io.Writer;&lt;br&gt;import java.util.Iterator;&lt;/p&gt;
&lt;p&gt;import org.dom4j.Document;&lt;br&gt;import org.dom4j.DocumentException;&lt;br&gt;import org.dom4j.DocumentHelper;&lt;br&gt;import org.dom4j.Element;&lt;br&gt;import org.dom4j.io.SAXReader;&lt;br&gt;import org.dom4j.io.XMLWriter;&lt;/p&gt;
&lt;p&gt;/**&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;@author lxh&lt;br&gt;*&lt;/li&gt;
&lt;li&gt;Dom4j 解析XML文档&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;public class Dom4jDemo implements XmlDocument {&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public void parserXml(String fileName) {
    File inputXml = new File(fileName);
    SAXReader saxReader = new SAXReader();

    try {
        Document document = saxReader.read(inputXml);
        Element users = document.getRootElement();
        for (Iterator i = users.elementIterator(); i.hasNext();) {
            Element user = (Element) i.next();
            for (Iterator j = user.elementIterator(); j.hasNext();) {
                Element node = (Element) j.next();
                System.out.println(node.getName() + &amp;quot;:&amp;quot; + node.getText());
            }
            System.out.println();
        }
    } catch (DocumentException e) {
        System.out.println(e.getMessage());
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;#######总结&lt;/p&gt;
&lt;p&gt;通过对xml解析，对java的解析有了进一步的了解，在比较中&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;DOM4J性能最好，连Sun的JAXM也在用DOM4J。目前许多开源项目中大量采用DOM4J，例如大名鼎鼎的Hibernate也用DOM4J来读取XML配置文件。如果不考虑可移植性，那就采用DOM4J.&lt;ol&gt;
&lt;li&gt;JDOM和DOM在性能测试时表现不佳，在测试10M文档时内存溢出，但可移植。在小文档情况下还值得考虑使用DOM和JDOM.虽然JDOM的开发者已经说明他们期望在正式发行版前专注性能问题，但是从性能观点来看，它确实没有值得推荐之处。另外，DOM仍是一个非常好的选择。DOM实现广泛应用于多种编程语言。它还是许多其它与XML相关的标准的基础，因为它正式获得W3C推荐（与基于非标准的Java模型相对），所以在某些类型的项目中可能也需要它（如在JavaScript中使用DOM）。&lt;/li&gt;
&lt;li&gt;SAX表现较好，这要依赖于它特定的解析方式－事件驱动。一个SAX检测即将到来的XML流，但并没有载入到内存（当然当XML流被读入时，会有部分文档暂时隐藏在内存中）。&lt;br&gt;我的看法：如果XML文档较大且不考虑移植性问题建议采用DOM4J；如果XML文档较小则建议采用JDOM；如果需要及时处理而不需要保存数据则考虑SAX。但无论如何，还是那句话：适合自己的才是最好的。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;基于xml解析存储的java应用系统的分析&quot;&gt;&lt;a href=&quot;#基于xml解析存储的java应用系统的分析&quot; class=&quot;headerlink&quot; title=&quot;基于xml解析存储的java应用系统的分析&quot;&gt;&lt;/a&gt;基于xml解析存储的java应用系统的分析&lt;/h3&gt;&lt;p&gt;概念：&lt;br&gt;可扩展标记语言（英语：eXtensible Markup Language，简称: XML），是一种标记语言。标记指计算机所能理解的信息符号，通过此种标记，计算机之间可以处理包含各种信息的文章等。如何定义这些标记，既可以选择国际通用的标记语言，比如HTML，也可以使用像XML这样由相关人士自由决定的标记语言，这就是语言的可扩展性。XML是从标准通用标记语言（SGML）中简化修改出来的。它主要用到的有可扩展标记语言、可扩展样式语言（XSL）、XBRL和XPath等。&lt;br&gt;Xml的作用&lt;br&gt;XML设计用来传送及携带数据信息，不用来表现或展示数据，HTML语言则用来表现数据，所以XML用途的焦点是它说明数据是什么，以及携带数据信息。&lt;br&gt;•    丰富文件（Rich Documents）- 自定文件描述并使其更丰富&lt;br&gt;•    属于文件为主的XML技术应用&lt;br&gt;•    标记是用来定义一份资料应该如何呈现&lt;br&gt;•    元数据（Metadata）- 描述其它文件或网络资讯&lt;br&gt;•    属于资料为主的XML技术应用&lt;br&gt;•    标记是用来说明一份资料的意义&lt;br&gt;•    配置文档（Configuration Files）- 描述软件设置的参数&lt;br&gt;
    
    </summary>
    
    
      <category term="编程" scheme="http://lxh5431.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>关于就业和择业的思考</title>
    <link href="http://lxh5431.github.io/2016/06/23/%E5%85%B3%E4%BA%8E%E5%B0%B1%E4%B8%9A%E5%92%8C%E6%8B%A9%E4%B8%9A%E7%9A%84%E6%80%9D%E8%80%83/"/>
    <id>http://lxh5431.github.io/2016/06/23/关于就业和择业的思考/</id>
    <published>2016-06-23T11:04:09.000Z</published>
    <updated>2016-07-15T06:54:18.237Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;http://o94r16s1l.bkt.clouddn.com/%E8%90%8C%E5%9B%BE.jpg&quot; alt=&quot;我萌吗&quot;&gt;&lt;/p&gt;
&lt;p&gt;###毕业前的规划：&lt;br&gt;打算在剩下的三个月里好好复习和专研基本知识，然后认真准备下对面试前的一些基本知识的培养，调整下自己的生物钟，把自己的状态调到适应就业，然后试着去练习一些不一样的东西，今天很多人都在发说说纪念下这大学的课程，我想正好是三年前，我知道成绩的时候是那么的迷茫，现在我又站在了另一个路口，并不是所有人都有一个为了自己的夙愿而始终支持我的爸爸，我一直在想着活着为了什么，为了自己，也为了他人&lt;/p&gt;
&lt;p&gt;###毕业前的思想&lt;br&gt;现在就要思考自己的未来的路，不是残酷，，而是对未来的未雨绸缪，至少首先必须对自己负责，你在生活在世上的一种寄托，一种对未来深深的罪恶感还是对自己有一个全面的了解，不是因为你优秀就不用可考虑这方面的问题，试着去改变，适应社会的大染缸，也许未来我只是一平凡的小子，我依然知道我已经活出我的精彩。&lt;/p&gt;
&lt;h3 id=&quot;就业&quot;&gt;&lt;a href=&quot;#就业&quot; class=&quot;headerlink&quot; title=&quot;就业&quot;&gt;&lt;/a&gt;就业&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://o94r16s1l.bkt.clouddn.com/%E5%AD%A4%E7%8B%AC.jpg&quot; alt=&quot;怀念旧时光&quot;&gt;&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;又到了就业的时刻，我也需要找一个技能去养活自己，让后让自己在一座城市立柱，我要的很简单，所以我需要的不仅是技能，还有生活的质量，我该为自己去博一份未来，也许很多把大学给了游戏，但我想说我需要把我的大学最后的时光给予我的生活技能，我相信我自己，我需要我自己的勇气和其他的品质去实践。我相信，我能行&lt;/p&gt;
&lt;p&gt;######择业&lt;br&gt;当我已经考虑到再多，也没法去改变，不变应万变，我需要一个人去指引，所以我现在就是把我自己的开发和项目结合起来，也许我也该把自己平凡，毕竟我来自平凡，当你无路可走，试着继续走下去。我相信总有漏洞，让你继续走。当我还年轻，就勇敢地去做吧&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://o94r16s1l.bkt.clouddn.com/%E8%90%8C%E5%9B%BE.jpg&quot; alt=&quot;我萌吗&quot;&gt;&lt;/p&gt;
&lt;p&gt;###毕业前的规划：&lt;br&gt;打算在剩下的三个月里好好复习和专研基本知识，然后认真准备下对面试前的一些基本知识的培养，调整下自己的生物钟，把自己的状态调到适应就业，然后试着去练习一些不一样的东西，今天很多人都在发说说纪念下这大学的课程，我想正好是三年前，我知道成绩的时候是那么的迷茫，现在我又站在了另一个路口，并不是所有人都有一个为了自己的夙愿而始终支持我的爸爸，我一直在想着活着为了什么，为了自己，也为了他人&lt;/p&gt;
&lt;p&gt;###毕业前的思想&lt;br&gt;现在就要思考自己的未来的路，不是残酷，，而是对未来的未雨绸缪，至少首先必须对自己负责，你在生活在世上的一种寄托，一种对未来深深的罪恶感还是对自己有一个全面的了解，不是因为你优秀就不用可考虑这方面的问题，试着去改变，适应社会的大染缸，也许未来我只是一平凡的小子，我依然知道我已经活出我的精彩。&lt;/p&gt;
&lt;h3 id=&quot;就业&quot;&gt;&lt;a href=&quot;#就业&quot; class=&quot;headerlink&quot; title=&quot;就业&quot;&gt;&lt;/a&gt;就业&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://o94r16s1l.bkt.clouddn.com/%E5%AD%A4%E7%8B%AC.jpg&quot; alt=&quot;怀念旧时光&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="大学" scheme="http://lxh5431.github.io/categories/%E5%A4%A7%E5%AD%A6/"/>
    
    
      <category term="随笔" scheme="http://lxh5431.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>IOC容器的理解</title>
    <link href="http://lxh5431.github.io/2016/06/23/IOC%E5%AE%B9%E5%99%A8%E7%9A%84%E7%90%86%E8%A7%A3/"/>
    <id>http://lxh5431.github.io/2016/06/23/IOC容器的理解/</id>
    <published>2016-06-23T11:04:09.000Z</published>
    <updated>2016-06-30T17:38:25.328Z</updated>
    
    <content type="html">&lt;p&gt;﻿如何反转对依赖的控制，把控制权从具体业务对象中转交到平台或者框架中，是降低面向对象系统设计复杂性和提高面向对象系统可测试性的一个有效的解决方案。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;﻿如何反转对依赖的控制，把控制权从具体业务对象中转交到平台或者框架中，是降低面向对象系统设计复杂性和提高面向对象系统可测试性的一个有效的解决方案。&lt;/p&gt;

    
    </summary>
    
    
      <category term="编程" scheme="http://lxh5431.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>线程（二）</title>
    <link href="http://lxh5431.github.io/2016/06/21/%E7%BA%BF%E7%A8%8B(%E4%BA%8C)/"/>
    <id>http://lxh5431.github.io/2016/06/21/线程(二)/</id>
    <published>2016-06-20T16:00:00.000Z</published>
    <updated>2016-06-25T08:17:39.834Z</updated>
    
    <content type="html">&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ 线程并发学习&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;线程（二）&lt;/p&gt;
&lt;p&gt;###线程的睡眠&lt;br&gt;实现方式&lt;br&gt;Thread.sleep(long millis)和Thread.sleep(long millis, int nanos)静态方法强制当前正在执行的线程休眠（暂停执行），以“减慢线程”。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;例子：&lt;br&gt;public void run() {&lt;br&gt;for(int i = 0;i&amp;lt;5;i++){&lt;br&gt;// 很耗时的操作，用来减慢线程的执行&lt;br&gt;// for(long k= 0; k &amp;lt;100000000;k++);&lt;br&gt;try {&lt;br&gt;Thread.sleep(3);&lt;br&gt;} catch (InterruptedException e) {&lt;br&gt;e.printStackTrace(); .&lt;br&gt;}&lt;br&gt;System.out.println(this.getName()+” :”+i);&lt;br&gt;}&lt;br&gt;}&lt;br&gt;注意事项&lt;br&gt;1、线程睡眠是帮助所有线程获得运行机会的最好方法。&lt;br&gt;2、线程睡眠到期自动苏醒，并返回到可运行状态，不是运行状态。sleep()中指定的时间是线程不会运行的最短时间。因此，sleep()方法不能保证该线程睡眠到期后就开始执行。&lt;br&gt;3、sleep()是静态方法，只能控制当前正在运行的线程。&lt;br&gt;线程的优先度&lt;br&gt;JVM线程调度程序是基于优先级的抢先调度机制。在大多数情况下，当前运行的线程优先级将大于或等于线程池中任何线程的优先级&lt;br&gt;方式：&lt;br&gt;一是选择一个线程运行，直到它阻塞或者运行完成为止。&lt;br&gt;二是时间分片&lt;br&gt;例子&lt;br&gt;setPriority(int newPriority)更改线程的优先级&lt;br&gt;总结，后面的还没有学习，学习再在总结&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ 线程并发学习&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;线程（二）&lt;/p&gt;
&lt;p&gt;###线程的睡眠&lt;br&gt;实现方式&lt;br&gt;Thread.sleep(long millis)和Thread.sleep(long millis, int nanos)静态方法强制当前正在执行的线程休眠（暂停执行），以“减慢线程”。&lt;br&gt;
    
    </summary>
    
    
      <category term="编程" scheme="http://lxh5431.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>面向对象</title>
    <link href="http://lxh5431.github.io/2016/06/20/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <id>http://lxh5431.github.io/2016/06/20/面向对象/</id>
    <published>2016-06-19T16:00:00.000Z</published>
    <updated>2016-07-06T09:50:26.246Z</updated>
    
    <content type="html">&lt;h2 id=&quot;面向对象的定义&quot;&gt;&lt;a href=&quot;#面向对象的定义&quot; class=&quot;headerlink&quot; title=&quot;面向对象的定义&quot;&gt;&lt;/a&gt;面向对象的定义&lt;/h2&gt;&lt;p&gt;从现实世界中客观事物出发构建软件系统，并在系统的构造中尽可能运用人类的思维方式。&lt;br&gt;组成&lt;br&gt;类是用于描述同一个类对象的一个抽象概念，类通过属性和方法来对事物的静态属性和动态属性&lt;br&gt;面向对象的实例&lt;br&gt;类可以看成是一类对象的模板，对象可以看成一个类的具体实例。&lt;br&gt;车的定义，具有哪些特征才算是车，能载人（静态属性），能跑—前后左右（动态属性）车的外形，构造，比如，方向盘，车门，玻璃，车的颜色都是车的静态属性&lt;br&gt;总结：车有静态和动态的属性，在java中就有静态成员和动态成员（方法）去驱动这车，这就是把车给抽象开来，我们把车叫做类，书本也是一个类，电子产品也是一个类，我们把一类事物的具体某一个东西，符合这类事物特征的某个东西叫做对象。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;　eg.职员这个类该怎么抽象出来？也是从两个方面，一方面是它的静态属性，另一方面它的动态属性&lt;br&gt;　　职员有哪些属性呢？有姓名，年龄，目前工资数额等属性，&lt;br&gt;他有哪些方法呢？让这个职员来显示姓名，显示年龄，修改姓名，领取工资。当然显示姓名，显示年龄，修改姓名，领取工资这些也可以让别人来做，&lt;br&gt;但面向对象的设计思维是最合适的方法应该出现在最合适的类里面。显示姓名，显示年龄，修改姓名，领取工资由谁来做更合适呢，那就是职员自己最合适。&lt;br&gt;所以这些方法应该出现在职员这个类里面。&lt;br&gt;根据方法是没办法区分两个对象的。所以每个对象都有自己的属性，属性值和另外一个对象一般是不一样的&lt;br&gt;&lt;!--more--&gt;&lt;br&gt;面向对象的三大特性&lt;br&gt;1.继承：xX is XX&lt;br&gt;定义&lt;br&gt;新定义的类是从已有的类中获取属性和方法的现象&lt;br&gt;特性&lt;br&gt;继承是单继承的&lt;br&gt;继承于覆盖难点&lt;br&gt;1&lt;br&gt;$  “继承的好处”&lt;br&gt;1.提高了代码的重用性&lt;br&gt;2.让类与类之间产生了关系，为多态创建条件&lt;br&gt;1&lt;br&gt;$  “注意事项”&lt;br&gt;当子类需要调用父类的构造方法的时候，需要注意&lt;br&gt;1）如果父类中无构造方法或者有一个无参的构造方法，子类也无构造方法，子类会显示地调用父类的构造方法&lt;br&gt;2）如果父类的构造方法有参构造，那么子类点用必须显式地调用有参的构造方法，要不然会报错&lt;br&gt;3）如果父类有无参和有参的构造方法，子类默认调用无参构造方法&lt;br&gt;方法覆盖：&lt;br&gt;1，子类覆盖父类地方法必须具有同样的参数返回类型&lt;br&gt;2，参数返回类可以是父类返回类的子类&lt;br&gt;3，子类只能把修饰符的作用域放大，而不能缩小&lt;br&gt;super关键字&lt;br&gt;super关键字和this的用法相同&lt;br&gt;this代表本类引用， super代表父类引用&lt;br&gt;当子类和父类出现同名成员的时候， 可以用super 和 this进行区分&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ 继承具有多态&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;例子：&lt;br&gt;/什么是继承/&lt;br&gt;public class ExtendsDemo1 {&lt;br&gt;public static void main(String[] args) {&lt;br&gt;Truck t = new Truck();&lt;br&gt;t.size = 100; //不建议这么写。初始化成员变量最好使用构造方法，或者提供set(), get()接口.&lt;br&gt;//货车类的一个实例t从汽车类从继承了size, color属性。&lt;br&gt;//而货车比汽车多一个货箱&lt;br&gt;}&lt;br&gt;}&lt;br&gt;class Car { //汽车&lt;br&gt;int size; //车体大小&lt;br&gt;String color; //颜色&lt;br&gt;}&lt;br&gt;class Truck extends Car { //货车&lt;br&gt;String packingBox; //货箱&lt;br&gt;}&lt;/p&gt;
&lt;h2 id=&quot;多态&quot;&gt;&lt;a href=&quot;#多态&quot; class=&quot;headerlink&quot; title=&quot;多态&quot;&gt;&lt;/a&gt;多态&lt;/h2&gt;&lt;p&gt;定义&lt;br&gt;指允许不同类的对象对同一消息做出响应。即同一消息可以根据发送对象的不同而采用多种不同的行为方式。（发送消息就是函数调用）&lt;br&gt;技术支持&lt;br&gt;动态绑定&lt;br&gt;多态的作用&lt;br&gt;消除类型之间的耦合关系&lt;br&gt;多态的必要条件&lt;br&gt;继承&lt;br&gt;重写&lt;br&gt;父类引用子类对象&lt;br&gt;优点&lt;br&gt;1.可替换性（substitutability）。多态对已存在代码具有可替换性。例如，多态对圆Circle类工作，对其他任何圆形几何体，如圆环，也同样工作。&lt;br&gt;2.可扩充性（extensibility）。多态对代码具有可扩充性。增加新的子类不影响已存在类的多态性、继承性，以及其他特性的运行和操作。实际上新加子类更容易获得多态功能。例如，在实现了圆锥、半圆锥以及半球体的多态基础上，很容易增添球体类的多态性。&lt;br&gt;3.接口性（interface-ability）。多态是超类通过方法签名，向子类提供了一个共同接口，由子类来完善或者覆盖它而实现的。如图8.3 所示。图中超类Shape规定了两个实现多态的接口方法，computeArea()以及computeVolume()。子类，如Circle和Sphere为了实现多态，完善或者覆盖这两个接口方法。&lt;br&gt;4.灵活性（flexibility）。它在应用中体现了灵活多样的操作，提高了使用效率。&lt;br&gt;5.简化性（simplicity）。多态简化对应用软件的代码编写和修改过程，尤其在处理大量对象的运算和操作时，这个特点尤为突出和重要。&lt;br&gt;运用&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ 运用&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;this.show(O)、super.show(O)、this.show((super)O)、super.show((super)O)。&lt;br&gt;class A {&lt;br&gt;public String show(D obj)…{&lt;br&gt;return (“A and D”);&lt;br&gt;}&lt;br&gt;public String show(A obj)…{&lt;br&gt;return (“A and A”);&lt;br&gt;}&lt;br&gt;}&lt;br&gt;class B extends A{&lt;br&gt;public String show(B obj)…{&lt;br&gt;return (“B and B”);&lt;br&gt;}&lt;br&gt;public String show(A obj)…{&lt;br&gt;return (“B and A”);&lt;br&gt;}&lt;br&gt;}&lt;br&gt;class C extends B…{}&lt;br&gt;class D extends B…{}&lt;br&gt;A a1 = new A();&lt;br&gt;A a2 = new B();&lt;br&gt;B b = new B();&lt;br&gt;C c = new C();&lt;br&gt;D d = new D();&lt;br&gt;System.out.println(a1.show(b)); ①&lt;br&gt;System.out.println(a1.show(c)); ②&lt;br&gt;System.out.println(a1.show(d)); ③&lt;br&gt;System.out.println(a2.show(b)); ④&lt;br&gt;System.out.println(a2.show(c)); ⑤&lt;br&gt;System.out.println(a2.show(d)); ⑥&lt;br&gt;System.out.println(b.show(b)); ⑦&lt;br&gt;System.out.println(b.show(c)); ⑧&lt;br&gt;System.out.println(b.show(d)); ⑨&lt;br&gt;分析：当超类对象引用变量引用子类对象时，被引用对象的类型而不是引用变量的类型决定了调用谁的成员方法&lt;br&gt;，但是这个被调用的方法必须是在超类中定义过的，也就是说被子类覆盖的方法。&lt;br&gt;比如④，a2.show(b)，a2是一个引用变量，类型为A，则this为a2，b是B的一个实例，于是它到类A里面找show(B obj)方法，没有找到，&lt;br&gt;于是到A的super(超类)找，而A没有超类，因此转到第三优先级this.show((super)O)，&lt;br&gt;this仍然是a2，这里O为B，(super)O即(super)B即A，因此它到类A里面找show(A obj)的方法，类A有这个方法，&lt;br&gt;但是由于a2引用的是类B的一个对象，B覆盖了A的show(A obj)方法，因此最终锁定到类B的show(A obj)，输出为”B and A”。&lt;/p&gt;
&lt;h2 id=&quot;封装&quot;&gt;&lt;a href=&quot;#封装&quot; class=&quot;headerlink&quot; title=&quot;封装&quot;&gt;&lt;/a&gt;封装&lt;/h2&gt;&lt;p&gt;封装就是将属性私有化，提供公有的方法访问私有属性。&lt;br&gt;实现&lt;br&gt;.修改属性的可见性来限制对属性的访问&lt;br&gt;.并为每个属性创建一对取值（getter）方法和赋值（setter）方法&lt;br&gt;.用于对这些属性的访问&lt;br&gt;封装的必要性&lt;br&gt;通过封装，可以实现对属性的数据访问限制，同时增加了程序的可维护性。&lt;br&gt;由于取值方法和赋值方法隐藏了实现的变更，因此并不会影响读取或修改该属性的类，&lt;br&gt;避免了大规模的修改，程序的可维护性增强。&lt;br&gt;封装的优点&lt;br&gt;1、良好的封装能够减少耦合。&lt;br&gt;2、类内部的结构可以自由修改。&lt;br&gt;3、可以对成员进行更精确的控制&lt;br&gt;4、隐藏信息，实现细节。&lt;br&gt;例子&lt;br&gt;class Athlete {&lt;br&gt;private String name;&lt;br&gt;public String getName() {&lt;br&gt;return name;&lt;br&gt;}&lt;br&gt;public void setName(String name) {&lt;br&gt;this.name = name;&lt;br&gt;}&lt;br&gt;在toString()中直接用getName来获取私有的属性&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;面向对象的定义&quot;&gt;&lt;a href=&quot;#面向对象的定义&quot; class=&quot;headerlink&quot; title=&quot;面向对象的定义&quot;&gt;&lt;/a&gt;面向对象的定义&lt;/h2&gt;&lt;p&gt;从现实世界中客观事物出发构建软件系统，并在系统的构造中尽可能运用人类的思维方式。&lt;br&gt;组成&lt;br&gt;类是用于描述同一个类对象的一个抽象概念，类通过属性和方法来对事物的静态属性和动态属性&lt;br&gt;面向对象的实例&lt;br&gt;类可以看成是一类对象的模板，对象可以看成一个类的具体实例。&lt;br&gt;车的定义，具有哪些特征才算是车，能载人（静态属性），能跑—前后左右（动态属性）车的外形，构造，比如，方向盘，车门，玻璃，车的颜色都是车的静态属性&lt;br&gt;总结：车有静态和动态的属性，在java中就有静态成员和动态成员（方法）去驱动这车，这就是把车给抽象开来，我们把车叫做类，书本也是一个类，电子产品也是一个类，我们把一类事物的具体某一个东西，符合这类事物特征的某个东西叫做对象。&lt;br&gt;
    
    </summary>
    
      <category term="面向对象" scheme="http://lxh5431.github.io/categories/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
    
      <category term="编程" scheme="http://lxh5431.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>面试题</title>
    <link href="http://lxh5431.github.io/2016/06/20/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>http://lxh5431.github.io/2016/06/20/面试题/</id>
    <published>2016-06-19T16:00:00.000Z</published>
    <updated>2016-08-03T16:33:59.362Z</updated>
    
    <content type="html">&lt;p&gt;﻿多线程、并发及线程的基础问题：&lt;/p&gt;
&lt;p&gt;1）Java 中能创建 volatile 数组吗？&lt;br&gt;能，Java 中可以创建 volatile 类型数组，不过只是一个指向数组的引用，而不是整个数组。我的意思是，如果改变引用指向的数组，将会受到 volatile 的保护，但是如果多个线程同时改变数组的元素，volatile 标示符就不能起到之前的保护作用了。&lt;/p&gt;
&lt;p&gt;2）volatile 能使得一个非原子操作变成原子操作吗？&lt;br&gt;一个典型的例子是在类中有一个 long 类型的成员变量。如果你知道该成员变量会被多个线程访问，如计数器、价格等，你最好是将其设置为 volatile。为什么？因为 Java 中读取 long 类型变量不是原子的，需要分成两步，如果一个线程正在修改该 long 变量的值，另一个线程可能只能看到该值的一半（前 32 位）。但是对一个 volatile 型的 long 或 double 变量的读写是原子。&lt;/p&gt;
&lt;p&gt;3）volatile 修饰符的有过什么实践？&lt;br&gt;一种实践是用 volatile 修饰 long 和 double 变量，使其能按原子类型来读写。double 和 long 都是64位宽，因此对这两种类型的读是分为两部分的，第一次读取第一个 32 位，然后再读剩下的 32 位，这个过程不是原子的，但 Java 中 volatile 型的 long 或 double 变量的读写是原子的。volatile 修复符的另一个作用是提供内存屏障（memory barrier），例如在分布式框架中的应用。简单的说，就是当你写一个 volatile 变量之前，Java 内存模型会插入一个写屏障（write barrier），读一个 volatile 变量之前，会插入一个读屏障（read barrier）。意思就是说，在你写一个 volatile 域时，能保证任何线程都能看到你写的值，同时，在写之前，也能保证任何数值的更新对所有线程是可见的，因为内存屏障会将其他所有写的值更新到缓存。&lt;/p&gt;
&lt;p&gt;4）volatile 类型变量提供什么保证？&lt;br&gt;volatile 变量提供顺序和可见性保证，例如，JVM 或者 JIT为了获得更好的性能会对语句重排序，但是 volatile 类型变量即使在没有同步块的情况下赋值也不会与其他语句重排序。 volatile 提供 happens-before 的保证，确保一个线程的修改能对其他线程是可见的。某些情况下，volatile 还能提供原子性，如读 64 位数据类型，像 long 和 double 都不是原子的，但 volatile 类型的 double 和 long 就是原子的。&lt;/p&gt;
&lt;p&gt;5）你是如何调用 wait（）方法的？使用 if 块还是循环？为什么？&lt;br&gt;wait() 方法应该在循环调用，因为当线程获取到 CPU 开始执行的时候，其他条件可能还没有满足，所以在处理前，循环检测条件是否满足会更好。下面是一段标准的使用 wait 和 notify 方法的代码：&lt;/p&gt;
&lt;p&gt;// The standard idiom for using the wait method&lt;br&gt;synchronized (obj) {&lt;br&gt;while (condition does not hold)&lt;br&gt;obj.wait(); // (Releases lock, and reacquires on wakeup)&lt;br&gt;… // Perform action appropriate to condition&lt;br&gt;}&lt;/p&gt;
&lt;p&gt;6）什么是多线程环境下的伪共享（false sharing）？&lt;br&gt;伪共享是多线程系统（每个处理器有自己的局部缓存）中一个众所周知的性能问题。伪共享发生在不同处理器的上的线程对变量的修改依赖于相同的缓存行，如下图所示：&lt;/p&gt;
&lt;p&gt;7）什么是 Busy spin？我们为什么要使用它？&lt;br&gt;Busy spin 是一种在不释放 CPU 的基础上等待事件的技术。它经常用于避免丢失 CPU 缓存中的数据（如果线程先暂停，之后在其他CPU上运行就会丢失）。所以，如果你的工作要求低延迟，并且你的线程目前没有任何顺序，这样你就可以通过循环检测队列中的新消息来代替调用 sleep() 或 wait() 方法。它唯一的好处就是你只需等待很短的时间，如几微秒或几纳秒。LMAX 分布式框架是一个高性能线程间通信的库，该库有一个 BusySpinWaitStrategy 类就是基于这个概念实现的，使用 busy spin 循环 EventProcessors 等待屏障。&lt;/p&gt;
&lt;p&gt;8）什么是线程局部变量？&lt;br&gt;线程局部变量是局限于线程内部的变量，属于线程自身所有，不在多个线程间共享。Java 提供 ThreadLocal 类来支持线程局部变量，是一种实现线程安全的方式。但是在管理环境下（如 web 服务器）使用线程局部变量的时候要特别小心，在这种情况下，工作线程的生命周期比任何应用变量的生命周期都要长。任何线程局部变量一旦在工作完成后没有释放，Java 应用就存在内存泄露的风险。&lt;/p&gt;
&lt;p&gt;9）Java 中 sleep 方法和 wait 方法的区别？&lt;br&gt;虽然两者都是用来暂停当前运行的线程，但是 sleep() 实际上只是短暂停顿，因为它不会释放锁，而 wait() 意味着条件等待，这就是为什么该方法要释放锁，因为只有这样，其他等待的线程才能在满足条件时获取到该锁。&lt;/p&gt;
&lt;p&gt;10）什么是不可变对象（immutable object）？Java 中怎么创建一个不可变对象？&lt;br&gt;不可变对象指对象一旦被创建，状态就不能再改变。任何修改都会创建一个新的对象，如 String、Integer及其它包装类。&lt;/p&gt;
&lt;p&gt;11）我们能创建一个包含可变对象的不可变对象吗？&lt;br&gt;是的，我们是可以创建一个包含可变对象的不可变对象的，你只需要谨慎一点，不要共享可变对象的引用就可以了，如果需要变化时，就返回原对象的一个拷贝。最常见的例子就是对象中包含一个日期对象的引用。&lt;/p&gt;
&lt;p&gt;数据类型和 Java 基础面试问题&lt;/p&gt;
&lt;p&gt;12）Java 中应该使用什么数据类型来代表价格？&lt;br&gt;如果不是特别关心内存和性能的话，使用BigDecimal，否则使用预定义精度的 double 类型。&lt;/p&gt;
&lt;p&gt;13）怎么将 byte 转换为 String？&lt;br&gt;可以使用 String 接收 byte[] 参数的构造器来进行转换，需要注意的点是要使用的正确的编码，否则会使用平台默认编码，这个编码可能跟原来的编码相同，也可能不同。&lt;/p&gt;
&lt;p&gt;14）我们能将 int 强制转换为 byte 类型的变量吗？如果该值大于 byte 类型的范围，将会出现什么现象？&lt;br&gt;是的，我们可以做强制转换，但是 Java 中 int 是 32 位的，而 byte 是 8 位的，所以，如果强制转化是，int 类型的高 24 位将会被丢弃，byte 类型的范围是从 -128 到 128。&lt;/p&gt;
&lt;p&gt;15）Java 中 ++ 操作符是线程安全的吗？&lt;br&gt;不是线程安全的操作。它涉及到多个指令，如读取变量值，增加，然后存储回内存，这个过程可能会出现多个线程交差。&lt;/p&gt;
&lt;p&gt;16）a = a + b 与 a += b 的区别？&lt;br&gt;+= 隐式的将加操作的结果类型强制转换为持有结果的类型。如果两这个整型相加，如 byte、short 或者 int，首先会将它们提升到 int 类型，然后在执行加法操作。如果加法操作的结果比 a 的最大值要大，则 a+b 会出现编译错误，但是 a += b 没问题，如下：&lt;br&gt;byte a = 127;&lt;br&gt;byte b = 127;&lt;br&gt;b = a + b; // error : cannot convert from int to byte&lt;br&gt;b += a; // ok&lt;/p&gt;
&lt;p&gt;注：其实无论 a+b 的值为多少，编译器都会报错，因为 a+b 操作会将 a、b 提升为 int 类型，所以将 int 类型赋值给 byte 就会编译出错&lt;/p&gt;
&lt;p&gt;17）我能在不进行强制转换的情况下将一个 double 值赋值给 long 类型的变量吗？&lt;br&gt;不行，你不能在没有强制类型转换的前提下将一个 double 值赋值给 long 类型的变量，因为 double 类型的范围比 long 类型更广，所以必须要进行强制转换。&lt;/p&gt;
&lt;p&gt;18）3*0.1 == 0.3 将会返回什么？true 还是 false？&lt;br&gt;false，因为有些浮点数不能完全精确的表示出来。&lt;/p&gt;
&lt;p&gt;19）int 和 Integer 哪个会占用更多的内存？&lt;br&gt;Integer 对象会占用更多的内存。Integer 是一个对象，需要存储对象的元数据。但是 int 是一个原始类型的数据，所以占用的空间更少。&lt;/p&gt;
&lt;p&gt;20）为什么 Java 中的 String 是不可变的（Immutable）？&lt;br&gt;Java 中的 String 不可变是因为 Java 的设计者认为字符串使用非常频繁，将字符串设置为不可变可以允许多个客户端之间共享相同的字符串。&lt;/p&gt;
&lt;p&gt;21）Java 中的构造器链是什么？&lt;br&gt;当你从一个构造器中调用另一个构造器，就是Java 中的构造器链。这种情况只在重载了类的构造器的时候才会出现。&lt;/p&gt;
&lt;p&gt;JVM 底层 与 GC（Garbage Collection） 的面试问题&lt;/p&gt;
&lt;p&gt;22）64 位 JVM 中，int 的长度是多数？&lt;br&gt;Java 中，int 类型变量的长度是一个固定值，与平台无关，都是 32 位。意思就是说，在 32 位 和 64 位 的Java 虚拟机中，int 类型的长度是相同的。&lt;/p&gt;
&lt;p&gt;23）Serial 与 Parallel GC之间的不同之处？&lt;br&gt;Serial 与 Parallel 在GC执行的时候都会引起 stop-the-world。它们之间主要不同 serial 收集器是默认的复制收集器，执行 GC 的时候只有一个线程，而 parallel 收集器使用多个 GC 线程来执行。&lt;/p&gt;
&lt;p&gt;24）32 位和 64 位的 JVM，int 类型变量的长度是多数？&lt;br&gt;32 位和 64 位的 JVM 中，int 类型变量的长度是相同的，都是 32 位或者 4 个字节。&lt;/p&gt;
&lt;p&gt;25）Java 中 WeakReference 与 SoftReference的区别？&lt;br&gt;虽然 WeakReference 与 SoftReference 都有利于提高 GC 和 内存的效率，但是 WeakReference ，一旦失去最后一个强引用，就会被 GC 回收，而软引用虽然不能阻止被回收，但是可以延迟到 JVM 内存不足的时候。&lt;/p&gt;
&lt;p&gt;26）WeakHashMap 是怎么工作的？&lt;br&gt;WeakHashMap 的工作与正常的 HashMap 类似，但是使用弱引用作为 key，意思就是当 key 对象没有任何引用时，key/value 将会被回收。&lt;/p&gt;
&lt;p&gt;27）JVM 选项 -XX:+UseCompressedOops 有什么作用？为什么要使用？&lt;br&gt;当你将你的应用从 32 位的 JVM 迁移到 64 位的 JVM 时，由于对象的指针从 32 位增加到了 64 位，因此堆内存会突然增加，差不多要翻倍。这也会对 CPU 缓存（容量比内存小很多）的数据产生不利的影响。因为，迁移到 64 位的 JVM 主要动机在于可以指定最大堆大小，通过压缩 OOP 可以节省一定的内存。通过 -XX:+UseCompressedOops 选项，JVM 会使用 32 位的 OOP，而不是 64 位的 OOP。&lt;/p&gt;
&lt;p&gt;28）怎样通过 Java 程序来判断 JVM 是 32 位 还是 64 位？&lt;br&gt;你可以检查某些系统属性如 sun.arch.data.model 或 os.arch 来获取该信息。&lt;/p&gt;
&lt;p&gt;29）32 位 JVM 和 64 位 JVM 的最大堆内存分别是多数？&lt;br&gt;理论上说上 32 位的 JVM 堆内存可以到达 2^32，即 4GB，但实际上会比这个小很多。不同操作系统之间不同，如 Windows 系统大约 1.5 GB，Solaris 大约 3GB。64 位 JVM允许指定最大的堆内存，理论上可以达到 2^64，这是一个非常大的数字，实际上你可以指定堆内存大小到 100GB。甚至有的 JVM，如 Azul，堆内存到 1000G 都是可能的。&lt;/p&gt;
&lt;p&gt;30）JRE、JDK、JVM 及 JIT 之间有什么不同？&lt;br&gt;JRE 代表 Java 运行时（Java run-time），是运行 Java 引用所必须的。JDK 代表 Java 开发工具（Java development kit），是 Java 程序的开发工具，如 Java 编译器，它也包含 JRE。JVM 代表 Java 虚拟机（Java virtual machine），它的责任是运行 Java 应用。JIT 代表即时编译（Just In Time compilation），当代码执行的次数超过一定的阈值时，会将 Java 字节码转换为本地代码，如，主要的热点代码会被准换为本地代码，这样有利大幅度提高 Java 应用的性能。&lt;/p&gt;
&lt;p&gt;31）解释 Java 堆空间及 GC？&lt;br&gt;当通过 Java 命令启动 Java 进程的时候，会为它分配内存。内存的一部分用于创建堆空间，当程序中创建对象的时候，就从对空间中分配内存。GC 是 JVM 内部的一个进程，回收无效对象的内存用于将来的分配。&lt;/p&gt;
&lt;p&gt;32）你能保证 GC 执行吗？&lt;br&gt;不能，虽然你可以调用 System.gc() 或者 Runtime.gc()，但是没有办法保证 GC 的执行。&lt;/p&gt;
&lt;p&gt;33）怎么获取 Java 程序使用的内存？堆使用的百分比？&lt;br&gt;可以通过 java.lang.Runtime 类中与内存相关方法来获取剩余的内存，总内存及最大堆内存。通过这些方法你也可以获取到堆使用的百分比及堆内存的剩余空间。Runtime.freeMemory() 方法返回剩余空间的字节数，Runtime.totalMemory() 方法总内存的字节数，Runtime.maxMemory() 返回最大内存的字节数。&lt;/p&gt;
&lt;p&gt;34）Java 中堆和栈有什么区别？&lt;br&gt;JVM 中堆和栈属于不同的内存区域，使用目的也不同。栈常用于保存方法帧和局部变量，而对象总是在堆上分配。栈通常都比堆小，也不会在多个线程之间共享，而堆被整个 JVM 的所有线程共享。&lt;/p&gt;
&lt;p&gt;Java 基本概念面试题&lt;/p&gt;
&lt;p&gt;35）“a==b”和”a.equals(b)”有什么区别？&lt;br&gt;如果 a 和 b 都是对象，则 a==b 是比较两个对象的引用，只有当 a 和 b 指向的是堆中的同一个对象才会返回 true，而 a.equals(b) 是进行逻辑比较，所以通常需要重写该方法来提供逻辑一致性的比较。例如，String 类重写 equals() 方法，所以可以用于两个不同对象，但是包含的字母相同的比较。&lt;/p&gt;
&lt;p&gt;36）a.hashCode() 有什么用？与 a.equals(b) 有什么关系？&lt;br&gt;hashCode() 方法是相应对象整型的 hash 值。它常用于基于 hash 的集合类，如 Hashtable、HashMap、LinkedHashMap等等。它与 equals() 方法关系特别紧密。根据 Java 规范，两个使用 equal() 方法来判断相等的对象，必须具有相同的 hash code。&lt;/p&gt;
&lt;p&gt;37）final、finalize 和 finally 的不同之处？&lt;br&gt;final 是一个修饰符，可以修饰变量、方法和类。如果 final 修饰变量，意味着该变量的值在初始化后不能被改变。finalize 方法是在对象被回收之前调用的方法，给对象自己最后一个复活的机会，但是什么时候调用 finalize 没有保证。finally 是一个关键字，与 try 和 catch 一起用于异常的处理。finally 块一定会被执行，无论在 try 块中是否有发生异常。&lt;/p&gt;
&lt;p&gt;38）Java 中的编译期常量是什么？使用它又什么风险？&lt;br&gt;公共静态不可变（public static final ）变量也就是我们所说的编译期常量，这里的 public 可选的。实际上这些变量在编译时会被替换掉，因为编译器知道这些变量的值，并且知道这些变量在运行时不能改变。这种方式存在的一个问题是你使用了一个内部的或第三方库中的公有编译时常量，但是这个值后面被其他人改变了，但是你的客户端仍然在使用老的值，甚至你已经部署了一个新的jar。为了避免这种情况，当你在更新依赖 JAR 文件时，确保重新编译你的程序。&lt;/p&gt;
&lt;p&gt;Java 集合框架的面试题&lt;/p&gt;
&lt;p&gt;39) List、Set、Map 和 Queue 之间的区别？&lt;br&gt;List 是一个有序集合，允许元素重复。它的某些实现可以提供基于下标值的常量访问时间，但是这不是 List 接口保证的。Set 是一个无序集合。&lt;/p&gt;
&lt;p&gt;40）poll() 方法和 remove() 方法的区别？&lt;br&gt;poll() 和 remove() 都是从队列中取出一个元素，但是 poll() 在获取元素失败的时候会返回空，但是 remove() 失败的时候会抛出异常。&lt;/p&gt;
&lt;p&gt;41）Java 中 LinkedHashMap 和 PriorityQueue 的区别是什么？&lt;br&gt;PriorityQueue 保证最高或者最低优先级的的元素总是在队列头部，但是 LinkedHashMap 维持的顺序是元素插入的顺序。当遍历一个 PriorityQueue 时，没有任何顺序保证，但是 LinkedHashMap 课保证遍历顺序是元素插入的顺序。&lt;/p&gt;
&lt;p&gt;42）ArrayList 与 LinkedList 的不区别？&lt;br&gt;最明显的区别是 ArrrayList 底层的数据结构是数组，支持随机访问，而 LinkedList 的底层数据结构书链表，不支持随机访问。使用下标访问一个元素，ArrayList 的时间复杂度是 O(1)，而 LinkedList 是 O(n)。&lt;/p&gt;
&lt;p&gt;43）用哪两种方式来实现集合的排序？&lt;br&gt;你可以使用有序集合，如 TreeSet 或 TreeMap，你也可以使用有顺序的的集合，如 list，然后通过 Collections.sort() 来排序。&lt;/p&gt;
&lt;p&gt;44）Java 中怎么打印数组？&lt;br&gt;你可以使用 Arrays.toString() 和 Arrays.deepToString() 方法来打印数组。由于数组没有实现 toString() 方法，所以如果将数组传递给 System.out.println() 方法，将无法打印出数组的内容，但是 Arrays.toString() 可以打印每个元素。&lt;/p&gt;
&lt;p&gt;45) Hashtable 与 HashMap 有什么不同之处？&lt;br&gt;这两个类有许多不同的地方，下面列出了一部分：&lt;br&gt;a) Hashtable 是 JDK 1 遗留下来的类，而 HashMap 是后来增加的。&lt;br&gt;b）Hashtable 是同步的，比较慢，但 HashMap 没有同步策略，所以会更快。&lt;br&gt;c）Hashtable 不允许有个空的 key，但是 HashMap 允许出现一个 null key。&lt;/p&gt;
&lt;p&gt;46）Java 中的 HashSet，内部是如何工作的？&lt;br&gt;HashSet 的内部采用 HashMap来实现。由于 Map 需要 key 和 value，所以所有 key 的都有一个默认 value。类似于 HashMap，HashSet 不允许重复的 key，只允许有一个null key，意思就是 HashSet 中只允许存储一个 null 对象。&lt;/p&gt;
&lt;p&gt;47）写一段代码在遍历 ArrayList 时移除一个元素？&lt;br&gt;该问题的关键在于面试者使用的是 ArrayList 的 remove() 还是 Iterator 的 remove()方法。这有一段示例代码，是使用正确的方式来实现在遍历的过程中移除元素，而不会出现 ConcurrentModificationException 异常的示例代码。&lt;/p&gt;
&lt;p&gt;48）我们能自己写一个容器类，然后使用 for-each 循环码？&lt;br&gt;可以，你可以写一个自己的容器类。如果你想使用 Java 中增强的循环来遍历，你只需要实现 Iterable 接口。如果你实现 Collection 接口，默认就具有该属性。&lt;/p&gt;
&lt;p&gt;49）ArrayList 和 HashMap 的默认大小是多数？&lt;br&gt;在 Java 7 中，ArrayList 的默认大小是 10 个元素，HashMap 的默认大小是16个元素（必须是2的幂）。这就是 Java 7 中 ArrayList 和 HashMap 类的代码片段：&lt;/p&gt;
&lt;p&gt;// from ArrayList.java JDK 1.7&lt;br&gt;private static final int DEFAULT_CAPACITY = 10;&lt;/p&gt;
&lt;p&gt;//from HashMap.java JDK 7&lt;br&gt;static final int DEFAULT_INITIAL_CAPACITY = 1 &amp;lt;&amp;lt; 4; // aka 16&lt;/p&gt;
&lt;p&gt;50）有没有可能两个不相等的对象有有相同的 hashcode？&lt;br&gt;有可能，两个不相等的对象可能会有相同的 hashcode 值，这就是为什么在 hashmap 中会有冲突。相等 hashcode 值的规定只是说如果两个对象相等，必须有相同的hashcode 值，但是没有关于不相等对象的任何规定。&lt;/p&gt;
&lt;p&gt;51）两个相同的对象会有不同的的 hash code 吗？&lt;br&gt;不能，根据 hash code 的规定，这是不可能的。&lt;/p&gt;
&lt;p&gt;52）我们可以在 hashcode() 中使用随机数字吗？&lt;br&gt;不行，因为对象的 hashcode 值必须是相同的。参见答案获取更多关于 Java 中重写 hashCode() 方法的知识。&lt;/p&gt;
&lt;p&gt;53）Java 中，Comparator 与 Comparable 有什么不同？&lt;br&gt;Comparable 接口用于定义对象的自然顺序，而 comparator 通常用于定义用户定制的顺序。Comparable 总是只有一个，但是可以有多个 comparator 来定义对象的顺序。&lt;/p&gt;
&lt;p&gt;54）为什么在重写 equals 方法的时候需要重写 hashCode 方法？&lt;br&gt;因为有强制的规范指定需要同时重写 hashcode 与 equal 是方法，许多容器类，如 HashMap、HashSet 都依赖于 hashcode 与 equals 的规定。&lt;/p&gt;
&lt;p&gt;Java 最佳实践的面试问题&lt;/p&gt;
&lt;p&gt;55）Java 中，编写多线程程序的时候你会遵循哪些最佳实践？&lt;br&gt;a）给线程命名，这样可以帮助调试。&lt;br&gt;b）最小化同步的范围，而不是将整个方法同步，只对关键部分做同步。&lt;br&gt;c）如果可以，更偏向于使用 volatile 而不是 synchronized。&lt;br&gt;d）使用更高层次的并发工具，而不是使用 wait() 和 notify() 来实现线程间通信，如 BlockingQueue，CountDownLatch 及 Semeaphore。&lt;br&gt;e）优先使用并发集合，而不是对集合进行同步。并发集合提供更好的可扩展性。&lt;/p&gt;
&lt;p&gt;56）说出几点 Java 中使用 Collections 的最佳实践？&lt;br&gt;a）使用正确的集合类，例如，如果不需要同步列表，使用 ArrayList 而不是 Vector。&lt;br&gt;b）优先使用并发集合，而不是对集合进行同步。并发集合提供更好的可扩展性。&lt;br&gt;c）使用接口代表和访问集合，如使用List存储 ArrayList，使用 Map 存储 HashMap 等等。&lt;br&gt;d）使用迭代器来循环集合。&lt;br&gt;e）使用集合的时候使用泛型。&lt;/p&gt;
&lt;p&gt;57）说出在 Java 中使用线程的最佳实践？&lt;br&gt;a）对线程命名&lt;br&gt;b）将线程和任务分离，使用线程池执行器来执行 Runnable 或 Callable。&lt;br&gt;c）使用线程池&lt;/p&gt;
&lt;p&gt;58）说出 IO 的最佳实践？&lt;br&gt;a）使用有缓冲区的 IO 类，而不要单独读取字节或字符。&lt;br&gt;b）使用 NIO 和 NIO2&lt;br&gt;c）在 finally 块中关闭流，或者使用 try-with-resource 语句。&lt;br&gt;d）使用内存映射文件获取更快的 IO。&lt;/p&gt;
&lt;p&gt;59）列出应该遵循的 JDBC 最佳实践？&lt;br&gt;a）使用批量的操作来插入和更新数据&lt;br&gt;b）使用 PreparedStatement 来避免 SQL 异常，并提高性能。&lt;br&gt;c）使用数据库连接池&lt;br&gt;d）通过列名来获取结果集，不要使用列的下标来获取。&lt;/p&gt;
&lt;p&gt;60）说出几条 Java 中方法重载的最佳实践？&lt;br&gt;a）不要重载这样的方法：一个方法接收 int 参数，而另个方法接收 Integer 参数。&lt;br&gt;b）不要重载参数数量一致，而只是参数顺序不同的方法。&lt;br&gt;c）如果重载的方法参数个数多于 5 个，采用可变参数。&lt;/p&gt;
&lt;p&gt;Date、Time 及 Calendar 的面试题&lt;/p&gt;
&lt;p&gt;61）在多线程环境下，SimpleDateFormat 是线程安全的吗？&lt;br&gt;不是，非常不幸，DateFormat 的所有实现，包括 SimpleDateFormat 都不是线程安全的，因此你不应该在多线程序中使用，除非是在对外线程安全的环境中使用，如 将 SimpleDateFormat 限制在 ThreadLocal 中。如果你不这么做，在解析或者格式化日期的时候，可能会获取到一个不正确的结果。因此，从日期、时间处理的所有实践来说，我强力推荐 joda-time 库。&lt;/p&gt;
&lt;p&gt;62）Java 中如何格式化一个日期？如格式化为 ddMMyyyy 的形式？&lt;br&gt;Java 中，可以使用 SimpleDateFormat 类或者 joda-time 库来格式日期。DateFormat 类允许你使用多种流行的格式来格式化日期。参见答案中的示例代码，代码中演示了将日期格式化成不同的格式，如 dd-MM-yyyy 或 ddMMyyyy。&lt;/p&gt;
&lt;p&gt;关于 OOP 和设计模式的面试题&lt;/p&gt;
&lt;p&gt;63）接口是什么？为什么要使用接口而不是直接使用具体类？&lt;br&gt;接口用于定义 API。它定义了类必须得遵循的规则。同时，它提供了一种抽象，因为客户端只使用接口，这样可以有多重实现，如 List 接口，你可以使用可随机访问的 ArrayList，也可以使用方便插入和删除的 LinkedList。接口中不允许写代码，以此来保证抽象，但是 Java 8 中你可以在接口声明静态的默认方法，这种方法是具体的。&lt;/p&gt;
&lt;p&gt;64）Java 中，抽象类与接口之间有什么不同？&lt;br&gt;Java 中，抽象类和接口有很多不同之处，但是最重要的一个是 Java 中限制一个类只能继承一个类，但是可以实现多个接口。抽象类可以很好的定义一个家族类的默认行为，而接口能更好的定义类型，有助于后面实现多态机制。关于这个问题的讨论请查看答案。&lt;/p&gt;
&lt;p&gt;65）除了单例模式，你在生产环境中还用过什么设计模式？&lt;br&gt;这需要根据你的经验来回答。一般情况下，你可以说依赖注入，工厂模式，装饰模式或者观察者模式，随意选择你使用过的一种即可。不过你要准备回答接下的基于你选择的模式的问题。&lt;/p&gt;
&lt;p&gt;66）适配器模式是什么？什么时候使用？&lt;br&gt;适配器模式提供对接口的转换。如果你的客户端使用某些接口，但是你有另外一些接口，你就可以写一个适配去来连接这些接口。&lt;/p&gt;
&lt;p&gt;67）构造器注入和 setter 依赖注入，那种方式更好？&lt;br&gt;每种方式都有它的缺点和优点。构造器注入保证所有的注入都被初始化，但是 setter 注入提供更好的灵活性来设置可选依赖。如果使用 XML 来描述依赖，Setter 注入的可读写会更强。经验法则是强制依赖使用构造器注入，可选依赖使用 setter 注入。&lt;/p&gt;
&lt;p&gt;68）依赖注入和工程模式之间有什么不同？&lt;br&gt;虽然两种模式都是将对象的创建从应用的逻辑中分离，但是依赖注入比工程模式更清晰。通过依赖注入，你的类就是 POJO，它只知道依赖而不关心它们怎么获取。使用工厂模式，你的类需要通过工厂来获取依赖。因此，使用 DI 会比使用工厂模式更容易测试。&lt;/p&gt;
&lt;p&gt;69）适配器模式和装饰器模式有什么区别？&lt;br&gt;虽然适配器模式和装饰器模式的结构类似，但是每种模式的出现意图不同。适配器模式被用于桥接两个接口，而装饰模式的目的是在不修改类的情况下给类增加新的功能。&lt;/p&gt;
&lt;p&gt;70）适配器模式和代理模式之前有什么不同？&lt;br&gt;这个问题与前面的类似，适配器模式和代理模式的区别在于他们的意图不同。由于适配器模式和代理模式都是封装真正执行动作的类，因此结构是一致的，但是适配器模式用于接口之间的转换，而代理模式则是增加一个额外的中间层，以便支持分配、控制或智能访问。&lt;/p&gt;
&lt;p&gt;71）什么是模板方法模式？&lt;br&gt;模板方法提供算法的框架，你可以自己去配置或定义步骤。例如，你可以将排序算法看做是一个模板。它定义了排序的步骤，但是具体的比较，可以使用 Comparable 或者其语言中类似东西，具体策略由你去配置。列出算法概要的方法就是众所周知的模板方法。&lt;/p&gt;
&lt;p&gt;72）什么时候使用访问者模式？&lt;br&gt;访问者模式用于解决在类的继承层次上增加操作，但是不直接与之关联。这种模式采用双派发的形式来增加中间层。&lt;/p&gt;
&lt;p&gt;73）什么时候使用组合模式？&lt;br&gt;组合模式使用树结构来展示部分与整体继承关系。它允许客户端采用统一的形式来对待单个对象和对象容器。当你想要展示对象这种部分与整体的继承关系时采用组合模式。&lt;/p&gt;
&lt;p&gt;74）继承和组合之间有什么不同？&lt;br&gt;虽然两种都可以实现代码复用，但是组合比继承共灵活，因为组合允许你在运行时选择不同的实现。用组合实现的代码也比继承测试起来更加简单。&lt;/p&gt;
&lt;p&gt;75）描述 Java 中的重载和重写？&lt;br&gt;重载和重写都允许你用相同的名称来实现不同的功能，但是重载是编译时活动，而重写是运行时活动。你可以在同一个类中重载方法，但是只能在子类中重写方法。重写必须要有继承。&lt;/p&gt;
&lt;p&gt;76）Java 中，嵌套公共静态类与顶级类有什么不同？&lt;br&gt;类的内部可以有多个嵌套公共静态类，但是一个 Java 源文件只能有一个顶级公共类，并且顶级公共类的名称与源文件名称必须一致。&lt;/p&gt;
&lt;p&gt;77) OOP 中的 组合、聚合和关联有什么区别？&lt;br&gt;如果两个对象彼此有关系，就说他们是彼此相关联的。组合和聚合是面向对象中的两种形式的关联。组合是一种比聚合更强力的关联。组合中，一个对象是另一个的拥有者，而聚合则是指一个对象使用另一个对象。如果对象 A 是由对象 B 组合的，则 A 不存在的话，B一定不存在，但是如果 A 对象聚合了一个对象 B，则即使 A 不存在了，B 也可以单独存在。&lt;/p&gt;
&lt;p&gt;78）给我一个符合开闭原则的设计模式的例子？&lt;br&gt;开闭原则要求你的代码对扩展开放，对修改关闭。这个意思就是说，如果你想增加一个新的功能，你可以很容易的在不改变已测试过的代码的前提下增加新的代码。有好几个设计模式是基于开闭原则的，如策略模式，如果你需要一个新的策略，只需要实现接口，增加配置，不需要改变核心逻辑。一个正在工作的例子是 Collections.sort() 方法，这就是基于策略模式，遵循开闭原则的，你不需为新的对象修改 sort() 方法，你需要做的仅仅是实现你自己的 Comparator 接口。&lt;/p&gt;
&lt;p&gt;79）什么时候使用享元模式？&lt;br&gt;享元模式通过共享对象来避免创建太多的对象。为了使用享元模式，你需要确保你的对象是不可变的，这样你才能安全的共享。JDK 中 String 池、Integer 池以及 Long 池都是很好的使用了享元模式的例子。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;﻿多线程、并发及线程的基础问题：&lt;/p&gt;
&lt;p&gt;1）Java 中能创建 volatile 数组吗？&lt;br&gt;能，Java 中可以创建 volatile 类型数组，不过只是一个指向数组的引用，而不是整个数组。我的意思是，如果改变引用指向的数组，将会受到 volatile 的保护
    
    </summary>
    
      <category term="面试" scheme="http://lxh5431.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="编程" scheme="http://lxh5431.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>线程（一）</title>
    <link href="http://lxh5431.github.io/2016/06/18/%E7%BA%BF%E7%A8%8B(%E4%B8%80)/"/>
    <id>http://lxh5431.github.io/2016/06/18/线程(一)/</id>
    <published>2016-06-17T16:00:00.000Z</published>
    <updated>2016-06-25T08:17:39.833Z</updated>
    
    <content type="html">&lt;p&gt;W线程和进程的概念&lt;br&gt;1&lt;br&gt;$  “线程总结”&lt;/p&gt;
&lt;p&gt;##概念&lt;br&gt;进程是指一个内存中运行的应用程序，每个进程都有自己独立的一块内存空间，一个进程中可以启动多个线程。比如在Windows系统中，一个运行的exe就是一个进程。&lt;br&gt;线程是指进程中的一个执行流程，一个进程中可以运行多个线程。比如exe进程中可以运行很多线程。线程总是属于某个进程，进程中的多个线程共享进程的内存。例如负责日记的线程，负责地图加载线程&lt;br&gt;Java中，每个线程都有一个调用栈，即使不在程序中创建任何新的线程，线程也在后台运行着。&lt;br&gt;一个Java应用总是从main()方法开始运行，mian()方法运行在一个线程内，它被称为主线程。&lt;br&gt;一旦创建一个新的线程，就产生一个新的调用栈。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;##java线程的形式&lt;br&gt;java.lang.Thread类&lt;br&gt;此类中有个run()方法，应该注意其用法：&lt;br&gt;public void run()&lt;br&gt;如果该线程是使用独立的Runnable运行对象构造的，则调用该Runnable对象的run方法；否则，该方法不执行任何操作并返回。&lt;/p&gt;
&lt;p&gt;例子&lt;br&gt;/&lt;em&gt;*&lt;br&gt;测试扩展Thread类实现的多线程程序
&lt;/em&gt;&lt;br&gt;@author lxh&lt;br&gt;publicclass MyThread extends Thread{&lt;br&gt;public MyThread(String name) {&lt;br&gt;super(name);&lt;br&gt;}&lt;br&gt;publicvoid run() {&lt;br&gt;    for(int i = 0;i&amp;lt;5;i++){&lt;br&gt;        for(long k= 0; k &amp;lt;100000000;k++);&lt;br&gt;        System.out.println(this.getName()+” :”+i);&lt;br&gt;    }&lt;br&gt;}&lt;/p&gt;
&lt;p&gt;publicstaticvoid main(String[] args) {&lt;br&gt;    Thread t1 = new TestThread(“阿三”);&lt;br&gt;    Thread t2 = new TestThread(“李四”);&lt;br&gt;    t1.start();&lt;br&gt;    t2.start();&lt;br&gt;}&lt;br&gt;}&lt;br&gt;java.lang.Runnable接口编写代码来定义、实例化和启动新线程&lt;br&gt;使用实现接口Runnable的对象创建一个线程时，启动该线程将导致在独立执行的线程中调用对象的run方法。&lt;br&gt;方法run的常规协定是，它可能执行任何所需的操作。&lt;br&gt;方法有：&lt;br&gt;Thread(Runnable target)&lt;br&gt;Thread(Runnable target, String name)&lt;br&gt;Thread(ThreadGroup group, Runnable target)&lt;br&gt;Thread(ThreadGroup group, Runnable target, String name)&lt;br&gt;Thread(ThreadGroup group, Runnable target, String name, long stackSize)&lt;br&gt;例子&lt;br&gt;publicclass DoSomething implements Runnable {&lt;br&gt;private String name;&lt;br&gt;public DoSomething(String name) {&lt;br&gt;    this.name = name;&lt;br&gt;}&lt;/p&gt;
&lt;p&gt;public void run() {&lt;br&gt;    for (int i = 0; i &amp;lt; 5; i++) {&lt;br&gt;        for (long k = 0; k &amp;lt; 100000000; k++) ;&lt;br&gt;        System.out.println(name + “: “ + i);&lt;br&gt;    }&lt;br&gt;}&lt;br&gt;}&lt;/p&gt;
&lt;h4 id=&quot;线程的状态&quot;&gt;&lt;a href=&quot;#线程的状态&quot; class=&quot;headerlink&quot; title=&quot;线程的状态&quot;&gt;&lt;/a&gt;线程的状态&lt;/h4&gt;&lt;p&gt;线程状态总的可分为五大状态：分别是生、死、可运行、运行、等待/阻塞&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;新建状态（New）：&lt;br&gt;新创建了一个线程对象。&lt;/li&gt;
&lt;li&gt;就绪状态（Runnable）：&lt;br&gt;线程对象创建后，其他线程调用了该对象的start()方法。该状态的线程位于可运行线程池中，变得可运行，等待获取CPU的使用权。&lt;/li&gt;
&lt;li&gt;运行状态（Running）：&lt;br&gt;就绪状态的线程获取了CPU，执行程序代码。&lt;/li&gt;
&lt;li&gt;阻塞状态（Blocked）：&lt;br&gt;阻塞状态是线程因为某种原因放弃CPU使用权，暂时停止运行。直到线程进入就绪状态，才有机会转到运行状态。阻塞的情况分三种：&lt;br&gt;（一）、等待阻塞：运行的线程执行wait()方法，JVM会把该线程放入等待池中。&lt;br&gt;（二）、同步阻塞：运行的线程在获取对象的同步锁时，若该同步锁被别的线程占用，则JVM会把该线程放入锁池中。&lt;br&gt;（三）、其他阻塞：运行的线程执行sleep()或join()方法，或者发出了I/O请求时，JVM会把该线程置为阻塞状态。当sleep()状态超时、join()等待线程终止或者超时、或者I/O处理完毕时，线程重新转入就绪状态。&lt;br&gt;死亡状态（Dead）：线程执行完了或者因异常退出了run()方法，该线程结束生命周期。&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;W线程和进程的概念&lt;br&gt;1&lt;br&gt;$  “线程总结”&lt;/p&gt;
&lt;p&gt;##概念&lt;br&gt;进程是指一个内存中运行的应用程序，每个进程都有自己独立的一块内存空间，一个进程中可以启动多个线程。比如在Windows系统中，一个运行的exe就是一个进程。&lt;br&gt;线程是指进程中的一个执行流程，一个进程中可以运行多个线程。比如exe进程中可以运行很多线程。线程总是属于某个进程，进程中的多个线程共享进程的内存。例如负责日记的线程，负责地图加载线程&lt;br&gt;Java中，每个线程都有一个调用栈，即使不在程序中创建任何新的线程，线程也在后台运行着。&lt;br&gt;一个Java应用总是从main()方法开始运行，mian()方法运行在一个线程内，它被称为主线程。&lt;br&gt;一旦创建一个新的线程，就产生一个新的调用栈。&lt;br&gt;
    
    </summary>
    
    
      <category term="编程" scheme="http://lxh5431.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>面向切面的AOP编程</title>
    <link href="http://lxh5431.github.io/2016/06/15/%E9%9D%A2%E5%90%91%E5%88%87%E9%9D%A2%E7%9A%84AOP%E7%BC%96%E7%A8%8B/"/>
    <id>http://lxh5431.github.io/2016/06/15/面向切面的AOP编程/</id>
    <published>2016-06-14T16:00:00.000Z</published>
    <updated>2016-07-06T09:50:26.263Z</updated>
    
    <content type="html">&lt;p&gt;面向切面&lt;/p&gt;
&lt;p&gt;##面向切面编程&lt;/p&gt;
&lt;p&gt;###定义&lt;br&gt;Aspect Oriented Programming 面向切面编程，使业务和逻辑的解耦，让程序员更加专注于业务，其他交给切面编程来实现&lt;br&gt;要点&lt;br&gt;1） Aspect ：切面，方法调用的横切面，切入系统的一个切面。比如事务管理是一个切面，权限管理也是一个切面&lt;br&gt;静态切入点&lt;br&gt;动态切入点&lt;br&gt;自定义切入点&lt;br&gt;2） Join point ：连接点，也就是可以进行横向切入的位置&lt;br&gt;3） Advice ：通知，切面在某个连接点执行的操作&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;(分为: Before advice , After returning advice , After throwing advice , After (finally) advice , Around advice )&lt;br&gt;Before advice&lt;br&gt;public class LogBefore implements MethodBeforeAdvice {&lt;br&gt;private Logger logger = Logger.getLogger(this.getClass().getName());&lt;br&gt;public void before(Method method, Object[] args, Object target) throws Throwable {&lt;br&gt;    logger.log(Level.INFO, args[0] + “ 开始审核数据….”);&lt;br&gt;}&lt;br&gt;}&lt;br&gt;After returning advice&lt;br&gt;ublic class LogAfter implements AfterReturningAdvice {&lt;br&gt;private Logger logger=Logger.getLogger(this.getClass().getName());&lt;br&gt;@Override&lt;br&gt;public void afterReturning(Object object, Method method, Object[] args, Object target) throws Throwable {&lt;br&gt;// TODO Auto-generated method stub&lt;br&gt;logger.log(Level.INFO, args[0]+”审核数据完成…”);&lt;br&gt;}&lt;br&gt;4） Pointcut ：切点，符合切点表达式的连接点，也就是真正被切入的地方&lt;br&gt;AOP是OOP的有效补充点，让系统的设计更加完善和更加容易维护&lt;br&gt;AOPd 两种代理&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ java动态代理&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;public class LogProxy implements InvocationHandler {&lt;br&gt;private Logger logger = Logger.getLogger(this.getClass().getName());&lt;br&gt;private Object delegate;&lt;br&gt;public Object bind(Object delegate) {&lt;br&gt;    this.delegate = delegate;&lt;br&gt;    return Proxy.newProxyInstance(delegate.getClass().getClassLoader(), delegate.getClass().getInterfaces(), this);&lt;br&gt;}&lt;/p&gt;
&lt;p&gt;public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {&lt;br&gt;    Object result = null;&lt;br&gt;    try {&lt;br&gt;        logger.log(Level.INFO, args[0] + “ 开始审核数据….”);&lt;br&gt;        result = method.invoke(delegate, args);&lt;br&gt;        logger.log(Level.INFO, args[0] + “ 审核数据结束….”);&lt;br&gt;    } catch (Exception e){&lt;br&gt;        logger.log(Level.INFO, e.toString());&lt;br&gt;    }&lt;br&gt;    return result;&lt;br&gt;}&lt;br&gt;CGLIB代理&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ CGLIB代理&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注入&lt;br&gt;package net.aazj.aop;&lt;br&gt;import java.lang.reflect.Method;&lt;br&gt;import net.sf.cglib.proxy.Enhancer;&lt;br&gt;import net.sf.cglib.proxy.MethodInterceptor;&lt;br&gt;import net.sf.cglib.proxy.MethodProxy;&lt;br&gt;public class CGProxy implements MethodInterceptor{&lt;br&gt;private Object target; // 被代理对象&lt;br&gt;public CGProxy(Object target){&lt;br&gt;this.target = target;&lt;br&gt;}&lt;br&gt;public Object intercept(Object arg0, Method arg1, Object[] arg2, MethodProxy proxy) throws Throwable {&lt;br&gt;System.out.println(“do sth before….”);&lt;br&gt;Object result = proxy.invokeSuper(arg0, arg2);&lt;br&gt;System.out.println(“do sth after….”);&lt;br&gt;return result;&lt;br&gt;}&lt;br&gt;public Object getProxyObject() {&lt;br&gt;Enhancer enhancer = new Enhancer();&lt;br&gt;enhancer.setSuperclass(this.target.getClass()); // 设置父类&lt;br&gt;// 设置回调&lt;br&gt;enhancer.setCallback(this); // 在调用父类方法时，回调 this.intercept()&lt;br&gt;// 创建代理对象&lt;br&gt;return enhancer.create();&lt;br&gt;}&lt;br&gt;}&lt;br&gt;自动代理&lt;/p&gt;
&lt;p&gt;&lt;bean id=&quot;exceptionHandlereAdvisor&quot; class=&quot;org.springframework.aop.support.RegexpMethodPointcutAdvisor&quot;&gt;&lt;br&gt;    &lt;property name=&quot;advice&quot;&gt;&lt;br&gt;        &lt;ref bean=&quot;exceptionHandler&quot;&gt;&lt;br&gt;    &lt;/ref&gt;&lt;/property&gt;&lt;br&gt;    &lt;property name=&quot;patterns&quot;&gt;&lt;br&gt;        &lt;value&gt;.&lt;em&gt;.&lt;/em&gt;&lt;/value&gt;&lt;br&gt;    &lt;/property&gt;&lt;br&gt;&lt;/bean&gt;&lt;br&gt;动态代理&lt;/p&gt;
&lt;h2 id=&quot;java动态代理&quot;&gt;&lt;a href=&quot;#java动态代理&quot; class=&quot;headerlink&quot; title=&quot;java动态代理&quot;&gt;&lt;/a&gt;java动态代理&lt;/h2&gt;&lt;p&gt;主要使用到 InvocationHandler 接口和 Proxy.newProxyInstance() 方法。 JDK动态代理要求被代理实现一个接口，只有接口中的方法才能够被代理 。其方法是将被代理对象注入到一个中间对象，而中间对象实现InvocationHandler接口，在实现该接口时，可以在 被代理对象调用它的方法时，在调用的前后插入一些代码。而 Proxy.newProxyInstance() 能够利用中间对象来生产代理对象。插入的代码就是切面代码。所以使用JDK动态代理可以实现AOP。&lt;/p&gt;
&lt;h4 id=&quot;例子&quot;&gt;&lt;a href=&quot;#例子&quot; class=&quot;headerlink&quot; title=&quot;例子&quot;&gt;&lt;/a&gt;例子&lt;/h4&gt;&lt;p&gt;被代理对象实现的接口，只有接口中的方法才能够被代理：&lt;br&gt;public interface UserService {&lt;br&gt;public void addUser(User user);&lt;br&gt;public User getUser(int id);&lt;br&gt;}&lt;br&gt;实现类&lt;br&gt;public class UserServiceImpl implements UserService {&lt;br&gt;public void addUser(User user) {&lt;br&gt;System.out.println(“add user into database.”);&lt;br&gt;}&lt;br&gt;public User getUser(int id) {&lt;br&gt;User user = new User();&lt;br&gt;user.setId(id);&lt;br&gt;System.out.println(“getUser from database.”);&lt;br&gt;return user;&lt;br&gt;}&lt;br&gt;}&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ 代理中间类&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;import java.lang.reflect.InvocationHandler;&lt;br&gt;import java.lang.reflect.Method;&lt;br&gt;public class ProxyUtil implements InvocationHandler {&lt;br&gt;private Object target; // 被代理的对象&lt;br&gt;public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {&lt;br&gt;System.out.println(“do sth before….”);&lt;br&gt;Object result = method.invoke(target, args);&lt;br&gt;System.out.println(“do sth after….”);&lt;br&gt;return result;&lt;br&gt;}&lt;br&gt;ProxyUtil(Object target){&lt;br&gt;this.target = target;&lt;br&gt;}&lt;br&gt;public Object getTarget() {&lt;br&gt;return target;&lt;br&gt;}&lt;br&gt;public void setTarget(Object target) {&lt;br&gt;this.target = target;&lt;br&gt;}&lt;br&gt;}&lt;/p&gt;
&lt;h4 id=&quot;测试&quot;&gt;&lt;a href=&quot;#测试&quot; class=&quot;headerlink&quot; title=&quot;测试&quot;&gt;&lt;/a&gt;测试&lt;/h4&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ 测试&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;import java.lang.reflect.Proxy;&lt;br&gt;import net.aazj.pojo.User;&lt;br&gt;public class ProxyTest {&lt;br&gt;public static void main(String[] args){&lt;br&gt;Object proxyedObject = new UserServiceImpl(); // 被代理的对象&lt;br&gt;ProxyUtil proxyUtils = new ProxyUtil(proxyedObject);&lt;br&gt;// 生成代理对象，对被代理对象的这些接口进行代理：UserServiceImpl.class.getInterfaces()&lt;br&gt;UserService proxyObject = (UserService) Proxy.newProxyInstance(Thread.currentThread().getContextClassLoader(),&lt;br&gt;UserServiceImpl.class.getInterfaces(), proxyUtils);&lt;br&gt;proxyObject.getUser(1);&lt;br&gt;proxyObject.addUser(new User());&lt;br&gt;}&lt;br&gt;}&lt;/p&gt;
&lt;h3 id=&quot;总结：&quot;&gt;&lt;a href=&quot;#总结：&quot; class=&quot;headerlink&quot; title=&quot;总结：&quot;&gt;&lt;/a&gt;总结：&lt;/h3&gt;&lt;p&gt;通过对面向切面编程的学习，对动态代理的使用有更加深入的了解，对解耦的设计和软件设计的思想有进一步的了解，对动态代理的设计模式的重要性进一步的了解&lt;br&gt;面向切面的编程就是对日记和时间等非业务的编程在切面插入，运用代理的设计模式更好的把业务和逻辑的解耦，改变前一个的日记并不会影响业务的运行。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;面向切面&lt;/p&gt;
&lt;p&gt;##面向切面编程&lt;/p&gt;
&lt;p&gt;###定义&lt;br&gt;Aspect Oriented Programming 面向切面编程，使业务和逻辑的解耦，让程序员更加专注于业务，其他交给切面编程来实现&lt;br&gt;要点&lt;br&gt;1） Aspect ：切面，方法调用的横切面，切入系统的一个切面。比如事务管理是一个切面，权限管理也是一个切面&lt;br&gt;静态切入点&lt;br&gt;动态切入点&lt;br&gt;自定义切入点&lt;br&gt;2） Join point ：连接点，也就是可以进行横向切入的位置&lt;br&gt;3） Advice ：通知，切面在某个连接点执行的操作&lt;br&gt;
    
    </summary>
    
      <category term="面向对象" scheme="http://lxh5431.github.io/categories/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
    
      <category term="编程" scheme="http://lxh5431.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>工厂模式</title>
    <link href="http://lxh5431.github.io/2016/06/12/%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95/"/>
    <id>http://lxh5431.github.io/2016/06/12/工厂方法/</id>
    <published>2016-06-11T16:00:00.000Z</published>
    <updated>2016-07-23T16:43:32.957Z</updated>
    
    <content type="html">&lt;h2 id=&quot;工厂模式的定义&quot;&gt;&lt;a href=&quot;#工厂模式的定义&quot; class=&quot;headerlink&quot; title=&quot;工厂模式的定义&quot;&gt;&lt;/a&gt;工厂模式的定义&lt;/h2&gt;&lt;p&gt;工厂模式叫虚拟构造，多态工厂，工厂模式就是专门负责将大量有共同接口的类实例化,而且不必事先知道每次是要实例化哪一个类的模式。它定义一个用于创建对象的接口，由子类决定实例化哪一个类&lt;br&gt;用UML的类图如下；看附件&lt;br&gt;工厂方法创建对象的接口，工厂方法把实例推迟到子类&lt;br&gt;为了更好的理解工厂模式，我举一个例子，在一个在一个医院里有不同的科室，创建一个医院接口，实现两个不同的科室实现医院的接口，方法是创建新的对象，就是创建不同的医生对象，然后再创建一个医生接口，实现不一样的医生，在工厂中创建，然后就可以降低对象和对象之间的耦合度，提高了系统的灵活性。可以通过工厂方法调用不同医生的调度。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;工厂模式的优势&quot;&gt;&lt;a href=&quot;#工厂模式的优势&quot; class=&quot;headerlink&quot; title=&quot;工厂模式的优势&quot;&gt;&lt;/a&gt;工厂模式的优势&lt;/h2&gt;&lt;p&gt;应用程序的实例对象都放在一个地方来进行创建，利于对对象的管理和规划，对传值的操作有统一的规划&lt;br&gt;在不修改应用程序其他类和参数的情况下类和对象，并对应用程序的持久性有更好的维护和升级&lt;br&gt;工厂模式的使用场景&lt;br&gt;1.一个系统应当不依赖于产品类实例被创立，就是实例的改变并不影响其他实例的使用。&lt;br&gt;2.这个系统的产品很多的时候，不知道该调用哪一个实例。应该考虑使用工厂模式&lt;br&gt;3.同属于一个实例，应该考虑不同的影响，从而减少依赖&lt;br&gt;4.不同的产品以一系列的接口的面貌出现，从而使系统不依赖于接口实现,从而很好地去恪守接口隔离的原则。&lt;/p&gt;
&lt;p&gt;##局限性&lt;br&gt;重构已经存在的类会破坏客户端代码&lt;br&gt;因为工厂方法所实例化的类具有私有的构造方法，所以这些类就不能扩展了&lt;br&gt;如果确实扩展了工厂方法所实例化的类（例如将构造方法设为保护的，虽然有风险但也是可行的），子类必须具有所有工厂方法的一套实现。&lt;/p&gt;
&lt;p&gt;例子：&lt;br&gt;把三好学生的描述作为例子&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ 首先创建班级接口&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;public interface IClassFactory {&lt;br&gt;IStudent CreateStudent();&lt;br&gt;}&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ 然后创建实现班级接口类&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;/*&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;@author lxh&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;*&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;.public &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;IClassOneFactory&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;IClassFactory&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;@Override&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;public IStudent CreateStudent() &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;//&lt;/span&gt; TODO Auto-generated method stub&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; new Student1();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;public &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;IClassTwoFactory&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;IClassFactory&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;@Override&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;public IStudent CreateStudent() &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;//&lt;/span&gt; TODO Auto-generated method stub&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; new Student2();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;创建接口ISudent&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;IStudent&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SkillOne&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SkillTwo&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Industry&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;创建实现类&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Student1&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;IStudent&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SkillOne&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// TODO Auto-generated method stub&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; ss=&lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;System.out.println(“刻苦勤奋，勇于创新”);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ss;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SkillTwo&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// TODO Auto-generated method stub&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;System.out.println(“学习努力，有上进心”);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Industry&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// TODO Auto-generated method stub&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;System.out.println(“吃苦，勤劳勇敢”);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Object String)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;String s=”优点&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;：”+&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.SkillOne();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; s;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;学生2：。。。&lt;br&gt;创建测试类&lt;br&gt;/**&lt;br&gt;工厂模式&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;br&gt;@author lxh
&lt;/em&gt;&lt;br&gt;public class ClientTest {&lt;br&gt;/**&lt;/p&gt;
&lt;p&gt;工厂方法模式实现时，客户端需要决定实例化那个工厂来实现运算类，选择判断的问题还是存在的，也就是说，工厂方法把简单工厂的内部逻辑判断移到了客户端代码来进行。&lt;br&gt;你想要加的功能，本来是改工厂类的，而现在是修改客户端。&lt;br&gt;*&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;System.out.println(“学生&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;：”);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; IClassFactory factory=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; IClassOneFactory();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;IStudent becility=factory.CreateStudent();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;becility.SkillOne();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;becility.SkillTwo();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//becility.Industry();&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;学生2：&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;IClassFactory factory2=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; IClassTwoFactory();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;IStudent industry=factory2.CreateStudent();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// industry.SkillOne();&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// industry.SkillTwo();&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;industry.Industry();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;结果：&lt;br&gt;学生1：&lt;br&gt;刻苦勤奋，勇于创新&lt;br&gt;学习努力，有上进心&lt;br&gt;学生2：&lt;br&gt;任劳任怨，是个好学生&lt;/p&gt;
&lt;p&gt;###总结&lt;br&gt;通过这个学习，对工厂模式的创建和实现有进一步的实现，对设计模式的简洁与应用的场景有更好的了解，在实践中应用生活的例子，让学习更有感觉。发现生活中的美才是学习的最好的诠释。&lt;br&gt;应用：&lt;br&gt;javaweb设计模式之道&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;工厂模式的定义&quot;&gt;&lt;a href=&quot;#工厂模式的定义&quot; class=&quot;headerlink&quot; title=&quot;工厂模式的定义&quot;&gt;&lt;/a&gt;工厂模式的定义&lt;/h2&gt;&lt;p&gt;工厂模式叫虚拟构造，多态工厂，工厂模式就是专门负责将大量有共同接口的类实例化,而且不必事先知道每次是要实例化哪一个类的模式。它定义一个用于创建对象的接口，由子类决定实例化哪一个类&lt;br&gt;用UML的类图如下；看附件&lt;br&gt;工厂方法创建对象的接口，工厂方法把实例推迟到子类&lt;br&gt;为了更好的理解工厂模式，我举一个例子，在一个在一个医院里有不同的科室，创建一个医院接口，实现两个不同的科室实现医院的接口，方法是创建新的对象，就是创建不同的医生对象，然后再创建一个医生接口，实现不一样的医生，在工厂中创建，然后就可以降低对象和对象之间的耦合度，提高了系统的灵活性。可以通过工厂方法调用不同医生的调度。&lt;br&gt;
    
    </summary>
    
      <category term="设计模式" scheme="http://lxh5431.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="编程" scheme="http://lxh5431.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>时光不老记忆不浅</title>
    <link href="http://lxh5431.github.io/2016/04/11/%E6%97%B6%E5%85%89%E4%B8%8D%E8%80%81%E8%AE%B0%E5%BF%86%E4%B8%8D%E6%B5%85/"/>
    <id>http://lxh5431.github.io/2016/04/11/时光不老记忆不浅/</id>
    <published>2016-04-10T23:54:36.000Z</published>
    <updated>2016-07-01T14:46:30.072Z</updated>
    
    <content type="html">&lt;p&gt;荏苒时光匆匆，在我的记忆留下了什么，带走了什么，我在时光中找到了什么，我只能和自己说时间不老，记忆不浅。&lt;br&gt;怀念的老时光总是太短，也许是怀念在书屋里看一本热血沸腾的武侠小说，还是在宁静的图书馆里看一本从你世界走过的那种淡淡的书香气息，也许是在广场玩溜冰时的傻笑，还是在家里泡一杯青涩的茶，在懒散的午后伴随着轻音乐走过时光，我们都在抱怨时光匆匆，然而时光不老，我们记忆不浅，我相信人生的阅历随着时间而上升，也许我们只是用时间换取记忆，当我们一回首，是否错过的就是我们所期待的那些记忆。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;最近总有一些不错的怀旧的歌曲在转角的街头荡漾，也许现在我也到了怀念旧时光的年纪了，人未老心老，有时候真的是记忆总抹不去的总让人怀念，有些创伤需要的不是解药，而是时间。不知道从何时起，渐渐的开始兴起的非主流的范儿，然后从喜欢到厌恶再到平淡，总是会有一种淡漠让我刻骨铭心，有时候总想捉住一些不属于自己的东西，然后留作以后的纪念，可是总有那么几次是我的失误或者不不该记忆的记忆保留，留下的不仅是哀伤，还有对生活的一丝迷茫，很久以前就有朋友问我，假如分开了以后还会记得呢，那时候我们都懵懂，我们一直是一生的红颜知己，已经记不住你的容颜，也许有一天再相遇，你估计已经不是原来的你，我们之间的感情还在，只是缺少了共同的话题，亦或者是缺少了那种默契，然后渐行渐远，我不知道你是否还记得那一句我们之间的话，时间不老，对你的记忆还会停留在那个夏天，那个地方，我们一起，最后只能说你教会了我很多东西，很多话，依然还在昨天。&lt;/p&gt;
&lt;p&gt;现在是否已经到了怀旧的季节，要不然不会总想起那些一起奋斗的小伙伴，也许是因为我一直在停留，只为了遇见，只为了等待，也许有一天等到不一样的你，我依然不会失望，因为你在我心中永远是我的朋友，我的好伙伴，我的知己。仅是怀念你的好吧，岁月真是一把杀猪刀，一转眼已八年，那时无知的我许下的承诺真的觉得只是自己的一种念想而已，就想我追求的依然会不变吗。有人对我说一百年我希望你性格还是那样，不要变，不要那么无心无肺的活着，要开心的活过每一天，每一次的相遇，相知，和最后的分离，我都希望在时间的映照下不会褪色，我很赞同，但我总觉得这时间最残酷，不要奢望把时间供养，你就可以为所欲为，我觉得只有正确的认识自己才不至于迷失自己。&lt;/p&gt;
&lt;p&gt;写一段文字就是记忆一段回忆，时光不老，记忆不浅。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;荏苒时光匆匆，在我的记忆留下了什么，带走了什么，我在时光中找到了什么，我只能和自己说时间不老，记忆不浅。&lt;br&gt;怀念的老时光总是太短，也许是怀念在书屋里看一本热血沸腾的武侠小说，还是在宁静的图书馆里看一本从你世界走过的那种淡淡的书香气息，也许是在广场玩溜冰时的傻笑，还是在家里泡一杯青涩的茶，在懒散的午后伴随着轻音乐走过时光，我们都在抱怨时光匆匆，然而时光不老，我们记忆不浅，我相信人生的阅历随着时间而上升，也许我们只是用时间换取记忆，当我们一回首，是否错过的就是我们所期待的那些记忆。&lt;br&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="http://lxh5431.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>回望过去，展望未来---关于2015it报告的总结</title>
    <link href="http://lxh5431.github.io/2016/04/06/%E5%9B%9E%E6%9C%9B%E8%BF%87%E5%8E%BB%EF%BC%8C%E5%B1%95%E6%9C%9B%E6%9C%AA%E6%9D%A5-%E5%85%B3%E4%BA%8E2015it%E6%8A%A5%E5%91%8A%E7%9A%84%E6%80%BB%E7%BB%93/"/>
    <id>http://lxh5431.github.io/2016/04/06/回望过去，展望未来-关于2015it报告的总结/</id>
    <published>2016-04-06T09:05:17.000Z</published>
    <updated>2016-07-06T09:55:32.965Z</updated>
    
    <content type="html">&lt;p&gt;最近才有时间去关注下IT领袖峰会，关于这届的峰会，不少的互联网的大咖都来做了一次演讲，在这一次的了解中，对今年的发展和产业有了一个更好的了解，，关于其他人的演讲都在说明这大公司在布局物联网，完善互联网的生态圈，整合中国国内的环境和资源，接下来的对我们来说，去老大互联网工作还是创新依然是一个好的选择，开拓市场和完善维护原有的系统和网站依然是一个很好的选择，选择大城市的快捷是提升技术的一个好的选择，不过对我来说这还得加倍的努力了。也许我的先去小的公司去学习新的技术，然后才能想这些公司提升自己吧。&lt;br&gt;在大会上，发表了关于工业部和信息部，发改委和世界it组织的一些大数据整理。对过去一年所发生的it产业的调整和发展都有很详尽的叙述，在制造驱动到创新驱动的条件下，发动了 &lt;em&gt;大众创新，万众创业&lt;/em&gt; 的国家战略，把互联网—+提升到国家层面上来，所以现在正是一个好的时机去创新，去开拓，关于创业我觉得大学生还需要更多的阅历，也许我现在已经掌握了产品，但是现在却缺少一个能够掌握大局的管理者，所以现在是磨练技术的时候，无论是技术还是管理都应该有一个装备，也许这就是我所向往的吧。在报告里所提到的关于华为，腾讯和中兴的创新，关于专利的互换，专利就是技术的体现，现在的中国在专利的保护上还在起步，不过我相信这也是机遇，在大公司的收购中获取自己的信息，改变自己的学习方式，然后达到自我的修行吧。华为的28纳米芯片的发布，打破了垄断，也许现在才在蹒跚起步，但是有了开始就有了曙光，技术是发展的长久生命线，我们需要的不仅仅是打破，还要向别人去脱销自己的产品，构造自己的产物链，加大科研资金，才能在不断地引领未来。&lt;br&gt;无论是互联网+的国家战略，还是大众创业，万众创业的豪情万丈，但是首先你要明白的是如何去做到自我的产品的唯一性和友好型，产品就是一个公司的立业之本，也许就是一点点的创新才能拯救自我。移动互联网的蓬勃发展，已经深深的影响着社会 的各行各业，加剧了产业调正和合作，在国际与世界的经济冲击，我们需要自己的产业，而不是全是外面的产业劲来，我们需要领跑者，才能产生好的创新平台，才能找到更好的自己的位置，在下一波经济冲击中，存活下来长成参天大树。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;技术是一个技术人的最基本的素养&quot;&gt;&lt;a href=&quot;#技术是一个技术人的最基本的素养&quot; class=&quot;headerlink&quot; title=&quot;技术是一个技术人的最基本的素养&quot;&gt;&lt;/a&gt;技术是一个技术人的最基本的素养&lt;/h2&gt;&lt;p&gt;我需要的不仅是这种素养还需要对这个社会的产业进一步了解，才能适应这社会的产品需求和用户体验，所以这次大会给予未来的定位了大数据和深度学习，无人机和人工智能还有就是智慧城市，如何实现更好的产品覆盖，就需要对自己的未来的走势有一个大概的了解，数据来源网络，网络接收数据，数据展示未来。这就是我对这一次大会的一次总结，在不同的人中会有更多的阅历去分享，去学校去传播，如何更加深入的进入每个人的生活，产品的好坏就和我们所设计的软件是一致的，所以现在我们不仅需要产品的实现还有对产品的适应能力进行深入的多方位的了解。&lt;br&gt;最后要说的就是一种it经济模式，分享经济，就是所有的经济和产品都是开源的，所有事物都是免费的，但是我们只对自己的服务收费，这种模式外国已经有了长足的发展，无论开源的结果如何，开源就会有更好的粘合度，吸引更多的开发者去开发适应本产品的软件，丰富各种不一样的社会生物圈，让产品的理念更加有意义。&lt;br&gt;未来不仅是别人的世界，也是我们再创造的人的世界，只有描绘世界，你才发现世界是那么的美好，我的想象在我的产品中。&lt;br&gt;                                                   —————-榕树下&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;最近才有时间去关注下IT领袖峰会，关于这届的峰会，不少的互联网的大咖都来做了一次演讲，在这一次的了解中，对今年的发展和产业有了一个更好的了解，，关于其他人的演讲都在说明这大公司在布局物联网，完善互联网的生态圈，整合中国国内的环境和资源，接下来的对我们来说，去老大互联网工作还是创新依然是一个好的选择，开拓市场和完善维护原有的系统和网站依然是一个很好的选择，选择大城市的快捷是提升技术的一个好的选择，不过对我来说这还得加倍的努力了。也许我的先去小的公司去学习新的技术，然后才能想这些公司提升自己吧。&lt;br&gt;在大会上，发表了关于工业部和信息部，发改委和世界it组织的一些大数据整理。对过去一年所发生的it产业的调整和发展都有很详尽的叙述，在制造驱动到创新驱动的条件下，发动了 &lt;em&gt;大众创新，万众创业&lt;/em&gt; 的国家战略，把互联网—+提升到国家层面上来，所以现在正是一个好的时机去创新，去开拓，关于创业我觉得大学生还需要更多的阅历，也许我现在已经掌握了产品，但是现在却缺少一个能够掌握大局的管理者，所以现在是磨练技术的时候，无论是技术还是管理都应该有一个装备，也许这就是我所向往的吧。在报告里所提到的关于华为，腾讯和中兴的创新，关于专利的互换，专利就是技术的体现，现在的中国在专利的保护上还在起步，不过我相信这也是机遇，在大公司的收购中获取自己的信息，改变自己的学习方式，然后达到自我的修行吧。华为的28纳米芯片的发布，打破了垄断，也许现在才在蹒跚起步，但是有了开始就有了曙光，技术是发展的长久生命线，我们需要的不仅仅是打破，还要向别人去脱销自己的产品，构造自己的产物链，加大科研资金，才能在不断地引领未来。&lt;br&gt;无论是互联网+的国家战略，还是大众创业，万众创业的豪情万丈，但是首先你要明白的是如何去做到自我的产品的唯一性和友好型，产品就是一个公司的立业之本，也许就是一点点的创新才能拯救自我。移动互联网的蓬勃发展，已经深深的影响着社会 的各行各业，加剧了产业调正和合作，在国际与世界的经济冲击，我们需要自己的产业，而不是全是外面的产业劲来，我们需要领跑者，才能产生好的创新平台，才能找到更好的自己的位置，在下一波经济冲击中，存活下来长成参天大树。&lt;br&gt;
    
    </summary>
    
      <category term="程序员视觉" scheme="http://lxh5431.github.io/categories/%E7%A8%8B%E5%BA%8F%E5%91%98%E8%A7%86%E8%A7%89/"/>
    
    
      <category term="编程" scheme="http://lxh5431.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>思想的边界没有界定</title>
    <link href="http://lxh5431.github.io/2016/03/25/%E6%80%9D%E6%83%B3%E7%9A%84%E8%BE%B9%E7%95%8C%E6%B2%A1%E6%9C%89%E7%95%8C%E5%AE%9A/"/>
    <id>http://lxh5431.github.io/2016/03/25/思想的边界没有界定/</id>
    <published>2016-03-25T11:53:00.000Z</published>
    <updated>2016-06-25T08:17:39.805Z</updated>
    
    <content type="html">&lt;h3 id=&quot;思想的边界没有界定&quot;&gt;&lt;a href=&quot;#思想的边界没有界定&quot; class=&quot;headerlink&quot; title=&quot;思想的边界没有界定&quot;&gt;&lt;/a&gt;思想的边界没有界定&lt;/h3&gt;&lt;p&gt;还是不习惯去代替我所没有接触的领域，我还是需要继续寻找一条路让我继续前行，我不知道你们的未来在哪里，但我知道我未来没有边界。就有无限可能每天醒来都会想到下一个终点还是那么遥远。累了就该放下一些不了解的东西，给自己一个清醒的未来，我不知道的不仅是自己，还有未来。&lt;br&gt;&lt;img src=&quot;http://o94r16s1l.bkt.clouddn.com/QQ%E5%9B%BE%E7%89%8720160623194632.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;关于未来的定义我已经开始重视，可是我总感觉我捉不住，也想不明白，也许正应了一切的想象都基于现实吧天马行空的想象都是不切合实际的，可是当我的心基于了一件产品上，然后从其中抽象出模型的时候我又觉得这是否是矛盾的呢，也许我该去追求一些别人可能的领域，即使这是一个没有边界的未来，我也希望能够给予生活一点信心，当我站在大楼的顶层的时候，我总不会是因为这繁华而迷失，而是不知道路的时候我都不知道怎样去寻找路，这就是缺少灵性的一种表现吧，总是在夜里想到别人没想过的事，关于性格，关于世界，关于信仰还有规划，即使没有边界的就没有边际，科幻的一切都在自己心中，当你对世界足够了解，我想我就能够更好的实现这世界的一点，然后继续在自己的蓝图里规划，即使只是一个很小的地域，我都不知道的两件事，感觉与情感，当我控制了自己的感情，我就和失去了灵性，一种无谓的情感。这也是对时间的一种怨念吧，当年轮在滚动，我知道文字的表达能力已经不能主宰了，我需要更加简洁的话语去描述，我不知道你是否已经在未来，但我知道我就在这里，从来没有退缩，从没有这么的有自己的想法，也许下一刻就会失去思想，我知道那时候还是有你的背影，别人总说找一个合适，我知道我有合适的，我在等我喜欢的那个，我也知道你在等，就在这点死机，那冷漠的言语就是突破不额一些限制，我知道这就是错过的理由，我一直有过一种冲动。这就是一种认识自己的基点，我知道我自己已经在规划未来，然而未来的无限线已经在侵蚀我的思想，当我还剩一点记忆，希望是你。当没有边界，就没有束缚，就有可能，我知道我已经在一种错误的路上，当我还是继续走下去即使已经没有背影，最后一次说再见&lt;/p&gt;
&lt;p&gt;下笔之前，我就知道总是会偏题，心中最后的背影居然是她，我也是深深感到无力，也许我早已经过了怦然心动的年纪，在最好的世界里面对最美的你，我只希望最后的世界里有你，世界为你而变。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;思想的边界没有界定&quot;&gt;&lt;a href=&quot;#思想的边界没有界定&quot; class=&quot;headerlink&quot; title=&quot;思想的边界没有界定&quot;&gt;&lt;/a&gt;思想的边界没有界定&lt;/h3&gt;&lt;p&gt;还是不习惯去代替我所没有接触的领域，我还是需要继续寻找一条路让我继续前行，我不知道你们的未来在哪里，但我知道我未来没有边界。就有无限可能每天醒来都会想到下一个终点还是那么遥远。累了就该放下一些不了解的东西，给自己一个清醒的未来，我不知道的不仅是自己，还有未来。&lt;br&gt;&lt;img src=&quot;http://o94r16s1l.bkt.clouddn.com/QQ%E5%9B%BE%E7%89%8720160623194632.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="http://lxh5431.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>榕树不老是时光</title>
    <link href="http://lxh5431.github.io/2016/03/25/%E6%A6%95%E6%A0%91%E4%B8%8D%E8%80%81%E6%98%AF%E6%97%B6%E5%85%89/"/>
    <id>http://lxh5431.github.io/2016/03/25/榕树不老是时光/</id>
    <published>2016-03-25T04:53:33.000Z</published>
    <updated>2016-06-25T08:17:39.829Z</updated>
    
    <content type="html">&lt;h3 id=&quot;榕树不老的时光&quot;&gt;&lt;a href=&quot;#榕树不老的时光&quot; class=&quot;headerlink&quot; title=&quot;榕树不老的时光&quot;&gt;&lt;/a&gt;榕树不老的时光&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ 你会不会因为一首歌而喜欢一种类型的人，你会不会因为一部电影或者一个励志的故事而去改变一种性格。&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;回来感触好深，感觉自己越来越不懂得自己，很多人都说做了解自己的是自己，然而我却觉得傍观者清，别人更容易的里评价别人，当评价自己时，最多的却是落寞，也许这就是我不停纠结的原因所在吧。&lt;/p&gt;
&lt;p&gt;在我的印象中，我从来是一个低调的善良的，忍让的一个小男孩，然而在别人眼中却是热心而友好，给人一种就是很容易接近的男孩子，我真的是吗，我很矛盾，因为在我心中，我渴望被别人理解，然而我却又不想把自己的性格无条件的表现，我总是想伪装自己，让自己不至于受到外界的影响，我真正喜欢自己的质朴，不会被城市的繁华所迷失自己，我虽然很羡慕这样那样的一些不一样的爱情，友情，其实我自己也有，可为何我总是那么消极的对待一件事，一个人，也许我一直在逃避一个人，一件事。不知道从何时起，我能宽容一个骗我很深的人，不止从何时起，我能够去适应一个人对我的冷落，难道我性格真的变得懦弱，我还在深深地呼吸，也许这不是我要的结果，但已经是最好的回应。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;每次看到别人秀，你就不心荡，其实我开始麻木了，我现在需要的是什么，是友情，是爱情，还是事业，我还在为家里而烦忧，我总是那么的小心翼翼的生活，到底为了什么，我总是那么喜欢规划自己的生活，旅游和前程，我觉得这样真的很累，很久很久都想来一个想都不想的旅行，来洗涤我的心灵，因为我已经对现实麻木了，还有毕业前的恐惧，也许该来的总是不期而遇，那些用信用换取的一点薄利，也不知道何时是个尽头呢，我写下的有时候我自己看见的不再是我的真实的性格没有时候我更想是一个木雕，任人宰割。&lt;/p&gt;
&lt;p&gt;印象中的那些人，已经开始忘记得差不多了，我以后的生活是否找到女朋友然后结婚生子，这太可怕了，我还有梦没醒，我还有理想没定，我现在是最迷茫，最彷徨的日子了，我都不知道我是否真的适合这个行业，网上的东西真真假假，最后我都眼花缭乱了，我觉得对的就是错的了，所以现在只是迷茫我需要寻找的不只是出路，还有未来。今天看到学姐说再也不再无所顾忌了，其实我早已经开始谋划了，然而我现在学到了什么，什么都没学会，我能够唯一骄傲的不是项目，而是我坚持，我对知识的那种迫切感。没有人比我更加强烈，有时候合理的幻想也会是最糟糕的开始，我对未来充满未知的生活充满了恐惧，也许这就是我今天的心病吧，我还需要梦，我还有梦想，所以我需要的不是我想要的，我需要把自己提升自己，才能够和未来的自己打交道，我还是我，只是我哦对思想开始更加的辽阔，不再局限于一偶了，也许某一天回头你就能看到最美的风景，然后在夕阳西下的路上放一个我想要的未来。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;榕树不老的时光&quot;&gt;&lt;a href=&quot;#榕树不老的时光&quot; class=&quot;headerlink&quot; title=&quot;榕树不老的时光&quot;&gt;&lt;/a&gt;榕树不老的时光&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ 你会不会因为一首歌而喜欢一种类型的人，你会不会因为一部电影或者一个励志的故事而去改变一种性格。&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;回来感触好深，感觉自己越来越不懂得自己，很多人都说做了解自己的是自己，然而我却觉得傍观者清，别人更容易的里评价别人，当评价自己时，最多的却是落寞，也许这就是我不停纠结的原因所在吧。&lt;/p&gt;
&lt;p&gt;在我的印象中，我从来是一个低调的善良的，忍让的一个小男孩，然而在别人眼中却是热心而友好，给人一种就是很容易接近的男孩子，我真的是吗，我很矛盾，因为在我心中，我渴望被别人理解，然而我却又不想把自己的性格无条件的表现，我总是想伪装自己，让自己不至于受到外界的影响，我真正喜欢自己的质朴，不会被城市的繁华所迷失自己，我虽然很羡慕这样那样的一些不一样的爱情，友情，其实我自己也有，可为何我总是那么消极的对待一件事，一个人，也许我一直在逃避一个人，一件事。不知道从何时起，我能宽容一个骗我很深的人，不止从何时起，我能够去适应一个人对我的冷落，难道我性格真的变得懦弱，我还在深深地呼吸，也许这不是我要的结果，但已经是最好的回应。&lt;br&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="http://lxh5431.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>面向晴天，面向你</title>
    <link href="http://lxh5431.github.io/2016/03/25/%E9%9D%A2%E5%90%91%E6%99%B4%E5%A4%A9%EF%BC%8C%E9%9D%A2%E5%90%91%E4%BD%A0/"/>
    <id>http://lxh5431.github.io/2016/03/25/面向晴天，面向你/</id>
    <published>2016-03-25T03:51:34.000Z</published>
    <updated>2016-06-25T08:17:39.843Z</updated>
    
    <content type="html">&lt;h3 id=&quot;面对晴天，面对你&quot;&gt;&lt;a href=&quot;#面对晴天，面对你&quot; class=&quot;headerlink&quot; title=&quot;面对晴天，面对你&quot;&gt;&lt;/a&gt;面对晴天，面对你&lt;/h3&gt;&lt;p&gt; 我只是你生活跑龙套，而不是你的主角，我在这里只为了体验不一样的生活，即使我已经做好至少十字路口的过客，不知道多少次的擦肩而过等到的确是你最后的一句话，我需要等一个答案，面对晴天，面对你。&lt;br&gt;开三毛的文字，对生活的点点滴滴都包含着对生活的思考，读张小娴的书，每一句都紧扣着爱情不移主题，我不需要去懂得太多因为我觉得有时候有些事不要把一切都安排好，需要一份期待，一点等待。龙应台的那种对生活的那种哲理性的思考，我都深深的为自己而加油，°不同的文字，字里的温度只有自己了解，我不要真正去懂得，只是不是迷茫在这里就是胜利。当你朝天空呐喊，我希望你拥有自己的那种激情，而不去思考这样其实是一种时代的中介，昭示着我们需要的责任和对自己的一种肯定，我也很久以前就想到，我需要的是平淡的生活，然后慵懒的去生活着，一直走下去。我不希望有一个时间来挣脱枷锁。生活永远不会强求你去认真的生活。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;每次审阅自己的时候，总感觉自己太过于了解自己，所以每件事都想着完美的结束，但我知道其实我们都需要希望，即使渺茫的像大海寻找灯塔的小船，有时候我的思想就像那小舟，在海中自由的向前，前路未知，自己的状态位置都遗忘在自己的记忆里，就当是一种旅行，但我知道思想的开阔却顶不住自己的压力，我还是没有向生活低头，至少我知道我还需要时间去探讨这世界，构建这世界，这就是我要改造世界的平凡吗，可是只是塑造一个虚拟世界而已，其实还是在生活之上的构建方式而已，当我站在底下，我也不会仰望这飘渺的宇宙，因为我的心属于小城，而不是开阔的未来，总是叹息很多人走不出自己的地域，然而我走出来了才发现我是如此的渺小，不再纠结于世界的不公平，只能遇到困难就需要去克服，当我到达一个中介线，才知道我才刚刚起步，一直在路上，我一直咋享受这个过程，只希望有一个懂我的人一起分享，去开着不一样的世界，当我的梦想那么小，当这世界还在反转，当我还想着无知的梦想，那是信仰啊，一种对未来定位的导航，因为中心总是那么的明显，我需要看到的就不再是我自己的影子，还有未来。&lt;/p&gt;
&lt;p&gt;每次对自己的规划产生怀疑我就会想到你，你不在，我就不再继续构造，只是希望我和你的成果还有一点用处我就不会再去想一些无聊的问题，每一次的坚持都是对自己的一种回应，我需要勇气去面对你，即使你还不确定我们之间的关系，我想是一种微妙的互助吧，我需要一个人一起跑步，一起生活，一起面对未来，我更需要面对你，我找到是合适的还是喜欢的都唔的所谓哦，因为自己早已经过了这个年纪，我需要的不再是别人想象中的那个自己，我已经知道自己的方向了，我一定得一直走下去，因为你，因为晴天。&lt;/p&gt;
&lt;p&gt;无关时光，无关友情，我只希望我还有青春，还有梦，我就会继续和你并肩作战，一起在山顶等待日出的那缕晨曦，破晓的那一瞬间的美丽。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;面对晴天，面对你&quot;&gt;&lt;a href=&quot;#面对晴天，面对你&quot; class=&quot;headerlink&quot; title=&quot;面对晴天，面对你&quot;&gt;&lt;/a&gt;面对晴天，面对你&lt;/h3&gt;&lt;p&gt; 我只是你生活跑龙套，而不是你的主角，我在这里只为了体验不一样的生活，即使我已经做好至少十字路口的过客，不知道多少次的擦肩而过等到的确是你最后的一句话，我需要等一个答案，面对晴天，面对你。&lt;br&gt;开三毛的文字，对生活的点点滴滴都包含着对生活的思考，读张小娴的书，每一句都紧扣着爱情不移主题，我不需要去懂得太多因为我觉得有时候有些事不要把一切都安排好，需要一份期待，一点等待。龙应台的那种对生活的那种哲理性的思考，我都深深的为自己而加油，°不同的文字，字里的温度只有自己了解，我不要真正去懂得，只是不是迷茫在这里就是胜利。当你朝天空呐喊，我希望你拥有自己的那种激情，而不去思考这样其实是一种时代的中介，昭示着我们需要的责任和对自己的一种肯定，我也很久以前就想到，我需要的是平淡的生活，然后慵懒的去生活着，一直走下去。我不希望有一个时间来挣脱枷锁。生活永远不会强求你去认真的生活。&lt;br&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="http://lxh5431.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>碎笔</title>
    <link href="http://lxh5431.github.io/2016/03/02/%E7%A2%8E%E7%AC%94/"/>
    <id>http://lxh5431.github.io/2016/03/02/碎笔/</id>
    <published>2016-03-02T04:51:25.000Z</published>
    <updated>2016-06-25T08:17:39.832Z</updated>
    
    <content type="html">&lt;p&gt;这世上只有一种成功，就是能够用自己喜欢的方式，度过一生。&lt;/p&gt;
&lt;p&gt;不知道从何时开始喜欢记录自己的生活，自己走过的路，也许这也是一种成长吧。&lt;/p&gt;
&lt;p&gt;辗转多地，感悟披多的，不说其他，我至少知道我还有朋友还有友情，还有差距。&lt;/p&gt;
&lt;p&gt;总感觉别人总是那么遥远，懂得我都不懂的东西，学到我无法理解的东西，我一直以为我自己还是以前的自己，懵懂的样子也许距离文盲不远，然而我发现其实我自己也有优势，&lt;/p&gt;
&lt;p&gt;我懂得更多的杂语，我看过更多的山，走过更多的路，见过很多别人走不到的风景，听过更多人的人生，不知道从何时起，我更喜欢关注生活，关注物价，关心人文，关心城市。&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;旅行
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;走在长江的某城上，感受大地万物的苏醒，我站在路口，看人来人往，也许在某一个时刻，我眼中只有这城市的记忆，而我不就是匆匆的过客。高速公路的呼啸而过，我只在这里停留。很久就想来长江边的城市看看祖国的大山大河，鬼斧神工，还是长江涛涛都无法理解我一个南方的男孩子想寻碎笔&lt;/p&gt;
&lt;p&gt;找的不只是一种美景的快感，还有对历史的沉淀的一种追求，我不知道别人是怎么的去感受不一样的长江的，有时候在别人眼里，这司空见惯了，真的有时候习惯真能迷乱自己的思想，我更愿意的去解读我不一样的那种触动。长江的起源，历史，还有哺育，还是现在长江的繁荣都尽在我眼底，我只是默默的记录我还在这里走过一趟。&lt;/p&gt;
&lt;p&gt;走在桂林的街头，车水马龙，我不知道那时候是怎么样的一种触动，桂林，我默默的来过了。你的容颜依然是如此的扣动我心弦，不平铺的街头不显得拥挤，撑一把伞走过你烟雨濛濛的画卷。到达这里我才知道什么是朦胧的美感，隐藏的不再是你的面纱，而是神秘感。山连山，水连着水，在刘三姐的影片里那种黑白电影背影更加衬托你的美感，我只是从个人的思维去理解你。偶尔在烟雨连绵的午后，去学校对面的书店，找一本上年纪的书籍，沉淀的不止是我浮躁的性情，还有我对知识的一点点拨，看着摇曳着竹排的摆渡人，有时候觉得他们才是知识的传承者，历史的那些过往总能从他们身上找到痕迹。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;见识
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;也许有人质疑我，你才走过几个地方，看过几本书，就觉得书读百遍，其义自见，然而现在生活日新月异，更加需要的是读万遍书还不如行万里路，走过的路回头看看才发现自己还是多么的渺小，很多的反对对我来说只是一种催促吧，毕竟我觉得我比别人更了解我自己，你有你的言语，我有我的思想，我在努力的向前方前进，而不是埋没在你的谴责中，我又没做错什么，你的言论只能作为我思考问题的参考。&lt;/p&gt;
&lt;p&gt;最近混迹在社区上，我发现我不在局限于一个区域，我能用更多的思维去解决一个思想，我很佩服探险家漂流黄河渠寻找自己的梦想，还原了一个有血有肉的黄河之殇。让我们更直观的了解不一样的世界，让我听到了黄河尽头拾荒者的呼唤，而不会像其他人一样人云亦云，我了解过一个船员在孤独的大海上生活原样和看到的不一样的生活方式，这样我会更加的理解和宽容一个从来没接触的人的诉苦，看快播审判的案件我不再是关注于结果，我更应该看到这案件对未来互联网和技术的法律规则和道德规范，技术并没有错，错的是人心，李先生的遭遇让国航的策略改变，打破去哪垄断的开端，我相信这不只是一个开端，现在不止需要用户的认可，还需要一个公平的场所，用户体验是一方面，我们应该看到更新技术之下的另一面。百度贴吧病友吧的求救我都觉得这世界需要的是懂得更多的知识去捍卫自己的权利，而不是在角落痛哭。逐渐我发现我不在是用游戏去和一个陌生人交流，而是谈天说地，说人文说技术，说不一样的异国风情和山河的壮美和时代的变迁。说我还不是很懂得的金融，和我不蹩脚的思想，当然我更想发表自己的声音，自己想法啊，而不是无限的汲取，要不然我怕有一天我会失去我的思想。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;生活剪影
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;关于生活:到达一个陌生的城市，更加关注与交通，我的旅行总是在流浪中度过，有时也想象中去找到让我心灵安定的地方，其实我觉得一程城市的生活才是一座城市的活力和见证，毕竟城市是死的，人的活动才能代表着这城市的底蕴和历史，我不想去探讨别人的专业知识的那部分，毕竟我只是一个过往的一个观察者，而不是去定义这个地方的那些东西，所以我努力的去感受一个真正的城市发原样，我走进市场，社区去了解一些旅游者了解不到的东西。所以我哦一直在旅行，一直在流浪，在金鸡岭的市场里，我还是能看到生活着那些对着城市很努力贡献的一批人，他们在忙碌着自己的生活，也看到他们的善良和市民的一些其他的特性，我不知道的大部分都是很无法理解的，只是对我这个外人来说，我没有因为我是外人而去隔离。这就是一个城市最好的一个片段吧&lt;/p&gt;
&lt;p&gt;关于交通，一个城市的交通就是一个城市的一个剪影，要致富先修路，这是一个城市的交流方式，假如一个城市缺少了交流，就相当于缺少了活力，这城市就缺少了前进的动力，交通的多少和顺畅，让人们距离变得更加渺小，交流更加的频繁，这城市更宜居和让人放心。在城市的一头到另一头，我只在这里穿梭，我不再是一个过客，有时候我就是见证者。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;这世上只有一种成功，就是能够用自己喜欢的方式，度过一生。&lt;/p&gt;
&lt;p&gt;不知道从何时开始喜欢记录自己的生活，自己走过的路，也许这也是一种成长吧。&lt;/p&gt;
&lt;p&gt;辗转多地，感悟披多的，不说其他，我至少知道我还有朋友还有友情，还有差距。&lt;/p&gt;
&lt;p&gt;总感觉别人总是那么遥远，懂得我都不懂的东西，学到我无法理解的东西，我一直以为我自己还是以前的自己，懵懂的样子也许距离文盲不远，然而我发现其实我自己也有优势，&lt;/p&gt;
&lt;p&gt;我懂得更多的杂语，我看过更多的山，走过更多的路，见过很多别人走不到的风景，听过更多人的人生，不知道从何时起，我更喜欢关注生活，关注物价，关心人文，关心城市。
    
    </summary>
    
    
      <category term="随笔" scheme="http://lxh5431.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>一场小病</title>
    <link href="http://lxh5431.github.io/2016/02/25/%E4%B8%80%E5%9C%BA%E5%B0%8F%E7%97%85/"/>
    <id>http://lxh5431.github.io/2016/02/25/一场小病/</id>
    <published>2016-02-25T05:52:57.000Z</published>
    <updated>2016-06-25T08:17:39.787Z</updated>
    
    <content type="html">&lt;p&gt;有时候认真的是一种很难理解的动物，当你没事的时候不去珍惜，当你真正的生起一场小病的时候就觉得无趣的生活其实也不错，至少有人关心你，而不用去担心病魔纠缠不清，我在一场小病之后顿悟，其实我的生活还是挺美好的，至少我还有健康的本钱，而不是奄奄一息的苟且的生活。&lt;br&gt;你来或者不来，它就在那里，对的，有些时候不是你自己的心思可以阻止的，所以我们需要的只是顺其自然的接受，平时从没有过这样头重脚轻的感觉，也许我这是把小说里的一种立海大武功给学会了，但我深知这次的小病让我懂得不再只是去付出，只是去忍让的生活，有时候也需要关心，也需要别人不管的地带继续沉思，我还是我，只是我更加珍惜每一个人和每一件事，珍惜每次和妹妹爸妈的日子，曾经我觉得结拜的总是那么的重要，其实现在看来，只有亲哥才是唯一的依靠，那些只是你生活的润滑剂，给你生活的精彩抹上一笔，人总是要成长，那些我所失去的不会再回来，友情，亲情，总是那么的让人着迷，也许这也是构建多彩生活的一部份吧。撕心裂肺的头痛，总觉得自己下一秒就要和这世界分离，然而并没有那么的严重，只是头不停的思考，幻想不一样的东西，有些东西开始在影响我的生活，梦有时候也是一种生活，我真的有时候觉得自己能够去预测不定的未来，某一种场景，感觉已经发生，我害怕的就是我所畏惧的，真大有时候也很难用言语来分辨我自己，自私的我，热情的我，还是善良的我，我还坐在那边，等一个天明。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;很久没有去真正的感受一种心情了，在我心里的那些感悟总让我觉得我自己越来越渺小，我也许就是这沧海的一栗，慢慢的淡出人们的视线，然后慢慢的沉睡在这不停的长河中，我有我的那些想法，我真正需要的不再是别人的思想，只要他们的技巧，而不用把自己的思想附庸在高尚的思想之上，我到底注重了什么，我到底得到了什么，我又应该用什么继续前行，我相信我的思维能够让我知道前方，而不是总是努力的去憧憬，构想不同的蓝图，我已经深深的被自己的善良打败，也许这也是我的缺点，当你有了一些缺点，你就会慢慢的米是你自己，所以我在继续蹉跎，也在摸索前行，就像一个探险家永远对未知充满敬畏，我对每一件事，每一个细节都赋予不同的含义，也许这也是我视野的一种见证吧。有一句话叫做你看得多远，你就说出怎样的话。所以当你胡扯的时候，先问下自己的知识在那个阶段，真正的需要的不仅是见识，还有你对这世界的了解和畏惧。假如黑洞真的可以实现，我们是否就可以找到一样的自己，一样的记忆，然后可以把不要的抹去，只剩下最好的回忆，也许这不是我要的结果，我了解到的也不再是我原来的那些感悟，仅以此来总结我的小病，也许正是因为这，才让我对生命更加的敬畏，才懂得要认真的活着，努力的活着，关心粮食，关心饮食，关心市场，关心一座城市的方方面面，让我与城市共存，与世界同光辉。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;有时候认真的是一种很难理解的动物，当你没事的时候不去珍惜，当你真正的生起一场小病的时候就觉得无趣的生活其实也不错，至少有人关心你，而不用去担心病魔纠缠不清，我在一场小病之后顿悟，其实我的生活还是挺美好的，至少我还有健康的本钱，而不是奄奄一息的苟且的生活。&lt;br&gt;你来或者不来，它就在那里，对的，有些时候不是你自己的心思可以阻止的，所以我们需要的只是顺其自然的接受，平时从没有过这样头重脚轻的感觉，也许我这是把小说里的一种立海大武功给学会了，但我深知这次的小病让我懂得不再只是去付出，只是去忍让的生活，有时候也需要关心，也需要别人不管的地带继续沉思，我还是我，只是我更加珍惜每一个人和每一件事，珍惜每次和妹妹爸妈的日子，曾经我觉得结拜的总是那么的重要，其实现在看来，只有亲哥才是唯一的依靠，那些只是你生活的润滑剂，给你生活的精彩抹上一笔，人总是要成长，那些我所失去的不会再回来，友情，亲情，总是那么的让人着迷，也许这也是构建多彩生活的一部份吧。撕心裂肺的头痛，总觉得自己下一秒就要和这世界分离，然而并没有那么的严重，只是头不停的思考，幻想不一样的东西，有些东西开始在影响我的生活，梦有时候也是一种生活，我真的有时候觉得自己能够去预测不定的未来，某一种场景，感觉已经发生，我害怕的就是我所畏惧的，真大有时候也很难用言语来分辨我自己，自私的我，热情的我，还是善良的我，我还坐在那边，等一个天明。&lt;br&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="http://lxh5431.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>心有所向而力不足</title>
    <link href="http://lxh5431.github.io/2016/02/23/%E9%9A%8F%E7%AC%942/"/>
    <id>http://lxh5431.github.io/2016/02/23/随笔2/</id>
    <published>2016-02-23T05:29:06.000Z</published>
    <updated>2016-06-25T08:17:39.839Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;http://o94r16s1l.bkt.clouddn.com/%E5%A6%B9%E7%BA%B8.png&quot; alt=&quot;追逐梦想一起飞&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;当你找到方向就去追吧，即使路跌跌撞撞，也不负这青春，这世界给予的一些馈赠。&quot;&gt;&lt;a href=&quot;#当你找到方向就去追吧，即使路跌跌撞撞，也不负这青春，这世界给予的一些馈赠。&quot; class=&quot;headerlink&quot; title=&quot;当你找到方向就去追吧，即使路跌跌撞撞，也不负这青春，这世界给予的一些馈赠。&quot;&gt;&lt;/a&gt;当你找到方向就去追吧，即使路跌跌撞撞，也不负这青春，这世界给予的一些馈赠。&lt;/h3&gt;&lt;p&gt;每晚静下心来想想下自己，自己的性格，自己的行为是否符合自己的心之所向，有人曾经告诉我我们自己的路要凭感觉去走，而不是踏着别人的痕迹去完成一件以为是了不起的事，其实最后只留下的是一点影子，最后你自己活的更加心急，无法去实现自己的想法，那样我宁可把自己关在自己的世界里，连顺头的勇气也不需要，因为这路本来就是在错的路上继续找到自己正确的路，我不需要抛弃我的一些性格，一些行为，因为我知道我就是我，我又不一样的烟火。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;逐渐的去了解别人的想法，逐渐的去接触我所接触不到的领域，开始焦虑，喜欢幻想的习惯原来越严重，我的思维就越停滞，我不知道我继续前进的动力是什么，难道我就属于那种处于城市边缘的人嘛，我不希望我把自己束缚在一个狭小的领域，然后自高自大，我觉得我人生观在改变，越来我注重的责任，我现在的趋向却是一种难言的思想，就是想着成功，然后享乐，我不知道我收到了什么影响，但我知道这样继续下去，我的信仰是否会贬值，也许很多人说幻想就是信仰的一种执著，但我想到的却不是这样，总在探索也是一种信仰，当你的心得到一种升华的时候，你就离你的梦接近了，我在这样的情况下我却不知道是否已经迷失在自己的思想，我也在探索，当我还在工作的时候，请继续记住还有我即使我还是那么渺小，害怕的一种心理就是不想去面对，然后就会过去，我的失败就是太过了解自己，束缚了自己执行力，原来的友谊还在，可是早已经不是原来的自己，那时只是为了看书，而不是为了养活自己的，我现在都害怕以前的那种冲动，现在理智的时候却失去了一种动力继续前进，很多人的印象为何都那么的相同，其实我自己也在反思自己，自己的勇气已经消耗完了吗。要不然为何那么畏缩的退后，我不知道为何自己的感情越来越糟，是否我一直都在徘徊，在犹豫，还是担心不小的未来，我真正的去了解过自己吗，我在数星星的时候，再看这世界的时候是否就注定我是一个被人遗弃的人呢，很久以前的时候就想疯一下，即使最后失败也没什么，但为何时间的推移却把最初的那种想法深藏，也许这也是我焦虑的原因之一吧。&lt;/p&gt;
&lt;p&gt;我一开始的路是否就已经埋伏了我的时间就是为了别人，看着别人的哪些来往，其实我还是挺有感触的，其实我们是否都太过于迂腐呢，难道就是因为我的被动吗，我已经无力去实现一个承诺了，那时的年轻是否已经消失，已经失去了对你的一种心理，最后朋友的那声问候其实只是一种告别，对过去的告别，对自己的告别，当你心有多大，你的未来却在那一片地上圈一个小方格，然后继续前行，当心有所属，是否就不会湛恋远方。&lt;/p&gt;
&lt;p&gt;你有思考过自己的未来的路，在星空下，你是否也有星辰大海的那种想法，但我却想不到未来的一点讯息，也许这就是我所幻想的一种形式，我都不再去解决自己的难题，最后是否就是复制一种不好的感觉继续错下去，我真的是尽力的去拯救已经不属于我的梦想，只要有追逐，也许我就有方向吧。我也只能把自己的思想封装，然后继续前进，哪路的风光正好。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://o94r16s1l.bkt.clouddn.com/%E5%A6%B9%E7%BA%B8.png&quot; alt=&quot;追逐梦想一起飞&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;当你找到方向就去追吧，即使路跌跌撞撞，也不负这青春，这世界给予的一些馈赠。&quot;&gt;&lt;a href=&quot;#当你找到方向就去追吧，即使路跌跌撞撞，也不负这青春，这世界给予的一些馈赠。&quot; class=&quot;headerlink&quot; title=&quot;当你找到方向就去追吧，即使路跌跌撞撞，也不负这青春，这世界给予的一些馈赠。&quot;&gt;&lt;/a&gt;当你找到方向就去追吧，即使路跌跌撞撞，也不负这青春，这世界给予的一些馈赠。&lt;/h3&gt;&lt;p&gt;每晚静下心来想想下自己，自己的性格，自己的行为是否符合自己的心之所向，有人曾经告诉我我们自己的路要凭感觉去走，而不是踏着别人的痕迹去完成一件以为是了不起的事，其实最后只留下的是一点影子，最后你自己活的更加心急，无法去实现自己的想法，那样我宁可把自己关在自己的世界里，连顺头的勇气也不需要，因为这路本来就是在错的路上继续找到自己正确的路，我不需要抛弃我的一些性格，一些行为，因为我知道我就是我，我又不一样的烟火。&lt;br&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="http://lxh5431.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>半夜敲钟夜半醒</title>
    <link href="http://lxh5431.github.io/2016/01/25/%E5%8D%8A%E5%A4%9C%E6%95%B2%E9%92%9F%E5%A4%9C%E5%8D%8A%E9%86%92/"/>
    <id>http://lxh5431.github.io/2016/01/25/半夜敲钟夜半醒/</id>
    <published>2016-01-25T04:54:58.000Z</published>
    <updated>2016-07-12T15:20:05.216Z</updated>
    
    <content type="html">&lt;p&gt;读书杂谈又走在路上，已经很久没要求自己去读一些自己无法逾越的书，最近看到同学刷出自己大学的阅读清单，心有感想，自己虽然也读了很多书，不过很多书我觉得对我用处还是很偏的，有时候发觉自己阅读不求甚解，囫囵吞枣的读完一本书，也许只有静下心来阅读才能领悟自己的专业到不了的开拓之地。&lt;br&gt;&lt;img src=&quot;http://o94r16s1l.bkt.clouddn.com/%E5%93%88%E5%93%88.jpg&quot; alt=&quot;书籍是最好的老师&quot;&gt;&lt;br&gt;现在电子科技日新月异，每天都有不一样的技术产生，现在已经很少人舍得放下自己的手机，拿起一本厚重的书去认真的走进作者虚构的世界里，净化自己浮躁的心，也许是时代改变了我们，也许是自己把自己埋葬了自己的平常心。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;在生活中，随处可见的低头族，电子产品呆了便利，带来了快捷与舒适，但我觉得却带走了淡淡的那种紧凑感，我走在路上，看人来人往，我觉得我们现在不知缺少阅读，还缺少的是一颗向往求知的心，太多的阅读更多的指向于职业，指向于了一种技能，我不知道这样下去是否这个世界变得更加浮躁，我知道现在都很忙，可是能否停下你的脚步，回头望下，你的脚步除了你自己的还有多少是循着别人的脚印走过来，也许很多都是跌宕，但却没有别人的脚印，我们需要的不止是书中的品行，还有就是经验，有时候我也很惊讶我居然能一遍一遍的看红楼梦，看三国演义，而我看书总不注重于一个故事，我更想的阅读都是一些诗词和句子的优美性。一个好的句子能够描绘一个场景的一半，而不是在无病呻吟的述说。很喜欢书堆起来的样子，那样会觉得我在梦里也感到踏实，是否是书香的那种洒脱让我感到心安。一直很想要一个有书房的房间，那样我可以在一个更加幽静的环境里看不一样的世界，现在我觉得离梦里越来越远，也许下一刻我就会被电子书包围，迷失在电子和科技的世界里。只剩下的是机械的生活，我没有了灵魂。&lt;/p&gt;
&lt;p&gt;去桂林踏青，看到了不一样的桂电，游览了桂林的许多闻名的地点，感受风霜的洗刷下的桂林市那么的静美，我能聆听到一座城市在一千多年来经受着怎样的考验才能呈现出烟雨蒙蒙的桂林，诗意般笼罩的桂林，奇山秀水的桂林，我走在大街上，在一个角落居然发现了一个老书店，开在榕树的转角处，开在一个底蕴十足的繁华城市里，零落的人群让我停下的不止是脚步，也有我的思想，也许现在已经没有了对书籍的一种第一印象了，我只能不只一次的徘徊在这榕树下，听这城市的脉搏，也许下一刻能让我回到一千年以前的那个充满了原始的风淳朴朴吧，也许这才是一个对阅读还算向往的一种慰藉吧。&lt;/p&gt;
&lt;p&gt;等一个时间，当这天气晴朗，泡一杯名茶，带上一本娴静凝练的书籍，在一棵千年不成千年的榕树，听树上的小动物在研讨丰年，翻开已经发黄的书页，让我再一次去感受，接近，领悟人生的真谛吧。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;读书杂谈又走在路上，已经很久没要求自己去读一些自己无法逾越的书，最近看到同学刷出自己大学的阅读清单，心有感想，自己虽然也读了很多书，不过很多书我觉得对我用处还是很偏的，有时候发觉自己阅读不求甚解，囫囵吞枣的读完一本书，也许只有静下心来阅读才能领悟自己的专业到不了的开拓之地。&lt;br&gt;&lt;img src=&quot;http://o94r16s1l.bkt.clouddn.com/%E5%93%88%E5%93%88.jpg&quot; alt=&quot;书籍是最好的老师&quot;&gt;&lt;br&gt;现在电子科技日新月异，每天都有不一样的技术产生，现在已经很少人舍得放下自己的手机，拿起一本厚重的书去认真的走进作者虚构的世界里，净化自己浮躁的心，也许是时代改变了我们，也许是自己把自己埋葬了自己的平常心。&lt;br&gt;
    
    </summary>
    
      <category term="夜想" scheme="http://lxh5431.github.io/categories/%E5%A4%9C%E6%83%B3/"/>
    
    
      <category term="随笔" scheme="http://lxh5431.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>择一城终老</title>
    <link href="http://lxh5431.github.io/2016/01/25/%E6%8B%A9%E4%B8%80%E5%9F%8E%E7%BB%88%E8%80%81/"/>
    <id>http://lxh5431.github.io/2016/01/25/择一城终老/</id>
    <published>2016-01-25T03:10:58.000Z</published>
    <updated>2016-06-25T08:17:39.824Z</updated>
    
    <content type="html">&lt;h3 id=&quot;择一城终老，我走在凡尘只为了寻找一座城，一个人—序&quot;&gt;&lt;a href=&quot;#择一城终老，我走在凡尘只为了寻找一座城，一个人—序&quot; class=&quot;headerlink&quot; title=&quot;择一城终老，我走在凡尘只为了寻找一座城，一个人—序&quot;&gt;&lt;/a&gt;择一城终老，我走在凡尘只为了寻找一座城，一个人—序&lt;/h3&gt;&lt;p&gt;习惯的打开音乐，听一首空灵的音乐，让我心平静下来，然后再慢慢的思考，思考友情，爱情，还有前路的憧憬，还有对人对物的一种思考，我总是在旅途，看不完的陌生人，也许只是过客，也许他们就是我下一站的接待者，总感觉这世界总是那么多的措意，我只愿在下一个路口，能够等来能跟我一起走的人，分享旅途，分享快乐。&lt;/p&gt;
&lt;p&gt;最近经过一座城市，生活了三年的小城，熟悉的面孔，熟悉的乡音，熟悉的道路，依然嘲笑一个游子的无助与困惑。穿行的十字路口也许还有人带你选择去哪里，也许你想回头，可是前路早已不是你要走的路，很难想象转盘现在只能留在我的记忆力，现在是红绿灯的毫不犹豫了想想三年下来走遍了一座城市，然而现在还只是路过一座城，然后瞭望，我需要找到的不是一个房子，不是街道，我需要找一个能够慰藉我心中念望的最后一根稻草。我只能走到田野里，瞭望，等待下一个天明，继续寻找。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;每次看到朋友把择一座城终老，老还来不及，城依然还在，我们是否需要追求其本身的那种表达，现在择城容易，终老何其困难，在你选择的一座城假如没有了瞭望，然后就是钢筋水泥的楼房把每天的生活占据，这就是当我们学会了生活就失去了瞭望，失去了不仅是终老一座城的最基本的生活保障与精神需求，开始慢慢的迷失于城市的迷宫，我想要的是过一座城，等待我该等待的，然后一起瞭望，憧憬属于自己的未来，而不是只是为了一座城而去找一个人，我们所需要的不止是物质的冲击，还得点一盏灯，让我们的小舟不至于迷失。&lt;/p&gt;
&lt;p&gt;这个思想只是根植于我受限的思维吧。也许等到我思维足够我去试探不一样的生活，我是否会逃离本应该安谧的生活，然后继续去打拼，最后是否会遍体鳞伤的委屈的流泪，我现在是否也受到来自于大众的影响，然后慢慢的迷失自我，最后只剩一具躯壳，我想不会，只要我还有信仰，我就觉我还有继续前进的理由，我不怕别人怎么评价我的一生，我只希望，在对的时间里找到自己的心属，属于自己的一片天空。&lt;br&gt;每天都会看到一项项数据在暴涨，要继续前行是那么的乱，不知道该不该去修改早已经刻在心里的计划，也许路上的修补才能找到一弯明月，指引继续前行，不仅仅为了自己压抑的心情，还有对一些些人一些书的看法，当我很想去面对的时候，总感觉我不够勇敢，选择与被选择中，到底我一直依仗的性格是否会成为绊脚石，我不懂得，不需要去懂，因为我觉得最终的梦想已经离我而去，我需要的是见风使舵，继续前进，即使前面的城市还是一个起点，我也依然去，依然前行。&lt;/p&gt;
&lt;p&gt;我一直在城市里穿梭，来到过最南的雁门关，到过海岛去看一场不大不小的海浪，坚持爬完了泰山这个古来有名的山，它该在那个城市里寻找有缘人，也许早已经断了继续寻找的想法，只希望我们还有力量去感悟，去流浪，天涯海角，我只希望走过一座城，然后继续瞭望。那些属于我的岁月不会被年轮碾碎，只会留在我梦里，等一朵花开。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;择一城终老，我走在凡尘只为了寻找一座城，一个人—序&quot;&gt;&lt;a href=&quot;#择一城终老，我走在凡尘只为了寻找一座城，一个人—序&quot; class=&quot;headerlink&quot; title=&quot;择一城终老，我走在凡尘只为了寻找一座城，一个人—序&quot;&gt;&lt;/a&gt;择一城终老，我走在凡尘只为了寻找一座城，一个人—序&lt;/h3&gt;&lt;p&gt;习惯的打开音乐，听一首空灵的音乐，让我心平静下来，然后再慢慢的思考，思考友情，爱情，还有前路的憧憬，还有对人对物的一种思考，我总是在旅途，看不完的陌生人，也许只是过客，也许他们就是我下一站的接待者，总感觉这世界总是那么多的措意，我只愿在下一个路口，能够等来能跟我一起走的人，分享旅途，分享快乐。&lt;/p&gt;
&lt;p&gt;最近经过一座城市，生活了三年的小城，熟悉的面孔，熟悉的乡音，熟悉的道路，依然嘲笑一个游子的无助与困惑。穿行的十字路口也许还有人带你选择去哪里，也许你想回头，可是前路早已不是你要走的路，很难想象转盘现在只能留在我的记忆力，现在是红绿灯的毫不犹豫了想想三年下来走遍了一座城市，然而现在还只是路过一座城，然后瞭望，我需要找到的不是一个房子，不是街道，我需要找一个能够慰藉我心中念望的最后一根稻草。我只能走到田野里，瞭望，等待下一个天明，继续寻找。&lt;br&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="http://lxh5431.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>写给2016</title>
    <link href="http://lxh5431.github.io/2016/01/01/%E5%86%99%E7%BB%992016/"/>
    <id>http://lxh5431.github.io/2016/01/01/写给2016/</id>
    <published>2016-01-01T04:54:18.000Z</published>
    <updated>2016-07-15T06:54:18.219Z</updated>
    
    <content type="html">&lt;p&gt;2016，你好，在这个最后一秒的前一年，只希望能以这个文章来总结过去，展望未来，还有就是能够明显的看待未来，我是否已经开始学会去思考我自己的过失，自己的优缺点，还有我对未来的敏捷的反应，我在思考的世界里慢慢的等待一次黎明。&lt;br&gt;&lt;img src=&quot;http://o94r16s1l.bkt.clouddn.com/1120556071e422310fl.jpg&quot; alt=&quot;小女孩&quot;&gt;&lt;/p&gt;
&lt;p&gt;不知道是烟花的璀璨送走了2015，还是鞭炮的操纵声把这世界分得更加的清明，让人很容易的去分辨浑浊的世界和一个不赞同的界限，我在那个阵营都进退维谷，也许这也是作为一个作家的悲哀吧，我一直的在去描述别人的悲欢离合，然而我一直在忽视自己的那些感情，这是很容易进入一种无人的世界，让自己迷失自己，有时候这种就是一个人的最终的状态，但这里却是用一生去维护，也许一直在里面出不来，这就是作为一个写者的宿命吧。&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;有时候我们也不相信天，可是这自然的规律我们又迎合多少呢，我们只是在凡世的一个能思考前路的一种状态而已，有时候真正的懂自己的才是最好的，至少对这个宿命有一种抵抗，我不想把我自己的思想带进我都无法预知的领域，然后再此挣扎，然后呐喊一下，最后无声息，这真是一个无法想象的结局，有时候仰望天空，星空点点的时候，我觉得这世界是多么的安静，没有思想，回归到最初的一种状态，感受下最原始的那种维和感，忘记城市的繁华，忘记工作的压抑，最后忘记自己的一生轨迹，但我发现那时候什么都没有，然后什么也没带走，也不会感到老天作弄，这就是一种任命的状态吧，我需要的不再是一种回答，而是你对我的一种承诺，也是这也是一个人的弱点，当你无法沉沦的时候，请振作，然后把自己伪装，我相信属于自己的总会能够等待一个晨曦，当太阳升起的时候，就会看到曙光。&lt;/p&gt;
&lt;p&gt;当你去了解一件事，一个片段，一个未来的节点，还是对生活的一个剪影，我首先需要去了解的是怎么开始，而不是结果，这也许不是一个项目的最好的方法，但我知道有时候跳出自己的思维是一种需要很大勇气的活动，我曾经一个人在夜里去触摸黑暗，课我发现除了我的是思想还在动，我进入一个小盒子里，看不到更多的让我继续下去的理由，我想这就是一种束缚吧，现在我们的思想我觉得就是这种状态吧，对2016的期待我觉得不需要太多，自希望我找到跳出束缚的一种动力，我发现我需要一种更加强烈的信仰去维持我所寻找的念想，我也需要一个理由去继续相信这天还是蓝的，地还是绿的，你的感情依然，到最后总是那么无助，就像有人说的那样我还需要理解你，可是真的这世界还是物质的一个交换，而不是感情的交流，所以我相信的我所坚持的不再是去寻找，而是停下来去思考路在何方我该不该继续前行呢，我需要的不再是理由，而是一个承诺，一个思想，一种信仰的动力。&lt;/p&gt;
&lt;p&gt;最近总是感觉千言万语，还不如把我所经的去感悟，然后整理不一样的烟火，也许回头的那一天我正好需要这不一样的文字，与文字为伴，2016，我与你同行。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;2016，你好，在这个最后一秒的前一年，只希望能以这个文章来总结过去，展望未来，还有就是能够明显的看待未来，我是否已经开始学会去思考我自己的过失，自己的优缺点，还有我对未来的敏捷的反应，我在思考的世界里慢慢的等待一次黎明。&lt;br&gt;&lt;img src=&quot;http://o94r16s1l.bkt.clouddn.com/1120556071e422310fl.jpg&quot; alt=&quot;小女孩&quot;&gt;&lt;/p&gt;
&lt;p&gt;不知道是烟花的璀璨送走了2015，还是鞭炮的操纵声把这世界分得更加的清明，让人很容易的去分辨浑浊的世界和一个不赞同的界限，我在那个阵营都进退维谷，也许这也是作为一个作家的悲哀吧，我一直的在去描述别人的悲欢离合，然而我一直在忽视自己的那些感情，这是很容易进入一种无人的世界，让自己迷失自己，有时候这种就是一个人的最终的状态，但这里却是用一生去维护，也许一直在里面出不来，这就是作为一个写者的宿命吧。
    
    </summary>
    
      <category term="大学" scheme="http://lxh5431.github.io/categories/%E5%A4%A7%E5%AD%A6/"/>
    
    
      <category term="随笔" scheme="http://lxh5431.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>写给这一年的自己</title>
    <link href="http://lxh5431.github.io/2015/12/25/%E5%86%99%E7%BB%99%E8%BF%99%E4%B8%80%E5%B9%B4%E7%9A%84%E8%87%AA%E5%B7%B1/"/>
    <id>http://lxh5431.github.io/2015/12/25/写给这一年的自己/</id>
    <published>2015-12-25T04:55:14.000Z</published>
    <updated>2016-06-28T10:31:30.204Z</updated>
    
    <content type="html">&lt;h2 id=&quot;那一天我二十一岁，在我一生的黄金时代，我有好多奢望。我想爱，想吃，想走过世界的每个角落。—–黄金时代&quot;&gt;&lt;a href=&quot;#那一天我二十一岁，在我一生的黄金时代，我有好多奢望。我想爱，想吃，想走过世界的每个角落。—–黄金时代&quot; class=&quot;headerlink&quot; title=&quot;那一天我二十一岁，在我一生的黄金时代，我有好多奢望。我想爱，想吃，想走过世界的每个角落。—–黄金时代&quot;&gt;&lt;/a&gt;那一天我二十一岁，在我一生的黄金时代，我有好多奢望。我想爱，想吃，想走过世界的每个角落。—–黄金时代&lt;/h2&gt;&lt;p&gt;当你还在狂欢，还在庆祝这一天的到来可我知道这一天给予的不再是恩赐，还有责任，对生命的一种责任，不是别人说的那种责任感，而是认识自己，相信自己，相信未来的一种信念，很喜欢幻想，但我知道付出的不再仅仅是回报的代名词，付出的也需要有机会去沉淀，所谓的人生不就是向自己挑战的一个过程，也许为了生活，为了幻想，为了一切和你有关的人的一种承诺，也许有一天，我们不需要继续前行，才能够停止自己前进的脚步，但我们既然来到这里就希望能够为自己画上自己的起点，每年都想更近一点的去做好自己的本分，可是我知道有时候对自己好一点就能够更好的去揭示，更好的去选择，不知道别人如何去评论一个沉默的人，但别人的言语不再成为前进的一个鼓励词，我也依然知道我该去哪里，路在何方。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;回想过去的一年，有过对友情的怀疑，有过对生活的坚定，有过对就业的误判，有过在操场一圈一圈的听着不一样的歌去想着不一样的想法，关于交通，关于城市，关于生活中的一切，偶时候在仰望夜空中的时候才能让自己更加的认清我自己，对于友情，我是谨慎的，不希望自己受伤害，也不希望别人因我而失去攒起来的那点信任，我总是试着随意的去诠释所谓的友情，不是因为我知道你的信息而去思考，一直很沉稳的想过，到底以后的谁的谁，会不会还在我的生命里继续前进，也许我们都走在一条路上只是我开始就选择了一条不一样的路，那是痛苦却坚定的路，不需要理由去解释的路。&lt;/p&gt;
&lt;p&gt;当你用语言去描述了你的困境，你就能够找到向前的路。看着书桌上的仅有的几本书籍，有技术的，但更多的关于人生的一点思考，三毛的撒啦哈的恬静而不平淡的生活，张小娴的那种对世事洞察的深邃，还是鲁迅投医从文的那种执着，杂文的魅力形而散，生命的真谛谁又能够去塑造呢，还不如沿着别人的脚印，寻找自己的路，有时候真的很难去想象自己，一个对世界的冷酷还没有认识或者渐显的认识的人如何去想，如何去做，每个人都有自己的路要走。一个人走更能坚定我自己的心吧。&lt;/p&gt;
&lt;p&gt;记忆不会划去你脸上的沧桑站在十字路口总是那么的恍惚，何去何从，每天深夜的那一行行字符是否是自己对自己的一种安慰呢，其实有时候停下来的时候才知道我其实还是沧海一粟，谁也跳不过那个水堤，我只是在自我的精神世界里沉浮，很多人都知道自己的方向，可是却缺少一点勇气去。闯荡的时候记得我还需要一点方向，而不是什么都不会，然后最后迷失自己，当我还需要自己的时候我就能够有理由去实践自己的梦还有盟约，有时候到达的一个目标其实就是你自己的那点心思，我只需要在最后一秒找到自己的路。&lt;/p&gt;
&lt;p&gt;当你在路上，我依然希望有你陪伴，即使不是最后的长诗。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;那一天我二十一岁，在我一生的黄金时代，我有好多奢望。我想爱，想吃，想走过世界的每个角落。—–黄金时代&quot;&gt;&lt;a href=&quot;#那一天我二十一岁，在我一生的黄金时代，我有好多奢望。我想爱，想吃，想走过世界的每个角落。—–黄金时代&quot; class=&quot;headerlink&quot; title=&quot;那一天我二十一岁，在我一生的黄金时代，我有好多奢望。我想爱，想吃，想走过世界的每个角落。—–黄金时代&quot;&gt;&lt;/a&gt;那一天我二十一岁，在我一生的黄金时代，我有好多奢望。我想爱，想吃，想走过世界的每个角落。—–黄金时代&lt;/h2&gt;&lt;p&gt;当你还在狂欢，还在庆祝这一天的到来可我知道这一天给予的不再是恩赐，还有责任，对生命的一种责任，不是别人说的那种责任感，而是认识自己，相信自己，相信未来的一种信念，很喜欢幻想，但我知道付出的不再仅仅是回报的代名词，付出的也需要有机会去沉淀，所谓的人生不就是向自己挑战的一个过程，也许为了生活，为了幻想，为了一切和你有关的人的一种承诺，也许有一天，我们不需要继续前行，才能够停止自己前进的脚步，但我们既然来到这里就希望能够为自己画上自己的起点，每年都想更近一点的去做好自己的本分，可是我知道有时候对自己好一点就能够更好的去揭示，更好的去选择，不知道别人如何去评论一个沉默的人，但别人的言语不再成为前进的一个鼓励词，我也依然知道我该去哪里，路在何方。&lt;br&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="http://lxh5431.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>
